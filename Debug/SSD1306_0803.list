
SSD1306_0803.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008174  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f8  080082fc  080082fc  000182fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e8  20000000  08009404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
  8 .bss          00006f84  200000e8  200000e8  000200e8  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  2000706c  2000706c  000200e8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00042ac6  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007d56  00000000  00000000  00062bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00014a34  00000000  00000000  0006a934  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c0  00000000  00000000  0007f368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e18  00000000  00000000  00080828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ed73  00000000  00000000  00082640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006ee9  00000000  00000000  000913b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0009829c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003d18  00000000  00000000  00098318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e8 	.word	0x200000e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080082e4 	.word	0x080082e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	080082e4 	.word	0x080082e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8a8 	bl	8000644 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000068 	.word	0x20000068
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f007 fa4c 	bl	80079e4 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000628 	.word	0x20000628
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000628 	.word	0x20000628

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfaf      	iteee	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
 8000610:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	bfa5      	ittet	ge
 8000614:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800062c:	0942      	lsrs	r2, r0, #5
 800062e:	2301      	movs	r3, #1
 8000630:	f000 001f 	and.w	r0, r0, #31
 8000634:	fa03 f000 	lsl.w	r0, r3, r0
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_NVIC_EnableIRQ+0x14>)
 800063a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20a      	bcs.n	8000662 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	21f0      	movs	r1, #240	; 0xf0
 8000654:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000672:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000674:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000676:	bf0c      	ite	eq
 8000678:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800067c:	f022 0204 	bicne.w	r2, r2, #4
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	e000e010 	.word	0xe000e010

08000688 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000688:	4770      	bx	lr

0800068a <HAL_SYSTICK_IRQHandler>:
{
 800068a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800068c:	f7ff fffc 	bl	8000688 <HAL_SYSTICK_Callback>
 8000690:	bd08      	pop	{r3, pc}
	...

08000694 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000694:	6803      	ldr	r3, [r0, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800069c:	f023 0303 	bic.w	r3, r3, #3
 80006a0:	2118      	movs	r1, #24
 80006a2:	3a10      	subs	r2, #16
 80006a4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006a8:	4904      	ldr	r1, [pc, #16]	; (80006bc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80006aa:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80006ac:	bf88      	it	hi
 80006ae:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006b0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80006b2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006b4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80006b6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	080082fc 	.word	0x080082fc

080006c0 <HAL_DMA_Init>:
{
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006c4:	f7ff ff52 	bl	800056c <HAL_GetTick>
 80006c8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	d071      	beq.n	80007b2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80006ce:	2300      	movs	r3, #0
 80006d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80006d4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006dc:	6813      	ldr	r3, [r2, #0]
 80006de:	f023 0301 	bic.w	r3, r3, #1
 80006e2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006e4:	6821      	ldr	r1, [r4, #0]
 80006e6:	680b      	ldr	r3, [r1, #0]
 80006e8:	07d8      	lsls	r0, r3, #31
 80006ea:	d43c      	bmi.n	8000766 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80006ec:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006ee:	4d32      	ldr	r5, [pc, #200]	; (80007b8 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006f0:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006f2:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006f4:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006f6:	68a3      	ldr	r3, [r4, #8]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	68e2      	ldr	r2, [r4, #12]
 80006fc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006fe:	6922      	ldr	r2, [r4, #16]
 8000700:	4313      	orrs	r3, r2
 8000702:	6962      	ldr	r2, [r4, #20]
 8000704:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000706:	69e2      	ldr	r2, [r4, #28]
 8000708:	4303      	orrs	r3, r0
 800070a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800070c:	6a22      	ldr	r2, [r4, #32]
 800070e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000710:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000712:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000714:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000718:	bf01      	itttt	eq
 800071a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800071c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800071e:	4335      	orreq	r5, r6
 8000720:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000722:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000724:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000726:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000728:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800072c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000730:	d10b      	bne.n	800074a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000732:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000734:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000736:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000738:	b13d      	cbz	r5, 800074a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800073a:	b9f8      	cbnz	r0, 800077c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800073c:	2a01      	cmp	r2, #1
 800073e:	d02d      	beq.n	800079c <HAL_DMA_Init+0xdc>
 8000740:	d301      	bcc.n	8000746 <HAL_DMA_Init+0x86>
 8000742:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000744:	d101      	bne.n	800074a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000746:	01ea      	lsls	r2, r5, #7
 8000748:	d42b      	bmi.n	80007a2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800074a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800074c:	4620      	mov	r0, r4
 800074e:	f7ff ffa1 	bl	8000694 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000752:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000754:	233f      	movs	r3, #63	; 0x3f
 8000756:	4093      	lsls	r3, r2
 8000758:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800075a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800075c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800075e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000760:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000764:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000766:	f7ff ff01 	bl	800056c <HAL_GetTick>
 800076a:	1b40      	subs	r0, r0, r5
 800076c:	2805      	cmp	r0, #5
 800076e:	d9b9      	bls.n	80006e4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000770:	2320      	movs	r3, #32
 8000772:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000774:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000776:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800077a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800077c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000780:	d113      	bne.n	80007aa <HAL_DMA_Init+0xea>
    switch (tmp)
 8000782:	2a03      	cmp	r2, #3
 8000784:	d8e1      	bhi.n	800074a <HAL_DMA_Init+0x8a>
 8000786:	a001      	add	r0, pc, #4	; (adr r0, 800078c <HAL_DMA_Init+0xcc>)
 8000788:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800078c:	080007a3 	.word	0x080007a3
 8000790:	08000747 	.word	0x08000747
 8000794:	080007a3 	.word	0x080007a3
 8000798:	0800079d 	.word	0x0800079d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800079c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80007a0:	d1d3      	bne.n	800074a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80007a2:	2340      	movs	r3, #64	; 0x40
 80007a4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80007a6:	2001      	movs	r0, #1
 80007a8:	e7e5      	b.n	8000776 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80007aa:	2a02      	cmp	r2, #2
 80007ac:	d9f9      	bls.n	80007a2 <HAL_DMA_Init+0xe2>
 80007ae:	2a03      	cmp	r2, #3
 80007b0:	e7c8      	b.n	8000744 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80007b2:	2001      	movs	r0, #1
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	bf00      	nop
 80007b8:	f010803f 	.word	0xf010803f

080007bc <HAL_DMA_DeInit>:
{
 80007bc:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80007be:	4605      	mov	r5, r0
 80007c0:	b1f0      	cbz	r0, 8000800 <HAL_DMA_DeInit+0x44>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80007c2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80007c6:	b2e4      	uxtb	r4, r4
 80007c8:	2c02      	cmp	r4, #2
 80007ca:	d017      	beq.n	80007fc <HAL_DMA_DeInit+0x40>
  __HAL_DMA_DISABLE(hdma);
 80007cc:	6803      	ldr	r3, [r0, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	f022 0201 	bic.w	r2, r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 80007d6:	2400      	movs	r4, #0
  hdma->Instance->FCR  = 0x00000021U;
 80007d8:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80007da:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80007dc:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80007de:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80007e0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80007e2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80007e4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007e6:	f7ff ff55 	bl	8000694 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007ea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80007ec:	233f      	movs	r3, #63	; 0x3f
 80007ee:	4093      	lsls	r3, r2
 80007f0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f2:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80007f4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80007f8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 80007fc:	4620      	mov	r0, r4
}
 80007fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000800:	2001      	movs	r0, #1
 8000802:	bd38      	pop	{r3, r4, r5, pc}

08000804 <HAL_DMA_Start_IT>:
{
 8000804:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000806:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800080a:	2c01      	cmp	r4, #1
 800080c:	d036      	beq.n	800087c <HAL_DMA_Start_IT+0x78>
 800080e:	2401      	movs	r4, #1
 8000810:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000814:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000818:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800081a:	2c01      	cmp	r4, #1
 800081c:	f04f 0500 	mov.w	r5, #0
 8000820:	f04f 0402 	mov.w	r4, #2
 8000824:	d128      	bne.n	8000878 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000826:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800082a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800082c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800082e:	6825      	ldr	r5, [r4, #0]
 8000830:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000834:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000836:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000838:	6883      	ldr	r3, [r0, #8]
 800083a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800083c:	bf0e      	itee	eq
 800083e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000840:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000842:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000844:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000846:	bf08      	it	eq
 8000848:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800084a:	233f      	movs	r3, #63	; 0x3f
 800084c:	4093      	lsls	r3, r2
 800084e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	f043 0316 	orr.w	r3, r3, #22
 8000856:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000858:	6963      	ldr	r3, [r4, #20]
 800085a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000860:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000862:	b11b      	cbz	r3, 800086c <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000864:	6823      	ldr	r3, [r4, #0]
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000874:	2000      	movs	r0, #0
 8000876:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000878:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800087c:	2002      	movs	r0, #2
}
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <HAL_DMA_Abort>:
{
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000884:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8000886:	f7ff fe71 	bl	800056c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800088a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800088e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8000890:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000892:	d006      	beq.n	80008a2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8000898:	2300      	movs	r3, #0
 800089a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800089e:	2001      	movs	r0, #1
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008a2:	6823      	ldr	r3, [r4, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	f022 0216 	bic.w	r2, r2, #22
 80008aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008b2:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80008b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008b6:	b90a      	cbnz	r2, 80008bc <HAL_DMA_Abort+0x3c>
 80008b8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80008ba:	b11a      	cbz	r2, 80008c4 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	f022 0208 	bic.w	r2, r2, #8
 80008c2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	f022 0201 	bic.w	r2, r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	f010 0001 	ands.w	r0, r0, #1
 80008d4:	d109      	bne.n	80008ea <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008d8:	233f      	movs	r3, #63	; 0x3f
 80008da:	4093      	lsls	r3, r2
 80008dc:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80008de:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80008e0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80008e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008ea:	f7ff fe3f 	bl	800056c <HAL_GetTick>
 80008ee:	1b80      	subs	r0, r0, r6
 80008f0:	2805      	cmp	r0, #5
 80008f2:	d9eb      	bls.n	80008cc <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008f4:	2320      	movs	r3, #32
 80008f6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008f8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80008fa:	2300      	movs	r3, #0
 80008fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000900:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8000904:	bd70      	pop	{r4, r5, r6, pc}

08000906 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000906:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800090a:	2b02      	cmp	r3, #2
 800090c:	d003      	beq.n	8000916 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000912:	2001      	movs	r0, #1
 8000914:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000916:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000918:	2305      	movs	r3, #5
 800091a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800091e:	6813      	ldr	r3, [r2, #0]
 8000920:	f023 0301 	bic.w	r3, r3, #1
 8000924:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000926:	2000      	movs	r0, #0
}
 8000928:	4770      	bx	lr
	...

0800092c <HAL_DMA_IRQHandler>:
{
 800092c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800092e:	2300      	movs	r3, #0
 8000930:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000932:	4b5a      	ldr	r3, [pc, #360]	; (8000a9c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000934:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000936:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000938:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800093a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800093c:	2208      	movs	r2, #8
 800093e:	409a      	lsls	r2, r3
 8000940:	4216      	tst	r6, r2
{
 8000942:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000944:	d00c      	beq.n	8000960 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000946:	6801      	ldr	r1, [r0, #0]
 8000948:	6808      	ldr	r0, [r1, #0]
 800094a:	0740      	lsls	r0, r0, #29
 800094c:	d508      	bpl.n	8000960 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800094e:	6808      	ldr	r0, [r1, #0]
 8000950:	f020 0004 	bic.w	r0, r0, #4
 8000954:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000956:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000958:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800095a:	f042 0201 	orr.w	r2, r2, #1
 800095e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000960:	2201      	movs	r2, #1
 8000962:	409a      	lsls	r2, r3
 8000964:	4216      	tst	r6, r2
 8000966:	d008      	beq.n	800097a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000968:	6821      	ldr	r1, [r4, #0]
 800096a:	6949      	ldr	r1, [r1, #20]
 800096c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800096e:	bf41      	itttt	mi
 8000970:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000972:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000974:	f042 0202 	orrmi.w	r2, r2, #2
 8000978:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800097a:	2204      	movs	r2, #4
 800097c:	409a      	lsls	r2, r3
 800097e:	4216      	tst	r6, r2
 8000980:	d008      	beq.n	8000994 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000982:	6821      	ldr	r1, [r4, #0]
 8000984:	6809      	ldr	r1, [r1, #0]
 8000986:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000988:	bf41      	itttt	mi
 800098a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800098c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800098e:	f042 0204 	orrmi.w	r2, r2, #4
 8000992:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000994:	2210      	movs	r2, #16
 8000996:	409a      	lsls	r2, r3
 8000998:	4216      	tst	r6, r2
 800099a:	d010      	beq.n	80009be <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800099c:	6823      	ldr	r3, [r4, #0]
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	0709      	lsls	r1, r1, #28
 80009a2:	d50c      	bpl.n	80009be <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80009a4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	0350      	lsls	r0, r2, #13
 80009aa:	d535      	bpl.n	8000a18 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	0319      	lsls	r1, r3, #12
 80009b0:	d401      	bmi.n	80009b6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80009b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009b4:	e000      	b.n	80009b8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80009b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80009b8:	b10b      	cbz	r3, 80009be <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80009ba:	4620      	mov	r0, r4
 80009bc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80009be:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80009c0:	2220      	movs	r2, #32
 80009c2:	408a      	lsls	r2, r1
 80009c4:	4216      	tst	r6, r2
 80009c6:	d038      	beq.n	8000a3a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	06c6      	lsls	r6, r0, #27
 80009ce:	d534      	bpl.n	8000a3a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80009d0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009d2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80009d6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009d8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009da:	d125      	bne.n	8000a28 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009dc:	f022 0216 	bic.w	r2, r2, #22
 80009e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009e2:	695a      	ldr	r2, [r3, #20]
 80009e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009e8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009ec:	b90a      	cbnz	r2, 80009f2 <HAL_DMA_IRQHandler+0xc6>
 80009ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009f0:	b11a      	cbz	r2, 80009fa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	f022 0208 	bic.w	r2, r2, #8
 80009f8:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009fa:	233f      	movs	r3, #63	; 0x3f
 80009fc:	408b      	lsls	r3, r1
 80009fe:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000a00:	2300      	movs	r3, #0
 8000a02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000a06:	2301      	movs	r3, #1
 8000a08:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000a0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000a0e:	b10b      	cbz	r3, 8000a14 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000a10:	4620      	mov	r0, r4
 8000a12:	4798      	blx	r3
}
 8000a14:	b003      	add	sp, #12
 8000a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a1c:	bf5e      	ittt	pl
 8000a1e:	681a      	ldrpl	r2, [r3, #0]
 8000a20:	f022 0208 	bicpl.w	r2, r2, #8
 8000a24:	601a      	strpl	r2, [r3, #0]
 8000a26:	e7c4      	b.n	80009b2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a28:	0350      	lsls	r0, r2, #13
 8000a2a:	d528      	bpl.n	8000a7e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	0319      	lsls	r1, r3, #12
 8000a30:	d432      	bmi.n	8000a98 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000a34:	b10b      	cbz	r3, 8000a3a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000a36:	4620      	mov	r0, r4
 8000a38:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0e9      	beq.n	8000a14 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a42:	07da      	lsls	r2, r3, #31
 8000a44:	d519      	bpl.n	8000a7a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a46:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000a48:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a4a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a56:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a5a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000a5e:	9b01      	ldr	r3, [sp, #4]
 8000a60:	3301      	adds	r3, #1
 8000a62:	429f      	cmp	r7, r3
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	d302      	bcc.n	8000a6e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a68:	6813      	ldr	r3, [r2, #0]
 8000a6a:	07db      	lsls	r3, r3, #31
 8000a6c:	d4f7      	bmi.n	8000a5e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a74:	2301      	movs	r3, #1
 8000a76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a7c:	e7c7      	b.n	8000a0e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a84:	d108      	bne.n	8000a98 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a86:	6819      	ldr	r1, [r3, #0]
 8000a88:	f021 0110 	bic.w	r1, r1, #16
 8000a8c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a8e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a90:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000a98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a9a:	e7cb      	b.n	8000a34 <HAL_DMA_IRQHandler+0x108>
 8000a9c:	20000068 	.word	0x20000068

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000c58 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aac:	4a68      	ldr	r2, [pc, #416]	; (8000c50 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aae:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000c5c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ab4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000ab6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aba:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000abc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000ac4:	45b6      	cmp	lr, r6
 8000ac6:	f040 80ae 	bne.w	8000c26 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aca:	684c      	ldr	r4, [r1, #4]
 8000acc:	f024 0710 	bic.w	r7, r4, #16
 8000ad0:	2f02      	cmp	r7, #2
 8000ad2:	d116      	bne.n	8000b02 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000ad4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ad8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000adc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ae0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ae4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ae8:	f04f 0c0f 	mov.w	ip, #15
 8000aec:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000af0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000af4:	690d      	ldr	r5, [r1, #16]
 8000af6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000afa:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000afe:	f8ca 5020 	str.w	r5, [sl, #32]
 8000b02:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b06:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000b08:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b0c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000b10:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b12:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b16:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b1a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b20:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b24:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000b26:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b2a:	d811      	bhi.n	8000b50 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000b2c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b2e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b32:	68cf      	ldr	r7, [r1, #12]
 8000b34:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000b38:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000b3c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b3e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b40:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b44:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000b48:	409f      	lsls	r7, r3
 8000b4a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b4e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b50:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b52:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b54:	688f      	ldr	r7, [r1, #8]
 8000b56:	fa07 f70a 	lsl.w	r7, r7, sl
 8000b5a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b5c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5e:	00e5      	lsls	r5, r4, #3
 8000b60:	d561      	bpl.n	8000c26 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	f04f 0b00 	mov.w	fp, #0
 8000b66:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b6a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b6e:	4d39      	ldr	r5, [pc, #228]	; (8000c54 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b70:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b74:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b78:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b7c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b80:	9703      	str	r7, [sp, #12]
 8000b82:	9f03      	ldr	r7, [sp, #12]
 8000b84:	f023 0703 	bic.w	r7, r3, #3
 8000b88:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b8c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b90:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b94:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b98:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b9c:	f04f 0e0f 	mov.w	lr, #15
 8000ba0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ba4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ba6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000baa:	d043      	beq.n	8000c34 <HAL_GPIO_Init+0x194>
 8000bac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bb0:	42a8      	cmp	r0, r5
 8000bb2:	d041      	beq.n	8000c38 <HAL_GPIO_Init+0x198>
 8000bb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bb8:	42a8      	cmp	r0, r5
 8000bba:	d03f      	beq.n	8000c3c <HAL_GPIO_Init+0x19c>
 8000bbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bc0:	42a8      	cmp	r0, r5
 8000bc2:	d03d      	beq.n	8000c40 <HAL_GPIO_Init+0x1a0>
 8000bc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bc8:	42a8      	cmp	r0, r5
 8000bca:	d03b      	beq.n	8000c44 <HAL_GPIO_Init+0x1a4>
 8000bcc:	4548      	cmp	r0, r9
 8000bce:	d03b      	beq.n	8000c48 <HAL_GPIO_Init+0x1a8>
 8000bd0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000bd4:	42a8      	cmp	r0, r5
 8000bd6:	d039      	beq.n	8000c4c <HAL_GPIO_Init+0x1ac>
 8000bd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bdc:	42a8      	cmp	r0, r5
 8000bde:	bf14      	ite	ne
 8000be0:	2508      	movne	r5, #8
 8000be2:	2507      	moveq	r5, #7
 8000be4:	fa05 f50c 	lsl.w	r5, r5, ip
 8000be8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bec:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000bee:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bf0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bf6:	bf0c      	ite	eq
 8000bf8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bfa:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000bfc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000bfe:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c00:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c04:	bf0c      	ite	eq
 8000c06:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c08:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000c0a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c0c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c12:	bf0c      	ite	eq
 8000c14:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c16:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000c18:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000c1a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c1c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c1e:	bf54      	ite	pl
 8000c20:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000c22:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000c24:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c26:	3301      	adds	r3, #1
 8000c28:	2b10      	cmp	r3, #16
 8000c2a:	f47f af44 	bne.w	8000ab6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000c2e:	b005      	add	sp, #20
 8000c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c34:	465d      	mov	r5, fp
 8000c36:	e7d5      	b.n	8000be4 <HAL_GPIO_Init+0x144>
 8000c38:	2501      	movs	r5, #1
 8000c3a:	e7d3      	b.n	8000be4 <HAL_GPIO_Init+0x144>
 8000c3c:	2502      	movs	r5, #2
 8000c3e:	e7d1      	b.n	8000be4 <HAL_GPIO_Init+0x144>
 8000c40:	2503      	movs	r5, #3
 8000c42:	e7cf      	b.n	8000be4 <HAL_GPIO_Init+0x144>
 8000c44:	2504      	movs	r5, #4
 8000c46:	e7cd      	b.n	8000be4 <HAL_GPIO_Init+0x144>
 8000c48:	2505      	movs	r5, #5
 8000c4a:	e7cb      	b.n	8000be4 <HAL_GPIO_Init+0x144>
 8000c4c:	2506      	movs	r5, #6
 8000c4e:	e7c9      	b.n	8000be4 <HAL_GPIO_Init+0x144>
 8000c50:	40013c00 	.word	0x40013c00
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40021400 	.word	0x40021400

08000c60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000c64:	4e46      	ldr	r6, [pc, #280]	; (8000d80 <HAL_GPIO_DeInit+0x120>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000c66:	f8df a120 	ldr.w	sl, [pc, #288]	; 8000d88 <HAL_GPIO_DeInit+0x128>
 8000c6a:	f8df b120 	ldr.w	fp, [pc, #288]	; 8000d8c <HAL_GPIO_DeInit+0x12c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6e:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 8000c70:	f04f 0901 	mov.w	r9, #1
 8000c74:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 8000c78:	ea32 0301 	bics.w	r3, r2, r1
 8000c7c:	d16c      	bne.n	8000d58 <HAL_GPIO_DeInit+0xf8>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7e:	2303      	movs	r3, #3
 8000c80:	fa04 f509 	lsl.w	r5, r4, r9
 8000c84:	6807      	ldr	r7, [r0, #0]
 8000c86:	fa03 f505 	lsl.w	r5, r3, r5
 8000c8a:	43ed      	mvns	r5, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c8c:	fa24 fc03 	lsr.w	ip, r4, r3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c90:	402f      	ands	r7, r5
 8000c92:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000c96:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c98:	f004 0e07 	and.w	lr, r4, #7
 8000c9c:	f8dc 8020 	ldr.w	r8, [ip, #32]
 8000ca0:	270f      	movs	r7, #15
 8000ca2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ca6:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000caa:	ea28 0e0e 	bic.w	lr, r8, lr
 8000cae:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb2:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000cb6:	ea05 0e0e 	and.w	lr, r5, lr
 8000cba:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cbe:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000cc2:	43d2      	mvns	r2, r2
 8000cc4:	ea02 0e0e 	and.w	lr, r2, lr
 8000cc8:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ccc:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8000cd0:	ea05 050e 	and.w	r5, r5, lr
 8000cd4:	60c5      	str	r5, [r0, #12]
 8000cd6:	f024 0503 	bic.w	r5, r4, #3
 8000cda:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000cde:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000ce2:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000ce6:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000ce8:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000cec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000cf0:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000cf4:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000cf6:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000cfa:	d032      	beq.n	8000d62 <HAL_GPIO_DeInit+0x102>
 8000cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d00:	4298      	cmp	r0, r3
 8000d02:	d030      	beq.n	8000d66 <HAL_GPIO_DeInit+0x106>
 8000d04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d08:	4298      	cmp	r0, r3
 8000d0a:	d02e      	beq.n	8000d6a <HAL_GPIO_DeInit+0x10a>
 8000d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d10:	4298      	cmp	r0, r3
 8000d12:	d02c      	beq.n	8000d6e <HAL_GPIO_DeInit+0x10e>
 8000d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d18:	4298      	cmp	r0, r3
 8000d1a:	d02a      	beq.n	8000d72 <HAL_GPIO_DeInit+0x112>
 8000d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d20:	4298      	cmp	r0, r3
 8000d22:	d028      	beq.n	8000d76 <HAL_GPIO_DeInit+0x116>
 8000d24:	4550      	cmp	r0, sl
 8000d26:	d028      	beq.n	8000d7a <HAL_GPIO_DeInit+0x11a>
 8000d28:	4558      	cmp	r0, fp
 8000d2a:	bf0c      	ite	eq
 8000d2c:	2307      	moveq	r3, #7
 8000d2e:	2308      	movne	r3, #8
 8000d30:	fa03 f30e 	lsl.w	r3, r3, lr
 8000d34:	459c      	cmp	ip, r3
 8000d36:	d10f      	bne.n	8000d58 <HAL_GPIO_DeInit+0xf8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000d38:	68ab      	ldr	r3, [r5, #8]
 8000d3a:	ea23 0707 	bic.w	r7, r3, r7
 8000d3e:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000d40:	6833      	ldr	r3, [r6, #0]
 8000d42:	4013      	ands	r3, r2
 8000d44:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000d46:	6873      	ldr	r3, [r6, #4]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	6073      	str	r3, [r6, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000d4c:	68b3      	ldr	r3, [r6, #8]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000d52:	68f3      	ldr	r3, [r6, #12]
 8000d54:	401a      	ands	r2, r3
 8000d56:	60f2      	str	r2, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d58:	3401      	adds	r4, #1
 8000d5a:	2c10      	cmp	r4, #16
 8000d5c:	d188      	bne.n	8000c70 <HAL_GPIO_DeInit+0x10>
      }
    }
  }
}
 8000d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000d62:	2300      	movs	r3, #0
 8000d64:	e7e4      	b.n	8000d30 <HAL_GPIO_DeInit+0xd0>
 8000d66:	464b      	mov	r3, r9
 8000d68:	e7e2      	b.n	8000d30 <HAL_GPIO_DeInit+0xd0>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	e7e0      	b.n	8000d30 <HAL_GPIO_DeInit+0xd0>
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e7de      	b.n	8000d30 <HAL_GPIO_DeInit+0xd0>
 8000d72:	2304      	movs	r3, #4
 8000d74:	e7dc      	b.n	8000d30 <HAL_GPIO_DeInit+0xd0>
 8000d76:	2305      	movs	r3, #5
 8000d78:	e7da      	b.n	8000d30 <HAL_GPIO_DeInit+0xd0>
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	e7d8      	b.n	8000d30 <HAL_GPIO_DeInit+0xd0>
 8000d7e:	bf00      	nop
 8000d80:	40013c00 	.word	0x40013c00
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40021800 	.word	0x40021800
 8000d8c:	40021c00 	.word	0x40021c00

08000d90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d90:	b10a      	cbz	r2, 8000d96 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d92:	6181      	str	r1, [r0, #24]
 8000d94:	4770      	bx	lr
 8000d96:	0409      	lsls	r1, r1, #16
 8000d98:	e7fb      	b.n	8000d92 <HAL_GPIO_WritePin+0x2>

08000d9a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000d9a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000d9e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 8000da0:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 8000da4:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8000da8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8000dac:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 8000db0:	2801      	cmp	r0, #1
 8000db2:	d021      	beq.n	8000df8 <HAL_HCD_HC_Init+0x5e>
 8000db4:	2001      	movs	r0, #1
 8000db6:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000dba:	2028      	movs	r0, #40	; 0x28
 8000dbc:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000dc0:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8000dc4:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000dc6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8000dca:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000dce:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000dd2:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8000dd6:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8000dda:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8000dde:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 8000de2:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 8000de6:	6820      	ldr	r0, [r4, #0]
 8000de8:	f002 f9c6 	bl	8003178 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 8000dec:	2300      	movs	r3, #0
 8000dee:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 8000df2:	b004      	add	sp, #16
 8000df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 8000df8:	2002      	movs	r0, #2
 8000dfa:	e7fa      	b.n	8000df2 <HAL_HCD_HC_Init+0x58>

08000dfc <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 8000dfc:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8000e00:	2b01      	cmp	r3, #1
{
 8000e02:	b510      	push	{r4, lr}
 8000e04:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 8000e06:	d009      	beq.n	8000e1c <HAL_HCD_HC_Halt+0x20>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 8000e0e:	6800      	ldr	r0, [r0, #0]
 8000e10:	f002 fb6b 	bl	80034ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 8000e1a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 8000e1c:	2002      	movs	r0, #2
}
 8000e1e:	bd10      	pop	{r4, pc}

08000e20 <HAL_HCD_Init>:
{ 
 8000e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 8000e24:	4607      	mov	r7, r0
{ 
 8000e26:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 8000e28:	b3a0      	cbz	r0, 8000e94 <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000e2a:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 8000e2c:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000e2e:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 8000e32:	f006 fe93 	bl	8007b5c <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 8000e36:	f854 0b10 	ldr.w	r0, [r4], #16
 8000e3a:	f002 f847 	bl	8002ecc <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e40:	466d      	mov	r5, sp
 8000e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e50:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000e54:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000e56:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000e5a:	6838      	ldr	r0, [r7, #0]
 8000e5c:	f001 fff6 	bl	8002e4c <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000e60:	f856 0b10 	ldr.w	r0, [r6], #16
 8000e64:	2101      	movs	r1, #1
 8000e66:	f002 f837 	bl	8002ed8 <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8000e6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e6c:	466d      	mov	r5, sp
 8000e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e78:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e7c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000e80:	6838      	ldr	r0, [r7, #0]
 8000e82:	f002 f8a5 	bl	8002fd0 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 8000e8c:	2000      	movs	r0, #0
}
 8000e8e:	b00a      	add	sp, #40	; 0x28
 8000e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000e94:	2001      	movs	r0, #1
 8000e96:	e7fa      	b.n	8000e8e <HAL_HCD_Init+0x6e>

08000e98 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8000e9a:	2628      	movs	r6, #40	; 0x28
 8000e9c:	fb06 0601 	mla	r6, r6, r1, r0
{
 8000ea0:	f89d e014 	ldrb.w	lr, [sp, #20]
 8000ea4:	9d06      	ldr	r5, [sp, #24]
 8000ea6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8000eaa:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000eae:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8000eb2:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 8000eb6:	f1be 0f00 	cmp.w	lr, #0
 8000eba:	d10e      	bne.n	8000eda <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000ebc:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8000ec0:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000ec2:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 8000ec6:	d04a      	beq.n	8000f5e <HAL_HCD_HC_SubmitRequest+0xc6>
 8000ec8:	4573      	cmp	r3, lr
 8000eca:	d055      	beq.n	8000f78 <HAL_HCD_HC_SubmitRequest+0xe0>
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d12f      	bne.n	8000f30 <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ed0:	2328      	movs	r3, #40	; 0x28
 8000ed2:	fb03 0301 	mla	r3, r3, r1, r0
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	e055      	b.n	8000f86 <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eda:	f04f 0c02 	mov.w	ip, #2
 8000ede:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d824      	bhi.n	8000f30 <HAL_HCD_HC_SubmitRequest+0x98>
 8000ee6:	a601      	add	r6, pc, #4	; (adr r6, 8000eec <HAL_HCD_HC_SubmitRequest+0x54>)
 8000ee8:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8000eec:	08000efd 	.word	0x08000efd
 8000ef0:	08000ed1 	.word	0x08000ed1
 8000ef4:	08000f5f 	.word	0x08000f5f
 8000ef8:	08000f79 	.word	0x08000f79
    if((token == 1) && (direction == 0)) /*send data */
 8000efc:	f1be 0f01 	cmp.w	lr, #1
 8000f00:	d116      	bne.n	8000f30 <HAL_HCD_HC_SubmitRequest+0x98>
 8000f02:	b9aa      	cbnz	r2, 8000f30 <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 8000f04:	b924      	cbnz	r4, 8000f10 <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 8000f06:	2328      	movs	r3, #40	; 0x28
 8000f08:	fb03 0301 	mla	r3, r3, r1, r0
 8000f0c:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 8000f10:	2328      	movs	r3, #40	; 0x28
 8000f12:	fb03 0201 	mla	r2, r3, r1, r0
 8000f16:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 8000f1a:	b9f6      	cbnz	r6, 8000f5a <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f1c:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8000f20:	fb03 0301 	mla	r3, r3, r1, r0
 8000f24:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000f28:	2a02      	cmp	r2, #2
 8000f2a:	d001      	beq.n	8000f30 <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 8000f2c:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000f30:	2628      	movs	r6, #40	; 0x28
 8000f32:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8000f36:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 8000f38:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000f3c:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000f3e:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000f40:	649c      	str	r4, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8000f42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 8000f46:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8000f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000f4c:	3138      	adds	r1, #56	; 0x38
 8000f4e:	7c02      	ldrb	r2, [r0, #16]
 8000f50:	6800      	ldr	r0, [r0, #0]
}
 8000f52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000f56:	f002 b97b 	b.w	8003250 <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f5a:	2602      	movs	r6, #2
 8000f5c:	e7de      	b.n	8000f1c <HAL_HCD_HC_SubmitRequest+0x84>
 8000f5e:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000f60:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000f64:	b992      	cbnz	r2, 8000f8c <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000f66:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000f6a:	b91e      	cbnz	r6, 8000f74 <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8000f70:	2328      	movs	r3, #40	; 0x28
 8000f72:	e7d5      	b.n	8000f20 <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f74:	2202      	movs	r2, #2
 8000f76:	e7f9      	b.n	8000f6c <HAL_HCD_HC_SubmitRequest+0xd4>
 8000f78:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000f7a:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000f7e:	b92a      	cbnz	r2, 8000f8c <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000f80:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000f84:	b936      	cbnz	r6, 8000f94 <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 8000f8a:	e7d1      	b.n	8000f30 <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8000f8c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d0f8      	beq.n	8000f86 <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f94:	2202      	movs	r2, #2
 8000f96:	e7f6      	b.n	8000f86 <HAL_HCD_HC_SubmitRequest+0xee>

08000f98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000f9c:	6806      	ldr	r6, [r0, #0]
{
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	4604      	mov	r4, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	f001 fff8 	bl	8002f98 <USB_GetMode>
 8000fa8:	2801      	cmp	r0, #1
 8000faa:	f040 80ec 	bne.w	8001186 <HAL_HCD_IRQHandler+0x1ee>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8000fae:	6820      	ldr	r0, [r4, #0]
 8000fb0:	f001 ffee 	bl	8002f90 <USB_ReadInterrupts>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	f000 80e6 	beq.w	8001186 <HAL_HCD_IRQHandler+0x1ee>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000fba:	6820      	ldr	r0, [r4, #0]
 8000fbc:	f001 ffe8 	bl	8002f90 <USB_ReadInterrupts>
 8000fc0:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000fc2:	bf48      	it	mi
 8000fc4:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000fc6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000fc8:	bf44      	itt	mi
 8000fca:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000fce:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000fd0:	f001 ffde 	bl	8002f90 <USB_ReadInterrupts>
 8000fd4:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000fd6:	bf48      	it	mi
 8000fd8:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000fda:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000fdc:	bf44      	itt	mi
 8000fde:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000fe2:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000fe4:	f001 ffd4 	bl	8002f90 <USB_ReadInterrupts>
 8000fe8:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000fea:	bf48      	it	mi
 8000fec:	6823      	ldrmi	r3, [r4, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000fee:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ff0:	bf44      	itt	mi
 8000ff2:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000ff6:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000ff8:	f001 ffca 	bl	8002f90 <USB_ReadInterrupts>
 8000ffc:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ffe:	bf48      	it	mi
 8001000:	6823      	ldrmi	r3, [r4, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001002:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001004:	bf44      	itt	mi
 8001006:	2202      	movmi	r2, #2
 8001008:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800100a:	f001 ffc1 	bl	8002f90 <USB_ReadInterrupts>
 800100e:	0085      	lsls	r5, r0, #2
 8001010:	d510      	bpl.n	8001034 <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001012:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001016:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800101a:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 800101e:	4620      	mov	r0, r4
 8001020:	f006 fdde 	bl	8007be0 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001024:	2101      	movs	r1, #1
 8001026:	6820      	ldr	r0, [r4, #0]
 8001028:	f002 f844 	bl	80030b4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001032:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001034:	6820      	ldr	r0, [r4, #0]
 8001036:	f001 ffab 	bl	8002f90 <USB_ReadInterrupts>
 800103a:	01c0      	lsls	r0, r0, #7
 800103c:	d540      	bpl.n	80010c0 <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 800103e:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001040:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001044:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8001046:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800104a:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800104c:	9b05      	ldr	r3, [sp, #20]
 800104e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001052:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001054:	9b04      	ldr	r3, [sp, #16]
 8001056:	0799      	lsls	r1, r3, #30
 8001058:	d50d      	bpl.n	8001076 <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800105a:	9b04      	ldr	r3, [sp, #16]
 800105c:	07da      	lsls	r2, r3, #31
 800105e:	d506      	bpl.n	800106e <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001060:	69ab      	ldr	r3, [r5, #24]
 8001062:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001066:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8001068:	4620      	mov	r0, r4
 800106a:	f006 fdb5 	bl	8007bd8 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800106e:	9b05      	ldr	r3, [sp, #20]
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001076:	9b04      	ldr	r3, [sp, #16]
 8001078:	071b      	lsls	r3, r3, #28
 800107a:	d517      	bpl.n	80010ac <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800107c:	9b05      	ldr	r3, [sp, #20]
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001084:	9b04      	ldr	r3, [sp, #16]
 8001086:	075f      	lsls	r7, r3, #29
 8001088:	f140 8088 	bpl.w	800119c <HAL_HCD_IRQHandler+0x204>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800108c:	69a1      	ldr	r1, [r4, #24]
 800108e:	2902      	cmp	r1, #2
 8001090:	d17c      	bne.n	800118c <HAL_HCD_IRQHandler+0x1f4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8001092:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001094:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8001096:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800109a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 800109e:	bf18      	it	ne
 80010a0:	2101      	movne	r1, #1
 80010a2:	f002 f807 	bl	80030b4 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 80010a6:	4620      	mov	r0, r4
 80010a8:	f006 fd96 	bl	8007bd8 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80010ac:	9b04      	ldr	r3, [sp, #16]
 80010ae:	0698      	lsls	r0, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80010b0:	bf42      	ittt	mi
 80010b2:	9b05      	ldrmi	r3, [sp, #20]
 80010b4:	f043 0320 	orrmi.w	r3, r3, #32
 80010b8:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80010ba:	9b05      	ldr	r3, [sp, #20]
 80010bc:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80010c0:	6820      	ldr	r0, [r4, #0]
 80010c2:	f001 ff65 	bl	8002f90 <USB_ReadInterrupts>
 80010c6:	0701      	lsls	r1, r0, #28
 80010c8:	d505      	bpl.n	80010d6 <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 80010ca:	4620      	mov	r0, r4
 80010cc:	f006 fd80 	bl	8007bd0 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	2208      	movs	r2, #8
 80010d4:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80010d6:	6820      	ldr	r0, [r4, #0]
 80010d8:	f001 ff5a 	bl	8002f90 <USB_ReadInterrupts>
 80010dc:	0182      	lsls	r2, r0, #6
 80010de:	d514      	bpl.n	800110a <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80010e0:	6820      	ldr	r0, [r4, #0]
 80010e2:	f002 f9f3 	bl	80034cc <USB_HC_ReadInterrupt>
 80010e6:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 80010ea:	9002      	str	r0, [sp, #8]
 80010ec:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80010ee:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1U << i))
 80010f2:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 80010f6:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80010f8:	f04f 0902 	mov.w	r9, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80010fc:	68a3      	ldr	r3, [r4, #8]
 80010fe:	459b      	cmp	fp, r3
 8001100:	d358      	bcc.n	80011b4 <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001108:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 800110a:	6820      	ldr	r0, [r4, #0]
 800110c:	f001 ff40 	bl	8002f90 <USB_ReadInterrupts>
 8001110:	06c3      	lsls	r3, r0, #27
 8001112:	d538      	bpl.n	8001186 <HAL_HCD_IRQHandler+0x1ee>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001114:	6825      	ldr	r5, [r4, #0]
 8001116:	69ab      	ldr	r3, [r5, #24]
 8001118:	f023 0310 	bic.w	r3, r3, #16
 800111c:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 800111e:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8001120:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8001124:	2b02      	cmp	r3, #2
 8001126:	d129      	bne.n	800117c <HAL_HCD_IRQHandler+0x1e4>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001128:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 800112c:	f1b8 0f00 	cmp.w	r8, #0
 8001130:	d024      	beq.n	800117c <HAL_HCD_IRQHandler+0x1e4>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8001132:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8001136:	2628      	movs	r6, #40	; 0x28
 8001138:	fb06 4607 	mla	r6, r6, r7, r4
 800113c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800113e:	b1e9      	cbz	r1, 800117c <HAL_HCD_IRQHandler+0x1e4>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8001140:	4642      	mov	r2, r8
 8001142:	4628      	mov	r0, r5
 8001144:	f001 ff16 	bl	8002f74 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8001148:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800114a:	4443      	add	r3, r8
 800114c:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 800114e:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001152:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001154:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001158:	4443      	add	r3, r8
 800115a:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 800115c:	692a      	ldr	r2, [r5, #16]
 800115e:	4bb7      	ldr	r3, [pc, #732]	; (800143c <HAL_HCD_IRQHandler+0x4a4>)
 8001160:	4013      	ands	r3, r2
 8001162:	b15b      	cbz	r3, 800117c <HAL_HCD_IRQHandler+0x1e4>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8001164:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001166:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800116a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 800116e:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8001170:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800117c:	6822      	ldr	r2, [r4, #0]
 800117e:	6993      	ldr	r3, [r2, #24]
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6193      	str	r3, [r2, #24]
}
 8001186:	b007      	add	sp, #28
 8001188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 800118c:	68e3      	ldr	r3, [r4, #12]
 800118e:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8001190:	bf04      	itt	eq
 8001192:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001196:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 800119a:	e784      	b.n	80010a6 <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800119c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 80011a0:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80011a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80011a6:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 80011aa:	6993      	ldr	r3, [r2, #24]
 80011ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	e77b      	b.n	80010ac <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 80011b4:	9a02      	ldr	r2, [sp, #8]
 80011b6:	fa0a f30b 	lsl.w	r3, sl, fp
 80011ba:	4213      	tst	r3, r2
 80011bc:	f000 8086 	beq.w	80012cc <HAL_HCD_IRQHandler+0x334>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 80011c0:	9b01      	ldr	r3, [sp, #4]
 80011c2:	6820      	ldr	r0, [r4, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80011ca:	fa5f f58b 	uxtb.w	r5, fp
 80011ce:	f000 810a 	beq.w	80013e6 <HAL_HCD_IRQHandler+0x44e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 80011d2:	016a      	lsls	r2, r5, #5
 80011d4:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
 80011d8:	eb02 0608 	add.w	r6, r2, r8
 80011dc:	68b1      	ldr	r1, [r6, #8]
 80011de:	074b      	lsls	r3, r1, #29
 80011e0:	d513      	bpl.n	800120a <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80011e2:	2104      	movs	r1, #4
 80011e4:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80011e6:	68f1      	ldr	r1, [r6, #12]
 80011e8:	f041 0102 	orr.w	r1, r1, #2
 80011ec:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80011ee:	68b1      	ldr	r1, [r6, #8]
 80011f0:	058b      	lsls	r3, r1, #22
 80011f2:	d53d      	bpl.n	8001270 <HAL_HCD_IRQHandler+0x2d8>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80011f4:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80011f6:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80011fe:	4629      	mov	r1, r5
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001200:	f002 f973 	bl	80034ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001208:	e12b      	b.n	8001462 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 800120a:	68b1      	ldr	r1, [r6, #8]
 800120c:	0689      	lsls	r1, r1, #26
 800120e:	d502      	bpl.n	8001216 <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001210:	2120      	movs	r1, #32
 8001212:	60b1      	str	r1, [r6, #8]
 8001214:	e7eb      	b.n	80011ee <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001216:	68b1      	ldr	r1, [r6, #8]
 8001218:	070b      	lsls	r3, r1, #28
 800121a:	d513      	bpl.n	8001244 <HAL_HCD_IRQHandler+0x2ac>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800121c:	68f1      	ldr	r1, [r6, #12]
 800121e:	9203      	str	r2, [sp, #12]
 8001220:	f041 0102 	orr.w	r1, r1, #2
 8001224:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8001226:	fb07 4105 	mla	r1, r7, r5, r4
 800122a:	f04f 0e05 	mov.w	lr, #5
 800122e:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001232:	2110      	movs	r1, #16
 8001234:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8001236:	2108      	movs	r1, #8
 8001238:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 800123a:	4629      	mov	r1, r5
 800123c:	f002 f955 	bl	80034ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001240:	9a03      	ldr	r2, [sp, #12]
 8001242:	e7d4      	b.n	80011ee <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001244:	68b1      	ldr	r1, [r6, #8]
 8001246:	0549      	lsls	r1, r1, #21
 8001248:	d5d1      	bpl.n	80011ee <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800124a:	68f1      	ldr	r1, [r6, #12]
 800124c:	9203      	str	r2, [sp, #12]
 800124e:	f041 0102 	orr.w	r1, r1, #2
 8001252:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001254:	4629      	mov	r1, r5
 8001256:	f002 f948 	bl	80034ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 800125a:	2110      	movs	r1, #16
 800125c:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800125e:	fb07 4105 	mla	r1, r7, r5, r4
 8001262:	2008      	movs	r0, #8
 8001264:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001268:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126c:	60b1      	str	r1, [r6, #8]
 800126e:	e7e7      	b.n	8001240 <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001270:	68b1      	ldr	r1, [r6, #8]
 8001272:	07c8      	lsls	r0, r1, #31
 8001274:	d540      	bpl.n	80012f8 <HAL_HCD_IRQHandler+0x360>
    if (hhcd->Init.dma_enable)
 8001276:	6921      	ldr	r1, [r4, #16]
 8001278:	b149      	cbz	r1, 800128e <HAL_HCD_IRQHandler+0x2f6>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800127a:	fb07 4e05 	mla	lr, r7, r5, r4
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800127e:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001280:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001284:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001288:	1a09      	subs	r1, r1, r0
 800128a:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 800128e:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0U;
 8001292:	2000      	movs	r0, #0
 8001294:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 8001296:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800129a:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800129e:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 80012a2:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 80012a6:	d117      	bne.n	80012d8 <HAL_HCD_IRQHandler+0x340>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80012a8:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80012aa:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80012b2:	4629      	mov	r1, r5
 80012b4:	f002 f919 	bl	80034ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80012b8:	2310      	movs	r3, #16
 80012ba:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 80012bc:	fb07 4505 	mla	r5, r7, r5, r4
 80012c0:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80012c4:	f083 0301 	eor.w	r3, r3, #1
 80012c8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 80012cc:	9b01      	ldr	r3, [sp, #4]
 80012ce:	3320      	adds	r3, #32
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012d0:	f10b 0b01 	add.w	fp, fp, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	e711      	b.n	80010fc <HAL_HCD_IRQHandler+0x164>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80012d8:	2803      	cmp	r0, #3
 80012da:	d1ef      	bne.n	80012bc <HAL_HCD_IRQHandler+0x324>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80012dc:	f852 0008 	ldr.w	r0, [r2, r8]
 80012e0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80012e4:	f842 0008 	str.w	r0, [r2, r8]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 80012e8:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80012ec:	2201      	movs	r2, #1
 80012ee:	4629      	mov	r1, r5
 80012f0:	4620      	mov	r0, r4
 80012f2:	f006 fc79 	bl	8007be8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80012f6:	e7e1      	b.n	80012bc <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80012f8:	68b1      	ldr	r1, [r6, #8]
 80012fa:	0789      	lsls	r1, r1, #30
 80012fc:	d535      	bpl.n	800136a <HAL_HCD_IRQHandler+0x3d2>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80012fe:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001300:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001304:	f021 0102 	bic.w	r1, r1, #2
 8001308:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800130a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800130e:	2901      	cmp	r1, #1
 8001310:	d10c      	bne.n	800132c <HAL_HCD_IRQHandler+0x394>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001312:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8001316:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800131a:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 800131e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001322:	4629      	mov	r1, r5
 8001324:	4620      	mov	r0, r4
 8001326:	f006 fc5f 	bl	8007be8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800132a:	e7cf      	b.n	80012cc <HAL_HCD_IRQHandler+0x334>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 800132c:	2905      	cmp	r1, #5
 800132e:	d0f0      	beq.n	8001312 <HAL_HCD_IRQHandler+0x37a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001330:	2906      	cmp	r1, #6
 8001332:	d001      	beq.n	8001338 <HAL_HCD_IRQHandler+0x3a0>
 8001334:	2908      	cmp	r1, #8
 8001336:	d1ee      	bne.n	8001316 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001338:	fb07 4105 	mla	r1, r7, r5, r4
 800133c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800133e:	2803      	cmp	r0, #3
 8001340:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8001344:	bf88      	it	hi
 8001346:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001348:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].ErrCnt = 0U;
 800134a:	bf83      	ittte	hi
 800134c:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800134e:	2004      	movhi	r0, #4
 8001350:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001354:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001358:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800135c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001360:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001364:	f842 1008 	str.w	r1, [r2, r8]
 8001368:	e7d5      	b.n	8001316 <HAL_HCD_IRQHandler+0x37e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 800136a:	68b1      	ldr	r1, [r6, #8]
 800136c:	060b      	lsls	r3, r1, #24
 800136e:	d511      	bpl.n	8001394 <HAL_HCD_IRQHandler+0x3fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001370:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001372:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	60f3      	str	r3, [r6, #12]
    hhcd->hc[chnum].ErrCnt++;
 800137a:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);     
 800137e:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt++;
 8001380:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001382:	3201      	adds	r2, #1
 8001384:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8001386:	2206      	movs	r2, #6
 8001388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 800138c:	f002 f8ad 	bl	80034ea <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	e066      	b.n	8001462 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001394:	68b1      	ldr	r1, [r6, #8]
 8001396:	06c8      	lsls	r0, r1, #27
 8001398:	d598      	bpl.n	80012cc <HAL_HCD_IRQHandler+0x334>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800139a:	fb07 4105 	mla	r1, r7, r5, r4
 800139e:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 80013a2:	2903      	cmp	r1, #3
 80013a4:	d109      	bne.n	80013ba <HAL_HCD_IRQHandler+0x422>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80013a6:	68f1      	ldr	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 80013a8:	6820      	ldr	r0, [r4, #0]
 80013aa:	9203      	str	r2, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80013ac:	f041 0102 	orr.w	r1, r1, #2
 80013b0:	60f1      	str	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 80013b2:	4629      	mov	r1, r5
 80013b4:	f002 f899 	bl	80034ea <USB_HC_Halt>
 80013b8:	9a03      	ldr	r2, [sp, #12]
    hhcd->hc[chnum].state = HC_NAK;
 80013ba:	fb07 4505 	mla	r5, r7, r5, r4
 80013be:	2103      	movs	r1, #3
 80013c0:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80013c4:	2110      	movs	r1, #16
 80013c6:	60b1      	str	r1, [r6, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80013c8:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 80013cc:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80013d0:	f47f af7c 	bne.w	80012cc <HAL_HCD_IRQHandler+0x334>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 80013d4:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80013d8:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80013dc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 80013e0:	f842 1008 	str.w	r1, [r2, r8]
 80013e4:	e772      	b.n	80012cc <HAL_HCD_IRQHandler+0x334>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 80013e6:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 80013ea:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 80013ee:	68b3      	ldr	r3, [r6, #8]
 80013f0:	0759      	lsls	r1, r3, #29
 80013f2:	d506      	bpl.n	8001402 <HAL_HCD_IRQHandler+0x46a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80013f4:	2304      	movs	r3, #4
 80013f6:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80013f8:	68f3      	ldr	r3, [r6, #12]
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	60f3      	str	r3, [r6, #12]
 8001400:	e764      	b.n	80012cc <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001402:	68b3      	ldr	r3, [r6, #8]
 8001404:	f013 0320 	ands.w	r3, r3, #32
 8001408:	d01a      	beq.n	8001440 <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800140a:	2320      	movs	r3, #32
 800140c:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 800140e:	fb07 4305 	mla	r3, r7, r5, r4
 8001412:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001416:	2a01      	cmp	r2, #1
 8001418:	f47f af58 	bne.w	80012cc <HAL_HCD_IRQHandler+0x334>
      hhcd->hc[chnum].state = HC_NYET;     
 800141c:	2204      	movs	r2, #4
 800141e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001422:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 8001424:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001426:	f042 0202 	orr.w	r2, r2, #2
 800142a:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 800142c:	4629      	mov	r1, r5
 800142e:	f002 f85c 	bl	80034ea <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001432:	9b03      	ldr	r3, [sp, #12]
 8001434:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8001438:	e748      	b.n	80012cc <HAL_HCD_IRQHandler+0x334>
 800143a:	bf00      	nop
 800143c:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8001440:	68b2      	ldr	r2, [r6, #8]
 8001442:	0652      	lsls	r2, r2, #25
 8001444:	d50f      	bpl.n	8001466 <HAL_HCD_IRQHandler+0x4ce>
    hhcd->hc[chnum].state = HC_NYET;
 8001446:	fb07 4205 	mla	r2, r7, r5, r4
 800144a:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 800144c:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800144e:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 8001450:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 800145a:	4629      	mov	r1, r5
 800145c:	f002 f845 	bl	80034ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	60b3      	str	r3, [r6, #8]
 8001464:	e732      	b.n	80012cc <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001466:	68b2      	ldr	r2, [r6, #8]
 8001468:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 800146c:	d005      	beq.n	800147a <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800146e:	68f3      	ldr	r3, [r6, #12]
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001476:	4629      	mov	r1, r5
 8001478:	e6c2      	b.n	8001200 <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 800147a:	68b3      	ldr	r3, [r6, #8]
 800147c:	07d9      	lsls	r1, r3, #31
 800147e:	d510      	bpl.n	80014a2 <HAL_HCD_IRQHandler+0x50a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001480:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001484:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001486:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001488:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 800148a:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800148c:	f042 0202 	orr.w	r2, r2, #2
 8001490:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001492:	f002 f82a 	bl	80034ea <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8001496:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001498:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800149c:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 80014a0:	e714      	b.n	80012cc <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 80014a2:	68b3      	ldr	r3, [r6, #8]
 80014a4:	071a      	lsls	r2, r3, #28
 80014a6:	d50e      	bpl.n	80014c6 <HAL_HCD_IRQHandler+0x52e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 80014a8:	2308      	movs	r3, #8
 80014aa:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80014ac:	68f3      	ldr	r3, [r6, #12]
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80014b4:	4629      	mov	r1, r5
 80014b6:	f002 f818 	bl	80034ea <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 80014ba:	fb07 4505 	mla	r5, r7, r5, r4
 80014be:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80014c0:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80014c4:	e702      	b.n	80012cc <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80014c6:	68b3      	ldr	r3, [r6, #8]
 80014c8:	06db      	lsls	r3, r3, #27
 80014ca:	d511      	bpl.n	80014f0 <HAL_HCD_IRQHandler+0x558>
    hhcd->hc[chnum].ErrCnt = 0U;  
 80014cc:	fb07 4305 	mla	r3, r7, r5, r4
 80014d0:	2200      	movs	r2, #0
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80014d4:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 80014d6:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80014d8:	f042 0202 	orr.w	r2, r2, #2
 80014dc:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80014de:	4629      	mov	r1, r5
 80014e0:	f002 f803 	bl	80034ea <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 80014e4:	9b03      	ldr	r3, [sp, #12]
 80014e6:	2203      	movs	r2, #3
 80014e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80014ec:	2310      	movs	r3, #16
 80014ee:	e7b8      	b.n	8001462 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80014f0:	68b3      	ldr	r3, [r6, #8]
 80014f2:	0619      	lsls	r1, r3, #24
 80014f4:	d50c      	bpl.n	8001510 <HAL_HCD_IRQHandler+0x578>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80014f6:	68f3      	ldr	r3, [r6, #12]
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80014fe:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001500:	fb07 4505 	mla	r5, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001504:	f001 fff1 	bl	80034ea <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001508:	2306      	movs	r3, #6
 800150a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800150e:	e73f      	b.n	8001390 <HAL_HCD_IRQHandler+0x3f8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001510:	68b1      	ldr	r1, [r6, #8]
 8001512:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8001516:	d00f      	beq.n	8001538 <HAL_HCD_IRQHandler+0x5a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001518:	68f3      	ldr	r3, [r6, #12]
 800151a:	f043 0302 	orr.w	r3, r3, #2
 800151e:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001520:	4629      	mov	r1, r5
 8001522:	f001 ffe2 	bl	80034ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001526:	2310      	movs	r3, #16
 8001528:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 800152a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152e:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001530:	fb07 4505 	mla	r5, r7, r5, r4
 8001534:	2308      	movs	r3, #8
 8001536:	e7c3      	b.n	80014c0 <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001538:	68b3      	ldr	r3, [r6, #8]
 800153a:	079a      	lsls	r2, r3, #30
 800153c:	f57f aec6 	bpl.w	80012cc <HAL_HCD_IRQHandler+0x334>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001540:	68f3      	ldr	r3, [r6, #12]
 8001542:	f023 0302 	bic.w	r3, r3, #2
 8001546:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001548:	fb07 4305 	mla	r3, r7, r5, r4
 800154c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001550:	2a01      	cmp	r2, #1
 8001552:	d10d      	bne.n	8001570 <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8001554:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8001558:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800155c:	2a02      	cmp	r2, #2
 800155e:	f47f aeda 	bne.w	8001316 <HAL_HCD_IRQHandler+0x37e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 8001562:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001566:	f082 0201 	eor.w	r2, r2, #1
 800156a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800156e:	e6d2      	b.n	8001316 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8001570:	2a03      	cmp	r2, #3
 8001572:	d102      	bne.n	800157a <HAL_HCD_IRQHandler+0x5e2>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001574:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8001578:	e6cd      	b.n	8001316 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 800157a:	2a04      	cmp	r2, #4
 800157c:	d104      	bne.n	8001588 <HAL_HCD_IRQHandler+0x5f0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800157e:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 8001582:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 8001586:	e6c6      	b.n	8001316 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001588:	2a05      	cmp	r2, #5
 800158a:	d102      	bne.n	8001592 <HAL_HCD_IRQHandler+0x5fa>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800158c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001590:	e6c1      	b.n	8001316 <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001592:	2a06      	cmp	r2, #6
 8001594:	d002      	beq.n	800159c <HAL_HCD_IRQHandler+0x604>
 8001596:	2a08      	cmp	r2, #8
 8001598:	f47f aebd 	bne.w	8001316 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 800159c:	fb07 4305 	mla	r3, r7, r5, r4
 80015a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015a2:	1c51      	adds	r1, r2, #1
 80015a4:	2a03      	cmp	r2, #3
 80015a6:	6599      	str	r1, [r3, #88]	; 0x58
 80015a8:	d9e4      	bls.n	8001574 <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].ErrCnt = 0U;
 80015aa:	2200      	movs	r2, #0
 80015ac:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80015ae:	2204      	movs	r2, #4
 80015b0:	e7ec      	b.n	800158c <HAL_HCD_IRQHandler+0x5f4>
 80015b2:	bf00      	nop

080015b4 <HAL_HCD_Start>:
{ 
 80015b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 80015b6:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80015ba:	2b01      	cmp	r3, #1
{ 
 80015bc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 80015be:	d00d      	beq.n	80015dc <HAL_HCD_Start+0x28>
 80015c0:	2501      	movs	r5, #1
 80015c2:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 80015c6:	6800      	ldr	r0, [r0, #0]
 80015c8:	f001 fc7a 	bl	8002ec0 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 80015cc:	4629      	mov	r1, r5
 80015ce:	6820      	ldr	r0, [r4, #0]
 80015d0:	f001 fda6 	bl	8003120 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 80015d4:	2000      	movs	r0, #0
 80015d6:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 80015da:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 80015dc:	2002      	movs	r0, #2
}
 80015de:	bd38      	pop	{r3, r4, r5, pc}

080015e0 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 80015e0:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80015e4:	2b01      	cmp	r3, #1
{ 
 80015e6:	b510      	push	{r4, lr}
 80015e8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 80015ea:	d009      	beq.n	8001600 <HAL_HCD_Stop+0x20>
 80015ec:	2301      	movs	r3, #1
 80015ee:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 80015f2:	6800      	ldr	r0, [r0, #0]
 80015f4:	f002 f89e 	bl	8003734 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 80015f8:	2000      	movs	r0, #0
 80015fa:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 80015fe:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 8001600:	2002      	movs	r0, #2
}
 8001602:	bd10      	pop	{r4, pc}

08001604 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001604:	6800      	ldr	r0, [r0, #0]
 8001606:	f001 bd72 	b.w	80030ee <USB_ResetPort>

0800160a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800160a:	2328      	movs	r3, #40	; 0x28
 800160c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001610:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8001614:	4770      	bx	lr

08001616 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 8001616:	2328      	movs	r3, #40	; 0x28
 8001618:	fb03 0101 	mla	r1, r3, r1, r0
}
 800161c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800161e:	4770      	bx	lr

08001620 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001620:	6800      	ldr	r0, [r0, #0]
 8001622:	f001 bda4 	b.w	800316e <USB_GetCurrentFrame>

08001626 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001626:	6800      	ldr	r0, [r0, #0]
 8001628:	f001 bd98 	b.w	800315c <USB_GetHostSpeed>

0800162c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800162c:	6802      	ldr	r2, [r0, #0]
 800162e:	6953      	ldr	r3, [r2, #20]
 8001630:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001634:	d00d      	beq.n	8001652 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001636:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800163a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800163c:	2304      	movs	r3, #4
 800163e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001640:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001646:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800164a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	4770      	bx	lr
  }
  return HAL_OK;
 8001652:	4618      	mov	r0, r3
}
 8001654:	4770      	bx	lr

08001656 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001656:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800165a:	4604      	mov	r4, r0
 800165c:	4617      	mov	r7, r2
 800165e:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001660:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001664:	b28e      	uxth	r6, r1
 8001666:	6825      	ldr	r5, [r4, #0]
 8001668:	f1b8 0f01 	cmp.w	r8, #1
 800166c:	bf0c      	ite	eq
 800166e:	696b      	ldreq	r3, [r5, #20]
 8001670:	69ab      	ldrne	r3, [r5, #24]
 8001672:	ea36 0303 	bics.w	r3, r6, r3
 8001676:	bf14      	ite	ne
 8001678:	2001      	movne	r0, #1
 800167a:	2000      	moveq	r0, #0
 800167c:	b908      	cbnz	r0, 8001682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800167e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001682:	696b      	ldr	r3, [r5, #20]
 8001684:	055a      	lsls	r2, r3, #21
 8001686:	d512      	bpl.n	80016ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001690:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001694:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001696:	2304      	movs	r3, #4
 8001698:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800169a:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800169c:	2300      	movs	r3, #0
 800169e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80016a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80016a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80016a8:	2001      	movs	r0, #1
 80016aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80016ae:	1c7b      	adds	r3, r7, #1
 80016b0:	d0d9      	beq.n	8001666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80016b2:	b94f      	cbnz	r7, 80016c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80016b4:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80016b6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80016b8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80016ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80016be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80016c2:	2003      	movs	r0, #3
 80016c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80016c8:	f7fe ff50 	bl	800056c <HAL_GetTick>
 80016cc:	eba0 0009 	sub.w	r0, r0, r9
 80016d0:	4287      	cmp	r7, r0
 80016d2:	d2c8      	bcs.n	8001666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80016d4:	e7ee      	b.n	80016b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080016d6 <I2C_WaitOnFlagUntilTimeout>:
{
 80016d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016da:	9e08      	ldr	r6, [sp, #32]
 80016dc:	4604      	mov	r4, r0
 80016de:	4690      	mov	r8, r2
 80016e0:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80016e2:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80016e6:	b28d      	uxth	r5, r1
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	f1b9 0f01 	cmp.w	r9, #1
 80016ee:	bf0c      	ite	eq
 80016f0:	695b      	ldreq	r3, [r3, #20]
 80016f2:	699b      	ldrne	r3, [r3, #24]
 80016f4:	ea35 0303 	bics.w	r3, r5, r3
 80016f8:	bf0c      	ite	eq
 80016fa:	2301      	moveq	r3, #1
 80016fc:	2300      	movne	r3, #0
 80016fe:	4543      	cmp	r3, r8
 8001700:	d002      	beq.n	8001708 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001702:	2000      	movs	r0, #0
}
 8001704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001708:	1c7b      	adds	r3, r7, #1
 800170a:	d0ed      	beq.n	80016e8 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800170c:	b95f      	cbnz	r7, 8001726 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800170e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001710:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001712:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001714:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001718:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800171c:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800171e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001726:	f7fe ff21 	bl	800056c <HAL_GetTick>
 800172a:	1b80      	subs	r0, r0, r6
 800172c:	4287      	cmp	r7, r0
 800172e:	d2db      	bcs.n	80016e8 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001730:	e7ed      	b.n	800170e <I2C_WaitOnFlagUntilTimeout+0x38>

08001732 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001732:	b570      	push	{r4, r5, r6, lr}
 8001734:	4604      	mov	r4, r0
 8001736:	460d      	mov	r5, r1
 8001738:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	061b      	lsls	r3, r3, #24
 8001740:	d501      	bpl.n	8001746 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001742:	2000      	movs	r0, #0
 8001744:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff ff70 	bl	800162c <I2C_IsAcknowledgeFailed>
 800174c:	b9a8      	cbnz	r0, 800177a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800174e:	1c6a      	adds	r2, r5, #1
 8001750:	d0f3      	beq.n	800173a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001752:	b965      	cbnz	r5, 800176e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001756:	f043 0320 	orr.w	r3, r3, #32
 800175a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800175c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800175e:	2300      	movs	r3, #0
 8001760:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001762:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001766:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800176a:	2003      	movs	r0, #3
 800176c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800176e:	f7fe fefd 	bl	800056c <HAL_GetTick>
 8001772:	1b80      	subs	r0, r0, r6
 8001774:	4285      	cmp	r5, r0
 8001776:	d2e0      	bcs.n	800173a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001778:	e7ec      	b.n	8001754 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800177a:	2001      	movs	r0, #1
}
 800177c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001780 <I2C_RequestMemoryWrite>:
{
 8001780:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001784:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001786:	6802      	ldr	r2, [r0, #0]
{
 8001788:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800178a:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800178c:	6813      	ldr	r3, [r2, #0]
 800178e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001792:	6013      	str	r3, [r2, #0]
{
 8001794:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001796:	9600      	str	r6, [sp, #0]
 8001798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800179a:	2200      	movs	r2, #0
 800179c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80017a0:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017a2:	f7ff ff98 	bl	80016d6 <I2C_WaitOnFlagUntilTimeout>
 80017a6:	b968      	cbnz	r0, 80017c4 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017a8:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80017ac:	491c      	ldr	r1, [pc, #112]	; (8001820 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ae:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80017b2:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017b4:	4620      	mov	r0, r4
 80017b6:	4633      	mov	r3, r6
 80017b8:	f7ff ff4d 	bl	8001656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017bc:	b130      	cbz	r0, 80017cc <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d018      	beq.n	80017f6 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80017c4:	2003      	movs	r0, #3
}
 80017c6:	b004      	add	sp, #16
 80017c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	9003      	str	r0, [sp, #12]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	9203      	str	r2, [sp, #12]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017d8:	4632      	mov	r2, r6
 80017da:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017dc:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff ffa7 	bl	8001732 <I2C_WaitOnTXEFlagUntilTimeout>
 80017e4:	b148      	cbz	r0, 80017fa <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d1eb      	bne.n	80017c4 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017ec:	6822      	ldr	r2, [r4, #0]
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f4:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
 80017f8:	e7e5      	b.n	80017c6 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017fa:	f1b8 0f01 	cmp.w	r8, #1
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	d102      	bne.n	8001808 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001802:	b2ed      	uxtb	r5, r5
 8001804:	611d      	str	r5, [r3, #16]
 8001806:	e7de      	b.n	80017c6 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001808:	0a2a      	lsrs	r2, r5, #8
 800180a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800180c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800180e:	4632      	mov	r2, r6
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff ff8e 	bl	8001732 <I2C_WaitOnTXEFlagUntilTimeout>
 8001816:	2800      	cmp	r0, #0
 8001818:	d1e5      	bne.n	80017e6 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	e7f1      	b.n	8001802 <I2C_RequestMemoryWrite+0x82>
 800181e:	bf00      	nop
 8001820:	00010002 	.word	0x00010002

08001824 <I2C_RequestMemoryRead>:
{
 8001824:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001828:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800182a:	6803      	ldr	r3, [r0, #0]
{
 800182c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800182e:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800183e:	601a      	str	r2, [r3, #0]
{
 8001840:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001842:	9500      	str	r5, [sp, #0]
 8001844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001846:	2200      	movs	r2, #0
 8001848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800184c:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800184e:	f7ff ff42 	bl	80016d6 <I2C_WaitOnFlagUntilTimeout>
 8001852:	b980      	cbnz	r0, 8001876 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001854:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001856:	492f      	ldr	r1, [pc, #188]	; (8001914 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001858:	b2ff      	uxtb	r7, r7
 800185a:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800185e:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001860:	4620      	mov	r0, r4
 8001862:	462b      	mov	r3, r5
 8001864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001866:	f7ff fef6 	bl	8001656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800186a:	b140      	cbz	r0, 800187e <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800186c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800186e:	2b04      	cmp	r3, #4
 8001870:	d101      	bne.n	8001876 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8001872:	2001      	movs	r0, #1
 8001874:	e000      	b.n	8001878 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001876:	2003      	movs	r0, #3
}
 8001878:	b004      	add	sp, #16
 800187a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	9003      	str	r0, [sp, #12]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	9203      	str	r2, [sp, #12]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800188a:	462a      	mov	r2, r5
 800188c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188e:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001890:	4620      	mov	r0, r4
 8001892:	f7ff ff4e 	bl	8001732 <I2C_WaitOnTXEFlagUntilTimeout>
 8001896:	b140      	cbz	r0, 80018aa <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800189a:	2b04      	cmp	r3, #4
 800189c:	d1eb      	bne.n	8001876 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800189e:	6822      	ldr	r2, [r4, #0]
 80018a0:	6813      	ldr	r3, [r2, #0]
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e7e3      	b.n	8001872 <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018aa:	f1b8 0f01 	cmp.w	r8, #1
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	d124      	bne.n	80018fc <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018b2:	b2f6      	uxtb	r6, r6
 80018b4:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b6:	462a      	mov	r2, r5
 80018b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff ff39 	bl	8001732 <I2C_WaitOnTXEFlagUntilTimeout>
 80018c0:	4602      	mov	r2, r0
 80018c2:	2800      	cmp	r0, #0
 80018c4:	d1e8      	bne.n	8001898 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80018c6:	6821      	ldr	r1, [r4, #0]
 80018c8:	680b      	ldr	r3, [r1, #0]
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018d0:	4620      	mov	r0, r4
 80018d2:	9500      	str	r5, [sp, #0]
 80018d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018da:	f7ff fefc 	bl	80016d6 <I2C_WaitOnFlagUntilTimeout>
 80018de:	2800      	cmp	r0, #0
 80018e0:	d1c9      	bne.n	8001876 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018e2:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80018e6:	490b      	ldr	r1, [pc, #44]	; (8001914 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018e8:	f047 0701 	orr.w	r7, r7, #1
 80018ec:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ee:	4620      	mov	r0, r4
 80018f0:	462b      	mov	r3, r5
 80018f2:	f7ff feb0 	bl	8001656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d1b8      	bne.n	800186c <I2C_RequestMemoryRead+0x48>
 80018fa:	e7bd      	b.n	8001878 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018fc:	0a32      	lsrs	r2, r6, #8
 80018fe:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001900:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001902:	462a      	mov	r2, r5
 8001904:	4620      	mov	r0, r4
 8001906:	f7ff ff14 	bl	8001732 <I2C_WaitOnTXEFlagUntilTimeout>
 800190a:	2800      	cmp	r0, #0
 800190c:	d1c4      	bne.n	8001898 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	e7cf      	b.n	80018b2 <I2C_RequestMemoryRead+0x8e>
 8001912:	bf00      	nop
 8001914:	00010002 	.word	0x00010002

08001918 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	4604      	mov	r4, r0
 800191c:	460d      	mov	r5, r1
 800191e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001920:	6820      	ldr	r0, [r4, #0]
 8001922:	6943      	ldr	r3, [r0, #20]
 8001924:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001928:	d001      	beq.n	800192e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800192a:	2000      	movs	r0, #0
}
 800192c:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800192e:	6942      	ldr	r2, [r0, #20]
 8001930:	06d2      	lsls	r2, r2, #27
 8001932:	d50b      	bpl.n	800194c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001934:	f06f 0210 	mvn.w	r2, #16
 8001938:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800193a:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193c:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800193e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001942:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001944:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001946:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800194a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800194c:	b95d      	cbnz	r5, 8001966 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800194e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001950:	f043 0320 	orr.w	r3, r3, #32
 8001954:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001956:	2320      	movs	r3, #32
 8001958:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800195c:	2300      	movs	r3, #0
 800195e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001962:	2003      	movs	r0, #3
 8001964:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001966:	f7fe fe01 	bl	800056c <HAL_GetTick>
 800196a:	1b80      	subs	r0, r0, r6
 800196c:	4285      	cmp	r5, r0
 800196e:	d2d7      	bcs.n	8001920 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001970:	e7ed      	b.n	800194e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001972 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001972:	b570      	push	{r4, r5, r6, lr}
 8001974:	4604      	mov	r4, r0
 8001976:	460d      	mov	r5, r1
 8001978:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	075b      	lsls	r3, r3, #29
 8001980:	d501      	bpl.n	8001986 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001982:	2000      	movs	r0, #0
 8001984:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff fe50 	bl	800162c <I2C_IsAcknowledgeFailed>
 800198c:	b9a8      	cbnz	r0, 80019ba <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800198e:	1c6a      	adds	r2, r5, #1
 8001990:	d0f3      	beq.n	800197a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001992:	b965      	cbnz	r5, 80019ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800199c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80019a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80019a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80019aa:	2003      	movs	r0, #3
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019ae:	f7fe fddd 	bl	800056c <HAL_GetTick>
 80019b2:	1b80      	subs	r0, r0, r6
 80019b4:	4285      	cmp	r5, r0
 80019b6:	d2e0      	bcs.n	800197a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80019b8:	e7ec      	b.n	8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80019ba:	2001      	movs	r0, #1
}
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080019c0 <HAL_I2C_Init>:
{
 80019c0:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 80019c2:	4604      	mov	r4, r0
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d062      	beq.n	8001a8e <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80019c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019d0:	b91b      	cbnz	r3, 80019da <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80019d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80019d6:	f005 fa3f 	bl	8006e58 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80019da:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019dc:	4e2d      	ldr	r6, [pc, #180]	; (8001a94 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80019de:	4d2e      	ldr	r5, [pc, #184]	; (8001a98 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	2324      	movs	r3, #36	; 0x24
 80019e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80019e6:	6813      	ldr	r3, [r2, #0]
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019ee:	f000 ff85 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019f2:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80019f4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80019f6:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019fa:	42b3      	cmp	r3, r6
 80019fc:	bf84      	itt	hi
 80019fe:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001a02:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001a04:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a06:	bf91      	iteee	ls
 8001a08:	1c69      	addls	r1, r5, #1
 8001a0a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001a0e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001a12:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a14:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a16:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a18:	d821      	bhi.n	8001a5e <HAL_I2C_Init+0x9e>
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a20:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	bf98      	it	ls
 8001a28:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a2a:	6a21      	ldr	r1, [r4, #32]
 8001a2c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a2e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001a34:	68e1      	ldr	r1, [r4, #12]
 8001a36:	6923      	ldr	r3, [r4, #16]
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001a3c:	69a1      	ldr	r1, [r4, #24]
 8001a3e:	6963      	ldr	r3, [r4, #20]
 8001a40:	430b      	orrs	r3, r1
 8001a42:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001a44:	6813      	ldr	r3, [r2, #0]
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a50:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a56:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a58:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a5e:	68a1      	ldr	r1, [r4, #8]
 8001a60:	b949      	cbnz	r1, 8001a76 <HAL_I2C_Init+0xb6>
 8001a62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a66:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a6a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001a6e:	b163      	cbz	r3, 8001a8a <HAL_I2C_Init+0xca>
 8001a70:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001a74:	e7d9      	b.n	8001a2a <HAL_I2C_Init+0x6a>
 8001a76:	2119      	movs	r1, #25
 8001a78:	434b      	muls	r3, r1
 8001a7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a7e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001a82:	b113      	cbz	r3, 8001a8a <HAL_I2C_Init+0xca>
 8001a84:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001a88:	e7cf      	b.n	8001a2a <HAL_I2C_Init+0x6a>
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	e7cd      	b.n	8001a2a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
}
 8001a90:	bd70      	pop	{r4, r5, r6, pc}
 8001a92:	bf00      	nop
 8001a94:	000186a0 	.word	0x000186a0
 8001a98:	000f4240 	.word	0x000f4240

08001a9c <HAL_I2C_DeInit>:
{
 8001a9c:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	b198      	cbz	r0, 8001aca <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8001aa2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa4:	2324      	movs	r3, #36	; 0x24
 8001aa6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001aaa:	6813      	ldr	r3, [r2, #0]
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001ab2:	f005 f9fb 	bl	8006eac <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8001aba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001abe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ac2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ac4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001ac8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
}
 8001acc:	bd10      	pop	{r4, pc}
	...

08001ad0 <HAL_I2C_Mem_Write>:
{
 8001ad0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	469a      	mov	sl, r3
 8001ad8:	4688      	mov	r8, r1
 8001ada:	4691      	mov	r9, r2
 8001adc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001ade:	f7fe fd45 	bl	800056c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ae2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001ae6:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001ae8:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001aea:	d003      	beq.n	8001af4 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001aec:	2002      	movs	r0, #2
}
 8001aee:	b002      	add	sp, #8
 8001af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001af4:	9000      	str	r0, [sp, #0]
 8001af6:	2319      	movs	r3, #25
 8001af8:	2201      	movs	r2, #1
 8001afa:	493e      	ldr	r1, [pc, #248]	; (8001bf4 <HAL_I2C_Mem_Write+0x124>)
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff fdea 	bl	80016d6 <I2C_WaitOnFlagUntilTimeout>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d1f2      	bne.n	8001aec <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001b06:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d0ee      	beq.n	8001aec <HAL_I2C_Mem_Write+0x1c>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001b1a:	bf5e      	ittt	pl
 8001b1c:	681a      	ldrpl	r2, [r3, #0]
 8001b1e:	f042 0201 	orrpl.w	r2, r2, #1
 8001b22:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b2a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b2c:	2321      	movs	r3, #33	; 0x21
 8001b2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b3a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3c:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8001b3e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b42:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001b44:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_I2C_Mem_Write+0x128>)
 8001b48:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001b4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b4c:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b4e:	9501      	str	r5, [sp, #4]
 8001b50:	9600      	str	r6, [sp, #0]
 8001b52:	4653      	mov	r3, sl
 8001b54:	464a      	mov	r2, r9
 8001b56:	4641      	mov	r1, r8
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff fe11 	bl	8001780 <I2C_RequestMemoryWrite>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d02a      	beq.n	8001bb8 <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001b64:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d107      	bne.n	8001b7c <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	e7be      	b.n	8001aee <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b70:	f7ff fddf 	bl	8001732 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b74:	b120      	cbz	r0, 8001b80 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d034      	beq.n	8001be6 <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	e7b6      	b.n	8001aee <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b82:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 8001b84:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b86:	1c4b      	adds	r3, r1, #1
 8001b88:	6263      	str	r3, [r4, #36]	; 0x24
 8001b8a:	780b      	ldrb	r3, [r1, #0]
 8001b8c:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001b8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b96:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001b98:	1e50      	subs	r0, r2, #1
 8001b9a:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b9c:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001b9e:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ba0:	d50a      	bpl.n	8001bb8 <HAL_I2C_Mem_Write+0xe8>
 8001ba2:	b148      	cbz	r0, 8001bb8 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ba4:	1c8b      	adds	r3, r1, #2
 8001ba6:	6263      	str	r3, [r4, #36]	; 0x24
 8001ba8:	784b      	ldrb	r3, [r1, #1]
 8001baa:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001bac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bae:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001bb0:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001bb2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001bb4:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001bb6:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001bb8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bba:	462a      	mov	r2, r5
 8001bbc:	4631      	mov	r1, r6
 8001bbe:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1d5      	bne.n	8001b70 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc4:	f7ff fed5 	bl	8001972 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d1d4      	bne.n	8001b76 <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001bcc:	6822      	ldr	r2, [r4, #0]
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001bdc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001be4:	e783      	b.n	8001aee <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	6813      	ldr	r3, [r2, #0]
 8001bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e7bc      	b.n	8001b6c <HAL_I2C_Mem_Write+0x9c>
 8001bf2:	bf00      	nop
 8001bf4:	00100002 	.word	0x00100002
 8001bf8:	ffff0000 	.word	0xffff0000

08001bfc <HAL_I2C_Mem_Read>:
{
 8001bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c00:	4604      	mov	r4, r0
 8001c02:	b086      	sub	sp, #24
 8001c04:	469a      	mov	sl, r3
 8001c06:	460d      	mov	r5, r1
 8001c08:	4691      	mov	r9, r2
 8001c0a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001c0c:	f7fe fcae 	bl	800056c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001c14:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001c16:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c18:	d004      	beq.n	8001c24 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001c1a:	2502      	movs	r5, #2
}
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	b006      	add	sp, #24
 8001c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c24:	9000      	str	r0, [sp, #0]
 8001c26:	2319      	movs	r3, #25
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4979      	ldr	r1, [pc, #484]	; (8001e10 <HAL_I2C_Mem_Read+0x214>)
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff fd52 	bl	80016d6 <I2C_WaitOnFlagUntilTimeout>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	d1f1      	bne.n	8001c1a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001c36:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d0ed      	beq.n	8001c1a <HAL_I2C_Mem_Read+0x1e>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c4a:	bf5e      	ittt	pl
 8001c4c:	681a      	ldrpl	r2, [r3, #0]
 8001c4e:	f042 0201 	orrpl.w	r2, r2, #1
 8001c52:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c5c:	2322      	movs	r3, #34	; 0x22
 8001c5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c62:	2340      	movs	r3, #64	; 0x40
 8001c64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c6a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8001c70:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001c78:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c7a:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_I2C_Mem_Read+0x218>)
 8001c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c80:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c82:	4629      	mov	r1, r5
 8001c84:	9601      	str	r6, [sp, #4]
 8001c86:	9700      	str	r7, [sp, #0]
 8001c88:	4653      	mov	r3, sl
 8001c8a:	464a      	mov	r2, r9
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff fdc9 	bl	8001824 <I2C_RequestMemoryRead>
 8001c92:	4605      	mov	r5, r0
 8001c94:	b130      	cbz	r0, 8001ca4 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001c98:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d13a      	bne.n	8001d16 <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8001ca0:	2501      	movs	r5, #1
 8001ca2:	e7bb      	b.n	8001c1c <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001ca4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	b992      	cbnz	r2, 8001cd0 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001caa:	9002      	str	r0, [sp, #8]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	9202      	str	r2, [sp, #8]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cbc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001cca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001cce:	e7a5      	b.n	8001c1c <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001cd0:	2a01      	cmp	r2, #1
 8001cd2:	d122      	bne.n	8001d1a <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cda:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cdc:	9003      	str	r0, [sp, #12]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	9203      	str	r2, [sp, #12]
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	9203      	str	r2, [sp, #12]
 8001ce6:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cee:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cf0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8001e18 <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8001cf4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0e1      	beq.n	8001cbe <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d86b      	bhi.n	8001dd6 <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d123      	bne.n	8001d4a <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001d02:	4632      	mov	r2, r6
 8001d04:	4639      	mov	r1, r7
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff fe06 	bl	8001918 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d039      	beq.n	8001d84 <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	d1c4      	bne.n	8001ca0 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8001d16:	2503      	movs	r5, #3
 8001d18:	e780      	b.n	8001c1c <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001d1a:	2a02      	cmp	r2, #2
 8001d1c:	d10e      	bne.n	8001d3c <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d24:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d2c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2e:	9004      	str	r0, [sp, #16]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	9204      	str	r2, [sp, #16]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	9304      	str	r3, [sp, #16]
 8001d38:	9b04      	ldr	r3, [sp, #16]
 8001d3a:	e7d9      	b.n	8001cf0 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3c:	9005      	str	r0, [sp, #20]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	9205      	str	r2, [sp, #20]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	9305      	str	r3, [sp, #20]
 8001d46:	9b05      	ldr	r3, [sp, #20]
 8001d48:	e7d2      	b.n	8001cf0 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8001d4a:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d4c:	9600      	str	r6, [sp, #0]
 8001d4e:	463b      	mov	r3, r7
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4641      	mov	r1, r8
 8001d56:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001d58:	d122      	bne.n	8001da0 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d5a:	f7ff fcbc 	bl	80016d6 <I2C_WaitOnFlagUntilTimeout>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d1d9      	bne.n	8001d16 <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6a:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	1c51      	adds	r1, r2, #1
 8001d72:	6261      	str	r1, [r4, #36]	; 0x24
 8001d74:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001d76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001d7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	6262      	str	r2, [r4, #36]	; 0x24
 8001d8a:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d8c:	6912      	ldr	r2, [r2, #16]
 8001d8e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d90:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d92:	3b01      	subs	r3, #1
 8001d94:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001d96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001d9e:	e7a9      	b.n	8001cf4 <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da0:	f7ff fc99 	bl	80016d6 <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4602      	mov	r2, r0
 8001da6:	2800      	cmp	r0, #0
 8001da8:	d1b5      	bne.n	8001d16 <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001db2:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001db4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	1c48      	adds	r0, r1, #1
 8001dba:	6260      	str	r0, [r4, #36]	; 0x24
 8001dbc:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001dbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dc0:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001dc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dce:	4641      	mov	r1, r8
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	e7c1      	b.n	8001d5a <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	4632      	mov	r2, r6
 8001dd8:	4639      	mov	r1, r7
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff fd9c 	bl	8001918 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d195      	bne.n	8001d10 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	6262      	str	r2, [r4, #36]	; 0x24
 8001dea:	6822      	ldr	r2, [r4, #0]
 8001dec:	6912      	ldr	r2, [r2, #16]
 8001dee:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001df0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001df2:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001df4:	3b01      	subs	r3, #1
 8001df6:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e00:	6953      	ldr	r3, [r2, #20]
 8001e02:	075b      	lsls	r3, r3, #29
 8001e04:	f57f af76 	bpl.w	8001cf4 <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	6261      	str	r1, [r4, #36]	; 0x24
 8001e0e:	e7bd      	b.n	8001d8c <HAL_I2C_Mem_Read+0x190>
 8001e10:	00100002 	.word	0x00100002
 8001e14:	ffff0000 	.word	0xffff0000
 8001e18:	00010004 	.word	0x00010004

08001e1c <HAL_I2C_GetState>:
  return hi2c->State;
 8001e1c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8001e20:	4770      	bx	lr

08001e22 <HAL_I2S_MspInit>:
 8001e22:	4770      	bx	lr

08001e24 <HAL_I2S_Transmit_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	4604      	mov	r4, r0
  uint32_t *tmp = NULL;
  uint32_t tmp1 = 0U;

  if((pData == NULL) || (Size == 0U))
 8001e28:	2900      	cmp	r1, #0
 8001e2a:	d045      	beq.n	8001eb8 <HAL_I2S_Transmit_DMA+0x94>
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_I2S_Transmit_DMA+0x94>
  {
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 8001e30:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d001      	beq.n	8001e3c <HAL_I2S_Transmit_DMA+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e38:	2002      	movs	r0, #2
 8001e3a:	bd38      	pop	{r3, r4, r5, pc}
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001e3c:	6805      	ldr	r5, [r0, #0]
    hi2s->pTxBuffPtr = pData;
 8001e3e:	6241      	str	r1, [r0, #36]	; 0x24
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001e40:	69eb      	ldr	r3, [r5, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d001      	beq.n	8001e4e <HAL_I2S_Transmit_DMA+0x2a>
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d131      	bne.n	8001eb2 <HAL_I2S_Transmit_DMA+0x8e>
      hi2s->TxXferSize  = (Size << 1U);
 8001e4e:	0053      	lsls	r3, r2, #1
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2s->TxXferCount = (Size << 1U);
 8001e54:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_LOCK(hi2s);
 8001e56:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d0ec      	beq.n	8001e38 <HAL_I2S_Transmit_DMA+0x14>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001e68:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2s->State     = HAL_I2S_STATE_BUSY_TX;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_I2S_Transmit_DMA+0x98>)
 8001e72:	6403      	str	r3, [r0, #64]	; 0x40
    hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_I2S_Transmit_DMA+0x9c>)
 8001e76:	63c3      	str	r3, [r0, #60]	; 0x3c
    hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_I2S_Transmit_DMA+0xa0>)
 8001e7a:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8001e7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e7e:	f105 020c 	add.w	r2, r5, #12
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f7fe fcbe 	bl	8000804 <HAL_DMA_Start_IT>
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	0551      	lsls	r1, r2, #21
      __HAL_I2S_ENABLE(hi2s);
 8001e8e:	bf5e      	ittt	pl
 8001e90:	69da      	ldrpl	r2, [r3, #28]
 8001e92:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8001e96:	61da      	strpl	r2, [r3, #28]
    if((hi2s->Instance->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN)
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	0792      	lsls	r2, r2, #30
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001e9c:	bf58      	it	pl
 8001e9e:	685a      	ldrpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8001ea0:	f04f 0000 	mov.w	r0, #0
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001ea4:	bf5c      	itt	pl
 8001ea6:	f042 0202 	orrpl.w	r2, r2, #2
 8001eaa:	605a      	strpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8001eac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    return HAL_OK;
 8001eb0:	bd38      	pop	{r3, r4, r5, pc}
      hi2s->TxXferSize  = Size;
 8001eb2:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2s->TxXferCount = Size;
 8001eb4:	8542      	strh	r2, [r0, #42]	; 0x2a
 8001eb6:	e7ce      	b.n	8001e56 <HAL_I2S_Transmit_DMA+0x32>
    return  HAL_ERROR;
 8001eb8:	2001      	movs	r0, #1
  }
}
 8001eba:	bd38      	pop	{r3, r4, r5, pc}
 8001ebc:	08001f75 	.word	0x08001f75
 8001ec0:	08001f7f 	.word	0x08001f7f
 8001ec4:	080021d3 	.word	0x080021d3

08001ec8 <HAL_I2S_DMAStop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001ec8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ecc:	2b01      	cmp	r3, #1
{
 8001ece:	b570      	push	{r4, r5, r6, lr}
 8001ed0:	4604      	mov	r4, r0
  __HAL_LOCK(hi2s);
 8001ed2:	d049      	beq.n	8001f68 <HAL_I2S_DMAStop+0xa0>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001eda:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	6803      	ldr	r3, [r0, #0]
 8001ee2:	d114      	bne.n	8001f0e <HAL_I2S_DMAStop+0x46>
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8001ee4:	685a      	ldr	r2, [r3, #4]

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmatx);
 8001ee6:	6b80      	ldr	r0, [r0, #56]	; 0x38
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8001ee8:	f022 0202 	bic.w	r2, r2, #2
 8001eec:	605a      	str	r2, [r3, #4]
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmarx);
 8001eee:	f7fe fcc7 	bl	8000880 <HAL_DMA_Abort>
    __HAL_I2SEXT_DISABLE(hi2s);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8001ef2:	6822      	ldr	r2, [r4, #0]
 8001ef4:	69d3      	ldr	r3, [r2, #28]
 8001ef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001efa:	041b      	lsls	r3, r3, #16
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	61d3      	str	r3, [r2, #28]

  hi2s->State = HAL_I2S_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8001f00:	2000      	movs	r0, #0
  hi2s->State = HAL_I2S_STATE_READY;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8001f08:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

  return HAL_OK;
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f0e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001f12:	2a04      	cmp	r2, #4
 8001f14:	d105      	bne.n	8001f22 <HAL_I2S_DMAStop+0x5a>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8001f16:	685a      	ldr	r2, [r3, #4]
    HAL_DMA_Abort(hi2s->hdmarx);
 8001f18:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	e7e5      	b.n	8001eee <HAL_I2S_DMAStop+0x26>
  else if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8001f22:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001f26:	2a05      	cmp	r2, #5
 8001f28:	d1e3      	bne.n	8001ef2 <HAL_I2S_DMAStop+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001f2a:	685a      	ldr	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001f2c:	4e0f      	ldr	r6, [pc, #60]	; (8001f6c <HAL_I2S_DMAStop+0xa4>)
 8001f2e:	4d10      	ldr	r5, [pc, #64]	; (8001f70 <HAL_I2S_DMAStop+0xa8>)
    HAL_DMA_Abort(hi2s->hdmatx);
 8001f30:	6b80      	ldr	r0, [r0, #56]	; 0x38
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001f32:	f022 0203 	bic.w	r2, r2, #3
 8001f36:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001f38:	42b3      	cmp	r3, r6
 8001f3a:	bf0c      	ite	eq
 8001f3c:	462b      	moveq	r3, r5
 8001f3e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	f022 0203 	bic.w	r2, r2, #3
 8001f48:	605a      	str	r2, [r3, #4]
    HAL_DMA_Abort(hi2s->hdmatx);
 8001f4a:	f7fe fc99 	bl	8000880 <HAL_DMA_Abort>
    HAL_DMA_Abort(hi2s->hdmarx);
 8001f4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001f50:	f7fe fc96 	bl	8000880 <HAL_DMA_Abort>
    __HAL_I2SEXT_DISABLE(hi2s);
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	42b3      	cmp	r3, r6
 8001f58:	bf18      	it	ne
 8001f5a:	f04f 2540 	movne.w	r5, #1073758208	; 0x40004000
 8001f5e:	69eb      	ldr	r3, [r5, #28]
 8001f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f64:	61eb      	str	r3, [r5, #28]
 8001f66:	e7c4      	b.n	8001ef2 <HAL_I2S_DMAStop+0x2a>
  __HAL_LOCK(hi2s);
 8001f68:	2002      	movs	r0, #2
}
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
 8001f6c:	40003800 	.word	0x40003800
 8001f70:	40003400 	.word	0x40003400

08001f74 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f74:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_I2S_TxHalfCpltCallback(hi2s);
 8001f76:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f78:	f005 fd10 	bl	800799c <HAL_I2S_TxHalfCpltCallback>
 8001f7c:	bd08      	pop	{r3, pc}

08001f7e <I2S_DMATxCplt>:
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001f7e:	6802      	ldr	r2, [r0, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f412 7280 	ands.w	r2, r2, #256	; 0x100
{
 8001f86:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f88:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001f8a:	d108      	bne.n	8001f9e <I2S_DMATxCplt+0x20>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	6841      	ldr	r1, [r0, #4]
 8001f90:	f021 0102 	bic.w	r1, r1, #2
 8001f94:	6041      	str	r1, [r0, #4]
    hi2s->TxXferCount = 0U;
 8001f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State       = HAL_I2S_STATE_READY;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f005 fcf2 	bl	8007988 <HAL_I2S_TxCpltCallback>
 8001fa4:	bd08      	pop	{r3, pc}
	...

08001fa8 <HAL_I2S_Init>:
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 8001faa:	4604      	mov	r4, r0
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d03f      	beq.n	8002030 <HAL_I2S_Init+0x88>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001fb0:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <HAL_I2S_Init+0x110>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001fb4:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001fb8:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8001fba:	f7ff ff32 	bl	8001e22 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001fbe:	6822      	ldr	r2, [r4, #0]
 8001fc0:	69d3      	ldr	r3, [r2, #28]
 8001fc2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001fc6:	f023 030f 	bic.w	r3, r3, #15
 8001fca:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001fcc:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001fce:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001fd0:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8001fd2:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001fd4:	d035      	beq.n	8002042 <HAL_I2S_Init+0x9a>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001fd6:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 8001fd8:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001fda:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8001fdc:	bf14      	ite	ne
 8001fde:	2620      	movne	r6, #32
 8001fe0:	2610      	moveq	r6, #16
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001fe2:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001fe4:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001fe6:	bf98      	it	ls
 8001fe8:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001fea:	f000 fd47 	bl	8002a7c <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001fee:	6923      	ldr	r3, [r4, #16]
 8001ff0:	6961      	ldr	r1, [r4, #20]
 8001ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff6:	d11f      	bne.n	8002038 <HAL_I2S_Init+0x90>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ff8:	68e3      	ldr	r3, [r4, #12]
 8001ffa:	220a      	movs	r2, #10
 8001ffc:	b1d3      	cbz	r3, 8002034 <HAL_I2S_Init+0x8c>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001ffe:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002000:	fbb0 f3f3 	udiv	r3, r0, r3
 8002004:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8002006:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8002008:	fbb3 f3f1 	udiv	r3, r3, r1
 800200c:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 800200e:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8002012:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 8002016:	0212      	lsls	r2, r2, #8
 8002018:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800201c:	1e99      	subs	r1, r3, #2
 800201e:	29fd      	cmp	r1, #253	; 0xfd
 8002020:	d911      	bls.n	8002046 <HAL_I2S_Init+0x9e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002022:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 800202a:	4620      	mov	r0, r4
 800202c:	f005 fcc6 	bl	80079bc <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8002030:	2001      	movs	r0, #1
}
 8002032:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002034:	00f3      	lsls	r3, r6, #3
 8002036:	e7e3      	b.n	8002000 <HAL_I2S_Init+0x58>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8002038:	230a      	movs	r3, #10
 800203a:	fbb0 f0f6 	udiv	r0, r0, r6
 800203e:	4343      	muls	r3, r0
 8002040:	e7e1      	b.n	8002006 <HAL_I2S_Init+0x5e>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8002042:	2200      	movs	r2, #0
 8002044:	e7ea      	b.n	800201c <HAL_I2S_Init+0x74>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002046:	4313      	orrs	r3, r2
 8002048:	6922      	ldr	r2, [r4, #16]
 800204a:	6820      	ldr	r0, [r4, #0]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800204c:	6866      	ldr	r6, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800204e:	4313      	orrs	r3, r2
 8002050:	6203      	str	r3, [r0, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002052:	68e2      	ldr	r2, [r4, #12]
 8002054:	68a3      	ldr	r3, [r4, #8]
 8002056:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8002058:	69a2      	ldr	r2, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800205a:	4313      	orrs	r3, r2
 800205c:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800205e:	f446 6100 	orr.w	r1, r6, #2048	; 0x800
 8002062:	4319      	orrs	r1, r3
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002064:	6a22      	ldr	r2, [r4, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8002066:	b289      	uxth	r1, r1
 8002068:	430d      	orrs	r5, r1
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800206a:	2a01      	cmp	r2, #1
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 800206c:	61c5      	str	r5, [r0, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800206e:	d11c      	bne.n	80020aa <HAL_I2S_Init+0x102>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_I2S_Init+0x114>)
 8002072:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002074:	4912      	ldr	r1, [pc, #72]	; (80020c0 <HAL_I2S_Init+0x118>)
 8002076:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <HAL_I2S_Init+0x11c>)
 8002078:	4288      	cmp	r0, r1
 800207a:	bf18      	it	ne
 800207c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8002080:	f436 7000 	bics.w	r0, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002084:	69d1      	ldr	r1, [r2, #28]
 8002086:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 800208a:	f021 010f 	bic.w	r1, r1, #15
 800208e:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002090:	f04f 0102 	mov.w	r1, #2
 8002094:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002096:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_TX;
 8002098:	bf0c      	ite	eq
 800209a:	f44f 7080 	moveq.w	r0, #256	; 0x100
 800209e:	2000      	movne	r0, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80020a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020a4:	4303      	orrs	r3, r0
 80020a6:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 80020a8:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020aa:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80020ac:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020ae:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80020b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 80020b4:	bd70      	pop	{r4, r5, r6, pc}
 80020b6:	bf00      	nop
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	08002205 	.word	0x08002205
 80020c0:	40003800 	.word	0x40003800
 80020c4:	40003400 	.word	0x40003400

080020c8 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80020c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80020ca:	6803      	ldr	r3, [r0, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80020d0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80020d4:	2a04      	cmp	r2, #4
{
 80020d6:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80020d8:	d13a      	bne.n	8002150 <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80020da:	9a01      	ldr	r2, [sp, #4]
 80020dc:	07d1      	lsls	r1, r2, #31
 80020de:	d519      	bpl.n	8002114 <I2S_IRQHandler+0x4c>
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	0652      	lsls	r2, r2, #25
 80020e4:	d516      	bpl.n	8002114 <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80020e8:	1c91      	adds	r1, r2, #2
 80020ea:	62c1      	str	r1, [r0, #44]	; 0x2c
 80020ec:	68d9      	ldr	r1, [r3, #12]
 80020ee:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 80020f0:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80020f2:	3a01      	subs	r2, #1
 80020f4:	b292      	uxth	r2, r2
 80020f6:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 80020f8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80020fa:	b292      	uxth	r2, r2
 80020fc:	b952      	cbnz	r2, 8002114 <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002104:	0412      	lsls	r2, r2, #16
 8002106:	0c12      	lsrs	r2, r2, #16
 8002108:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800210a:	2301      	movs	r3, #1
 800210c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002110:	f005 fc4f 	bl	80079b2 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002114:	9b01      	ldr	r3, [sp, #4]
 8002116:	0659      	lsls	r1, r3, #25
 8002118:	d51a      	bpl.n	8002150 <I2S_IRQHandler+0x88>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	0692      	lsls	r2, r2, #26
 8002120:	d516      	bpl.n	8002150 <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002128:	0412      	lsls	r2, r2, #16
 800212a:	0c12      	lsrs	r2, r2, #16
 800212c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800212e:	2200      	movs	r2, #0
 8002130:	9202      	str	r2, [sp, #8]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	9202      	str	r2, [sp, #8]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800213c:	2301      	movs	r3, #1
 800213e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8002142:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800214a:	4620      	mov	r0, r4
 800214c:	f005 fc36 	bl	80079bc <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002150:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002154:	2b03      	cmp	r3, #3
 8002156:	d13a      	bne.n	80021ce <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	079b      	lsls	r3, r3, #30
 800215c:	d51b      	bpl.n	8002196 <I2S_IRQHandler+0xce>
 800215e:	6822      	ldr	r2, [r4, #0]
 8002160:	6853      	ldr	r3, [r2, #4]
 8002162:	0618      	lsls	r0, r3, #24
 8002164:	d517      	bpl.n	8002196 <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002168:	1c99      	adds	r1, r3, #2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	6261      	str	r1, [r4, #36]	; 0x24
 800216e:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002170:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002172:	3b01      	subs	r3, #1
 8002174:	b29b      	uxth	r3, r3
 8002176:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 8002178:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	b95b      	cbnz	r3, 8002196 <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800217e:	6853      	ldr	r3, [r2, #4]
 8002180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002184:	041b      	lsls	r3, r3, #16
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800218a:	2301      	movs	r3, #1
 800218c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002190:	4620      	mov	r0, r4
 8002192:	f005 fbf9 	bl	8007988 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002196:	9b01      	ldr	r3, [sp, #4]
 8002198:	0719      	lsls	r1, r3, #28
 800219a:	d518      	bpl.n	80021ce <I2S_IRQHandler+0x106>
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	0692      	lsls	r2, r2, #26
 80021a2:	d514      	bpl.n	80021ce <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021aa:	0412      	lsls	r2, r2, #16
 80021ac:	0c12      	lsrs	r2, r2, #16
 80021ae:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80021b0:	2200      	movs	r2, #0
 80021b2:	9203      	str	r2, [sp, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	9303      	str	r3, [sp, #12]
 80021b8:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80021c8:	4620      	mov	r0, r4
 80021ca:	f005 fbf7 	bl	80079bc <HAL_I2S_ErrorCallback>
    }
  }
}
 80021ce:	b004      	add	sp, #16
 80021d0:	bd10      	pop	{r4, pc}

080021d2 <I2S_DMAError>:
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80021d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80021d4:	6802      	ldr	r2, [r0, #0]
{
 80021d6:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80021d8:	6853      	ldr	r3, [r2, #4]
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80021e4:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State= HAL_I2S_STATE_READY;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_DMA);
 80021ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 80021f4:	f005 fbe2 	bl	80079bc <HAL_I2S_ErrorCallback>
 80021f8:	bd08      	pop	{r3, pc}

080021fa <HAL_I2S_GetState>:
  return hi2s->State;
 80021fa:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80021fe:	4770      	bx	lr

08002200 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002200:	4770      	bx	lr
	...

08002204 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8002204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8002206:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002208:	4992      	ldr	r1, [pc, #584]	; (8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800220e:	4a92      	ldr	r2, [pc, #584]	; (8002458 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002210:	428b      	cmp	r3, r1
 8002212:	bf18      	it	ne
 8002214:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 8002218:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800221a:	6891      	ldr	r1, [r2, #8]
 800221c:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 800221e:	69d9      	ldr	r1, [r3, #28]
 8002220:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002224:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002228:	d004      	beq.n	8002234 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800222a:	69d9      	ldr	r1, [r3, #28]
 800222c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8002230:	f040 8097 	bne.w	8002362 <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002234:	9a00      	ldr	r2, [sp, #0]
 8002236:	0792      	lsls	r2, r2, #30
 8002238:	d51d      	bpl.n	8002276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	0610      	lsls	r0, r2, #24
 800223e:	d51a      	bpl.n	8002276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002240:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002242:	1c91      	adds	r1, r2, #2
 8002244:	8812      	ldrh	r2, [r2, #0]
 8002246:	6261      	str	r1, [r4, #36]	; 0x24
 8002248:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 800224a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800224c:	3a01      	subs	r2, #1
 800224e:	b292      	uxth	r2, r2
 8002250:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8002252:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002254:	b292      	uxth	r2, r2
 8002256:	b972      	cbnz	r2, 8002276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800225e:	0412      	lsls	r2, r2, #16
 8002260:	0c12      	lsrs	r2, r2, #16
 8002262:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8002264:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002266:	b29b      	uxth	r3, r3
 8002268:	b92b      	cbnz	r3, 8002276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800226a:	2301      	movs	r3, #1
 800226c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002270:	4620      	mov	r0, r4
 8002272:	f7ff ffc5 	bl	8002200 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002276:	9b01      	ldr	r3, [sp, #4]
 8002278:	07d9      	lsls	r1, r3, #31
 800227a:	d522      	bpl.n	80022c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 800227c:	4a75      	ldr	r2, [pc, #468]	; (8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800227e:	6821      	ldr	r1, [r4, #0]
 8002280:	4b75      	ldr	r3, [pc, #468]	; (8002458 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002282:	4291      	cmp	r1, r2
 8002284:	bf18      	it	ne
 8002286:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	0652      	lsls	r2, r2, #25
 800228e:	d518      	bpl.n	80022c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002290:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002292:	1c91      	adds	r1, r2, #2
 8002294:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002296:	68d9      	ldr	r1, [r3, #12]
 8002298:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 800229a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800229c:	3a01      	subs	r2, #1
 800229e:	b292      	uxth	r2, r2
 80022a0:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 80022a2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80022a4:	b292      	uxth	r2, r2
 80022a6:	b962      	cbnz	r2, 80022c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022ae:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 80022b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	b92b      	cbnz	r3, 80022c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022bc:	4620      	mov	r0, r4
 80022be:	f7ff ff9f 	bl	8002200 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80022c2:	9b01      	ldr	r3, [sp, #4]
 80022c4:	0658      	lsls	r0, r3, #25
 80022c6:	d524      	bpl.n	8002312 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 80022c8:	4962      	ldr	r1, [pc, #392]	; (8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	4a62      	ldr	r2, [pc, #392]	; (8002458 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80022ce:	428b      	cmp	r3, r1
 80022d0:	bf18      	it	ne
 80022d2:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80022d6:	6851      	ldr	r1, [r2, #4]
 80022d8:	0689      	lsls	r1, r1, #26
 80022da:	d51a      	bpl.n	8002312 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022dc:	6851      	ldr	r1, [r2, #4]
 80022de:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80022e2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022ea:	0412      	lsls	r2, r2, #16
 80022ec:	0c12      	lsrs	r2, r2, #16
 80022ee:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022f0:	2200      	movs	r2, #0
 80022f2:	9202      	str	r2, [sp, #8]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	9202      	str	r2, [sp, #8]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	9302      	str	r3, [sp, #8]
 80022fc:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80022fe:	2301      	movs	r3, #1
 8002300:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8002304:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800230c:	4620      	mov	r0, r4
 800230e:	f005 fb55 	bl	80079bc <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002312:	9b00      	ldr	r3, [sp, #0]
 8002314:	071b      	lsls	r3, r3, #28
 8002316:	d522      	bpl.n	800235e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	0690      	lsls	r0, r2, #26
 800231e:	d51e      	bpl.n	800235e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002320:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002322:	494c      	ldr	r1, [pc, #304]	; (8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002324:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002328:	0412      	lsls	r2, r2, #16
 800232a:	0c12      	lsrs	r2, r2, #16
 800232c:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800232e:	4a4a      	ldr	r2, [pc, #296]	; (8002458 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002330:	428b      	cmp	r3, r1
 8002332:	bf18      	it	ne
 8002334:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002338:	6851      	ldr	r1, [r2, #4]
 800233a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800233e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002340:	2200      	movs	r2, #0
 8002342:	9203      	str	r2, [sp, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	9303      	str	r3, [sp, #12]
 8002348:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 800234a:	2301      	movs	r3, #1
 800234c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8002350:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002358:	4620      	mov	r0, r4
 800235a:	f005 fb2f 	bl	80079bc <HAL_I2S_ErrorCallback>
}
 800235e:	b004      	add	sp, #16
 8002360:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002362:	9b01      	ldr	r3, [sp, #4]
 8002364:	0799      	lsls	r1, r3, #30
 8002366:	d51a      	bpl.n	800239e <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8002368:	6853      	ldr	r3, [r2, #4]
 800236a:	061b      	lsls	r3, r3, #24
 800236c:	d517      	bpl.n	800239e <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800236e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002370:	1c99      	adds	r1, r3, #2
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	6241      	str	r1, [r0, #36]	; 0x24
 8002376:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8002378:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800237a:	3b01      	subs	r3, #1
 800237c:	b29b      	uxth	r3, r3
 800237e:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 8002380:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	b95b      	cbnz	r3, 800239e <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002386:	6853      	ldr	r3, [r2, #4]
 8002388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800238c:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 800238e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002390:	b29b      	uxth	r3, r3
 8002392:	b923      	cbnz	r3, 800239e <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 8002394:	2301      	movs	r3, #1
 8002396:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800239a:	f7ff ff31 	bl	8002200 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800239e:	9b00      	ldr	r3, [sp, #0]
 80023a0:	07d8      	lsls	r0, r3, #31
 80023a2:	d51e      	bpl.n	80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	6853      	ldr	r3, [r2, #4]
 80023a8:	0659      	lsls	r1, r3, #25
 80023aa:	d51a      	bpl.n	80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80023ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023ae:	1c99      	adds	r1, r3, #2
 80023b0:	62e1      	str	r1, [r4, #44]	; 0x2c
 80023b2:	68d1      	ldr	r1, [r2, #12]
 80023b4:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 80023b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 80023be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b973      	cbnz	r3, 80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023c4:	6853      	ldr	r3, [r2, #4]
 80023c6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 80023d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	b92b      	cbnz	r3, 80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023dc:	4620      	mov	r0, r4
 80023de:	f7ff ff0f 	bl	8002200 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80023e2:	9b00      	ldr	r3, [sp, #0]
 80023e4:	065a      	lsls	r2, r3, #25
 80023e6:	d51d      	bpl.n	8002424 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	6853      	ldr	r3, [r2, #4]
 80023ec:	069b      	lsls	r3, r3, #26
 80023ee:	d519      	bpl.n	8002424 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023f0:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023f2:	4918      	ldr	r1, [pc, #96]	; (8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023f4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	0c1b      	lsrs	r3, r3, #16
 80023fc:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002400:	428a      	cmp	r2, r1
 8002402:	bf18      	it	ne
 8002404:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002408:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002410:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002412:	2301      	movs	r3, #1
 8002414:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8002418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002420:	f005 facc 	bl	80079bc <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002424:	9b01      	ldr	r3, [sp, #4]
 8002426:	0718      	lsls	r0, r3, #28
 8002428:	d599      	bpl.n	800235e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800242a:	490a      	ldr	r1, [pc, #40]	; (8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002430:	428a      	cmp	r2, r1
 8002432:	bf18      	it	ne
 8002434:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	0689      	lsls	r1, r1, #26
 800243c:	d58f      	bpl.n	800235e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8002444:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002446:	6853      	ldr	r3, [r2, #4]
 8002448:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	6053      	str	r3, [r2, #4]
 8002452:	e77a      	b.n	800234a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002454:	40003800 	.word	0x40003800
 8002458:	40003400 	.word	0x40003400

0800245c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002460:	4604      	mov	r4, r0
 8002462:	b918      	cbnz	r0, 800246c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002464:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002466:	b002      	add	sp, #8
 8002468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246c:	6803      	ldr	r3, [r0, #0]
 800246e:	07dd      	lsls	r5, r3, #31
 8002470:	d410      	bmi.n	8002494 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	0798      	lsls	r0, r3, #30
 8002476:	d458      	bmi.n	800252a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	071a      	lsls	r2, r3, #28
 800247c:	f100 809a 	bmi.w	80025b4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	075b      	lsls	r3, r3, #29
 8002484:	f100 80b8 	bmi.w	80025f8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002488:	69a2      	ldr	r2, [r4, #24]
 800248a:	2a00      	cmp	r2, #0
 800248c:	f040 8119 	bne.w	80026c2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002490:	2000      	movs	r0, #0
 8002492:	e7e8      	b.n	8002466 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002494:	4ba6      	ldr	r3, [pc, #664]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	f002 020c 	and.w	r2, r2, #12
 800249c:	2a04      	cmp	r2, #4
 800249e:	d007      	beq.n	80024b0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a6:	2a08      	cmp	r2, #8
 80024a8:	d10a      	bne.n	80024c0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	0259      	lsls	r1, r3, #9
 80024ae:	d507      	bpl.n	80024c0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	4b9f      	ldr	r3, [pc, #636]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	039a      	lsls	r2, r3, #14
 80024b6:	d5dc      	bpl.n	8002472 <HAL_RCC_OscConfig+0x16>
 80024b8:	6863      	ldr	r3, [r4, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1d9      	bne.n	8002472 <HAL_RCC_OscConfig+0x16>
 80024be:	e7d1      	b.n	8002464 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	6863      	ldr	r3, [r4, #4]
 80024c2:	4d9b      	ldr	r5, [pc, #620]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d111      	bne.n	80024ee <HAL_RCC_OscConfig+0x92>
 80024ca:	682b      	ldr	r3, [r5, #0]
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024d2:	f7fe f84b 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4d96      	ldr	r5, [pc, #600]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80024d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	682b      	ldr	r3, [r5, #0]
 80024dc:	039b      	lsls	r3, r3, #14
 80024de:	d4c8      	bmi.n	8002472 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe f844 	bl	800056c <HAL_GetTick>
 80024e4:	1b80      	subs	r0, r0, r6
 80024e6:	2864      	cmp	r0, #100	; 0x64
 80024e8:	d9f7      	bls.n	80024da <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80024ea:	2003      	movs	r0, #3
 80024ec:	e7bb      	b.n	8002466 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f2:	d104      	bne.n	80024fe <HAL_RCC_OscConfig+0xa2>
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fa:	602b      	str	r3, [r5, #0]
 80024fc:	e7e5      	b.n	80024ca <HAL_RCC_OscConfig+0x6e>
 80024fe:	682a      	ldr	r2, [r5, #0]
 8002500:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002504:	602a      	str	r2, [r5, #0]
 8002506:	682a      	ldr	r2, [r5, #0]
 8002508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800250c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1df      	bne.n	80024d2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002512:	f7fe f82b 	bl	800056c <HAL_GetTick>
 8002516:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	039f      	lsls	r7, r3, #14
 800251c:	d5a9      	bpl.n	8002472 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251e:	f7fe f825 	bl	800056c <HAL_GetTick>
 8002522:	1b80      	subs	r0, r0, r6
 8002524:	2864      	cmp	r0, #100	; 0x64
 8002526:	d9f7      	bls.n	8002518 <HAL_RCC_OscConfig+0xbc>
 8002528:	e7df      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800252a:	4b81      	ldr	r3, [pc, #516]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	f012 0f0c 	tst.w	r2, #12
 8002532:	d007      	beq.n	8002544 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253a:	2a08      	cmp	r2, #8
 800253c:	d111      	bne.n	8002562 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	025e      	lsls	r6, r3, #9
 8002542:	d40e      	bmi.n	8002562 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002544:	4b7a      	ldr	r3, [pc, #488]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	0795      	lsls	r5, r2, #30
 800254a:	d502      	bpl.n	8002552 <HAL_RCC_OscConfig+0xf6>
 800254c:	68e2      	ldr	r2, [r4, #12]
 800254e:	2a01      	cmp	r2, #1
 8002550:	d188      	bne.n	8002464 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	6921      	ldr	r1, [r4, #16]
 8002556:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800255a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800255e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002560:	e78a      	b.n	8002478 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002562:	68e2      	ldr	r2, [r4, #12]
 8002564:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_OscConfig+0x2d8>)
 8002566:	b1b2      	cbz	r2, 8002596 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800256c:	f7fd fffe 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4d6f      	ldr	r5, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002572:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	682b      	ldr	r3, [r5, #0]
 8002576:	0798      	lsls	r0, r3, #30
 8002578:	d507      	bpl.n	800258a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	682b      	ldr	r3, [r5, #0]
 800257c:	6922      	ldr	r2, [r4, #16]
 800257e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002582:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002586:	602b      	str	r3, [r5, #0]
 8002588:	e776      	b.n	8002478 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258a:	f7fd ffef 	bl	800056c <HAL_GetTick>
 800258e:	1b80      	subs	r0, r0, r6
 8002590:	2802      	cmp	r0, #2
 8002592:	d9ef      	bls.n	8002574 <HAL_RCC_OscConfig+0x118>
 8002594:	e7a9      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002596:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002598:	f7fd ffe8 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259c:	4d64      	ldr	r5, [pc, #400]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800259e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a0:	682b      	ldr	r3, [r5, #0]
 80025a2:	0799      	lsls	r1, r3, #30
 80025a4:	f57f af68 	bpl.w	8002478 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fd ffe0 	bl	800056c <HAL_GetTick>
 80025ac:	1b80      	subs	r0, r0, r6
 80025ae:	2802      	cmp	r0, #2
 80025b0:	d9f6      	bls.n	80025a0 <HAL_RCC_OscConfig+0x144>
 80025b2:	e79a      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025b4:	6962      	ldr	r2, [r4, #20]
 80025b6:	4b60      	ldr	r3, [pc, #384]	; (8002738 <HAL_RCC_OscConfig+0x2dc>)
 80025b8:	b17a      	cbz	r2, 80025da <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025be:	f7fd ffd5 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4d5b      	ldr	r5, [pc, #364]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80025c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025c8:	079f      	lsls	r7, r3, #30
 80025ca:	f53f af59 	bmi.w	8002480 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ce:	f7fd ffcd 	bl	800056c <HAL_GetTick>
 80025d2:	1b80      	subs	r0, r0, r6
 80025d4:	2802      	cmp	r0, #2
 80025d6:	d9f6      	bls.n	80025c6 <HAL_RCC_OscConfig+0x16a>
 80025d8:	e787      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80025da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025dc:	f7fd ffc6 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	4d53      	ldr	r5, [pc, #332]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80025e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025e6:	0798      	lsls	r0, r3, #30
 80025e8:	f57f af4a 	bpl.w	8002480 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fd ffbe 	bl	800056c <HAL_GetTick>
 80025f0:	1b80      	subs	r0, r0, r6
 80025f2:	2802      	cmp	r0, #2
 80025f4:	d9f6      	bls.n	80025e4 <HAL_RCC_OscConfig+0x188>
 80025f6:	e778      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f8:	4b4d      	ldr	r3, [pc, #308]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
 80025fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002600:	d128      	bne.n	8002654 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	9201      	str	r2, [sp, #4]
 8002604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002606:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002616:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	4d48      	ldr	r5, [pc, #288]	; (800273c <HAL_RCC_OscConfig+0x2e0>)
 800261a:	682b      	ldr	r3, [r5, #0]
 800261c:	05d9      	lsls	r1, r3, #23
 800261e:	d51b      	bpl.n	8002658 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002620:	68a3      	ldr	r3, [r4, #8]
 8002622:	4d43      	ldr	r5, [pc, #268]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
 8002624:	2b01      	cmp	r3, #1
 8002626:	d127      	bne.n	8002678 <HAL_RCC_OscConfig+0x21c>
 8002628:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002630:	f7fd ff9c 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4d3e      	ldr	r5, [pc, #248]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002636:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800263e:	079b      	lsls	r3, r3, #30
 8002640:	d539      	bpl.n	80026b6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002642:	2e00      	cmp	r6, #0
 8002644:	f43f af20 	beq.w	8002488 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4a39      	ldr	r2, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
 800264a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	e719      	b.n	8002488 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002654:	2600      	movs	r6, #0
 8002656:	e7df      	b.n	8002618 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002660:	f7fd ff84 	bl	800056c <HAL_GetTick>
 8002664:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	682b      	ldr	r3, [r5, #0]
 8002668:	05da      	lsls	r2, r3, #23
 800266a:	d4d9      	bmi.n	8002620 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7fd ff7e 	bl	800056c <HAL_GetTick>
 8002670:	1bc0      	subs	r0, r0, r7
 8002672:	2802      	cmp	r0, #2
 8002674:	d9f7      	bls.n	8002666 <HAL_RCC_OscConfig+0x20a>
 8002676:	e738      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	2b05      	cmp	r3, #5
 800267a:	d104      	bne.n	8002686 <HAL_RCC_OscConfig+0x22a>
 800267c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	672b      	str	r3, [r5, #112]	; 0x70
 8002684:	e7d0      	b.n	8002628 <HAL_RCC_OscConfig+0x1cc>
 8002686:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	672a      	str	r2, [r5, #112]	; 0x70
 800268e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002690:	f022 0204 	bic.w	r2, r2, #4
 8002694:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ca      	bne.n	8002630 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800269a:	f7fd ff67 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80026a2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026a6:	0798      	lsls	r0, r3, #30
 80026a8:	d5cb      	bpl.n	8002642 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fd ff5f 	bl	800056c <HAL_GetTick>
 80026ae:	1bc0      	subs	r0, r0, r7
 80026b0:	4540      	cmp	r0, r8
 80026b2:	d9f7      	bls.n	80026a4 <HAL_RCC_OscConfig+0x248>
 80026b4:	e719      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fd ff59 	bl	800056c <HAL_GetTick>
 80026ba:	1bc0      	subs	r0, r0, r7
 80026bc:	4540      	cmp	r0, r8
 80026be:	d9bd      	bls.n	800263c <HAL_RCC_OscConfig+0x1e0>
 80026c0:	e713      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c2:	4d1b      	ldr	r5, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
 80026c4:	68ab      	ldr	r3, [r5, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	f43f aeca 	beq.w	8002464 <HAL_RCC_OscConfig+0x8>
 80026d0:	4e1b      	ldr	r6, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x2e4>)
 80026d2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80026d6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d8:	d134      	bne.n	8002744 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80026da:	f7fd ff47 	bl	800056c <HAL_GetTick>
 80026de:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	0199      	lsls	r1, r3, #6
 80026e4:	d41e      	bmi.n	8002724 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026e6:	6a22      	ldr	r2, [r4, #32]
 80026e8:	69e3      	ldr	r3, [r4, #28]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026ee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80026f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80026f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	4c0d      	ldr	r4, [pc, #52]	; (8002730 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026fc:	0852      	lsrs	r2, r2, #1
 80026fe:	3a01      	subs	r2, #1
 8002700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002704:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002706:	2301      	movs	r3, #1
 8002708:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800270a:	f7fd ff2f 	bl	800056c <HAL_GetTick>
 800270e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	019a      	lsls	r2, r3, #6
 8002714:	f53f aebc 	bmi.w	8002490 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7fd ff28 	bl	800056c <HAL_GetTick>
 800271c:	1b40      	subs	r0, r0, r5
 800271e:	2802      	cmp	r0, #2
 8002720:	d9f6      	bls.n	8002710 <HAL_RCC_OscConfig+0x2b4>
 8002722:	e6e2      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7fd ff22 	bl	800056c <HAL_GetTick>
 8002728:	1bc0      	subs	r0, r0, r7
 800272a:	2802      	cmp	r0, #2
 800272c:	d9d8      	bls.n	80026e0 <HAL_RCC_OscConfig+0x284>
 800272e:	e6dc      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
 8002730:	40023800 	.word	0x40023800
 8002734:	42470000 	.word	0x42470000
 8002738:	42470e80 	.word	0x42470e80
 800273c:	40007000 	.word	0x40007000
 8002740:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002744:	f7fd ff12 	bl	800056c <HAL_GetTick>
 8002748:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	682b      	ldr	r3, [r5, #0]
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	f57f ae9f 	bpl.w	8002490 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fd ff0b 	bl	800056c <HAL_GetTick>
 8002756:	1b00      	subs	r0, r0, r4
 8002758:	2802      	cmp	r0, #2
 800275a:	d9f6      	bls.n	800274a <HAL_RCC_OscConfig+0x2ee>
 800275c:	e6c5      	b.n	80024ea <HAL_RCC_OscConfig+0x8e>
 800275e:	bf00      	nop

08002760 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002760:	4913      	ldr	r1, [pc, #76]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002762:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002764:	688b      	ldr	r3, [r1, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b04      	cmp	r3, #4
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x16>
 800276e:	2b08      	cmp	r3, #8
 8002770:	d003      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002772:	4810      	ldr	r0, [pc, #64]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002774:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002776:	4810      	ldr	r0, [pc, #64]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x58>)
 8002778:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800277a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800277c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002780:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002784:	bf14      	ite	ne
 8002786:	480c      	ldrne	r0, [pc, #48]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002788:	480a      	ldreq	r0, [pc, #40]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800278e:	bf18      	it	ne
 8002790:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002792:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002796:	fba1 0100 	umull	r0, r1, r1, r0
 800279a:	f7fd fd15 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800279e:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x50>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80027a6:	3301      	adds	r3, #1
 80027a8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80027aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80027ae:	bd08      	pop	{r3, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	00f42400 	.word	0x00f42400
 80027b8:	007a1200 	.word	0x007a1200

080027bc <HAL_RCC_ClockConfig>:
{
 80027bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80027c2:	4604      	mov	r4, r0
 80027c4:	b910      	cbnz	r0, 80027cc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80027c6:	2001      	movs	r0, #1
 80027c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b44      	ldr	r3, [pc, #272]	; (80028e0 <HAL_RCC_ClockConfig+0x124>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	f002 020f 	and.w	r2, r2, #15
 80027d4:	428a      	cmp	r2, r1
 80027d6:	d328      	bcc.n	800282a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	6821      	ldr	r1, [r4, #0]
 80027da:	078f      	lsls	r7, r1, #30
 80027dc:	d42d      	bmi.n	800283a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	07c8      	lsls	r0, r1, #31
 80027e0:	d440      	bmi.n	8002864 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e2:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <HAL_RCC_ClockConfig+0x124>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f002 020f 	and.w	r2, r2, #15
 80027ea:	4295      	cmp	r5, r2
 80027ec:	d366      	bcc.n	80028bc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ee:	6822      	ldr	r2, [r4, #0]
 80027f0:	0751      	lsls	r1, r2, #29
 80027f2:	d46c      	bmi.n	80028ce <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	0713      	lsls	r3, r2, #28
 80027f6:	d507      	bpl.n	8002808 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f8:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <HAL_RCC_ClockConfig+0x128>)
 80027fa:	6921      	ldr	r1, [r4, #16]
 80027fc:	6893      	ldr	r3, [r2, #8]
 80027fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002802:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002806:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002808:	f7ff ffaa 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <HAL_RCC_ClockConfig+0x128>)
 800280e:	4a36      	ldr	r2, [pc, #216]	; (80028e8 <HAL_RCC_ClockConfig+0x12c>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002816:	5cd3      	ldrb	r3, [r2, r3]
 8002818:	40d8      	lsrs	r0, r3
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCC_ClockConfig+0x130>)
 800281c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800281e:	2000      	movs	r0, #0
 8002820:	f7fd fe5a 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8002824:	2000      	movs	r0, #0
 8002826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	b2ca      	uxtb	r2, r1
 800282c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	4299      	cmp	r1, r3
 8002836:	d1c6      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xa>
 8002838:	e7ce      	b.n	80027d8 <HAL_RCC_ClockConfig+0x1c>
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	bf1e      	ittt	ne
 8002842:	689a      	ldrne	r2, [r3, #8]
 8002844:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002848:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	bf42      	ittt	mi
 800284e:	689a      	ldrmi	r2, [r3, #8]
 8002850:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002854:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	68a0      	ldr	r0, [r4, #8]
 800285a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800285e:	4302      	orrs	r2, r0
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	e7bc      	b.n	80027de <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002864:	6862      	ldr	r2, [r4, #4]
 8002866:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_RCC_ClockConfig+0x128>)
 8002868:	2a01      	cmp	r2, #1
 800286a:	d11d      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	d0a8      	beq.n	80027c6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002874:	4e1b      	ldr	r6, [pc, #108]	; (80028e4 <HAL_RCC_ClockConfig+0x128>)
 8002876:	68b3      	ldr	r3, [r6, #8]
 8002878:	f023 0303 	bic.w	r3, r3, #3
 800287c:	4313      	orrs	r3, r2
 800287e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002880:	f7fd fe74 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002888:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	68b3      	ldr	r3, [r6, #8]
 800288c:	6862      	ldr	r2, [r4, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002896:	d0a4      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002898:	f7fd fe68 	bl	800056c <HAL_GetTick>
 800289c:	1bc0      	subs	r0, r0, r7
 800289e:	4540      	cmp	r0, r8
 80028a0:	d9f3      	bls.n	800288a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80028a2:	2003      	movs	r0, #3
}
 80028a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a8:	1e91      	subs	r1, r2, #2
 80028aa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	d802      	bhi.n	80028b6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028b4:	e7dd      	b.n	8002872 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	f013 0f02 	tst.w	r3, #2
 80028ba:	e7da      	b.n	8002872 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028bc:	b2ea      	uxtb	r2, r5
 80028be:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	429d      	cmp	r5, r3
 80028c8:	f47f af7d 	bne.w	80027c6 <HAL_RCC_ClockConfig+0xa>
 80028cc:	e78f      	b.n	80027ee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ce:	4905      	ldr	r1, [pc, #20]	; (80028e4 <HAL_RCC_ClockConfig+0x128>)
 80028d0:	68e0      	ldr	r0, [r4, #12]
 80028d2:	688b      	ldr	r3, [r1, #8]
 80028d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80028d8:	4303      	orrs	r3, r0
 80028da:	608b      	str	r3, [r1, #8]
 80028dc:	e78a      	b.n	80027f4 <HAL_RCC_ClockConfig+0x38>
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08009360 	.word	0x08009360
 80028ec:	20000068 	.word	0x20000068

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80028f0:	4b01      	ldr	r3, [pc, #4]	; (80028f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000068 	.word	0x20000068

080028fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x14>)
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	4a03      	ldr	r2, [pc, #12]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800290a:	6810      	ldr	r0, [r2, #0]
}
 800290c:	40d8      	lsrs	r0, r3
 800290e:	4770      	bx	lr
 8002910:	40023800 	.word	0x40023800
 8002914:	08009370 	.word	0x08009370
 8002918:	20000068 	.word	0x20000068

0800291c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800291c:	6803      	ldr	r3, [r0, #0]
 800291e:	f013 0f05 	tst.w	r3, #5
{
 8002922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002924:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002926:	d105      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002928:	6828      	ldr	r0, [r5, #0]
 800292a:	f010 0002 	ands.w	r0, r0, #2
 800292e:	d128      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8002930:	b003      	add	sp, #12
 8002932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002934:	4c41      	ldr	r4, [pc, #260]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002936:	4e42      	ldr	r6, [pc, #264]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002938:	2300      	movs	r3, #0
 800293a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800293c:	f7fd fe16 	bl	800056c <HAL_GetTick>
 8002940:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002942:	6833      	ldr	r3, [r6, #0]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	d415      	bmi.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002948:	68ab      	ldr	r3, [r5, #8]
 800294a:	686a      	ldr	r2, [r5, #4]
 800294c:	071b      	lsls	r3, r3, #28
 800294e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002952:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002956:	2301      	movs	r3, #1
 8002958:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800295a:	f7fd fe07 	bl	800056c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800295e:	4c38      	ldr	r4, [pc, #224]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8002960:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	0118      	lsls	r0, r3, #4
 8002966:	d4df      	bmi.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002968:	f7fd fe00 	bl	800056c <HAL_GetTick>
 800296c:	1b80      	subs	r0, r0, r6
 800296e:	2802      	cmp	r0, #2
 8002970:	d9f7      	bls.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002972:	e004      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002974:	f7fd fdfa 	bl	800056c <HAL_GetTick>
 8002978:	1bc0      	subs	r0, r0, r7
 800297a:	2802      	cmp	r0, #2
 800297c:	d9e1      	bls.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 800297e:	2003      	movs	r0, #3
 8002980:	e7d6      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8002988:	4c2e      	ldr	r4, [pc, #184]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80029a4:	f7fd fde2 	bl	800056c <HAL_GetTick>
 80029a8:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	05d9      	lsls	r1, r3, #23
 80029ae:	d51b      	bpl.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b0:	4c23      	ldr	r4, [pc, #140]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80029b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ba:	68eb      	ldr	r3, [r5, #12]
 80029bc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80029c0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80029c6:	d134      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80029c8:	6891      	ldr	r1, [r2, #8]
 80029ca:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80029ce:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80029d2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80029d6:	4301      	orrs	r1, r0
 80029d8:	6091      	str	r1, [r2, #8]
 80029da:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80029e4:	2000      	movs	r0, #0
 80029e6:	e7a3      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7fd fdc0 	bl	800056c <HAL_GetTick>
 80029ec:	1b80      	subs	r0, r0, r6
 80029ee:	2802      	cmp	r0, #2
 80029f0:	d9db      	bls.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80029f2:	e7c4      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029f4:	68ea      	ldr	r2, [r5, #12]
 80029f6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d0dd      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a00:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002a0e:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a10:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002a12:	07da      	lsls	r2, r3, #31
 8002a14:	d5d1      	bpl.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8002a16:	f7fd fda9 	bl	800056c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002a1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002a22:	079b      	lsls	r3, r3, #30
 8002a24:	d4c9      	bmi.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fd fda1 	bl	800056c <HAL_GetTick>
 8002a2a:	1b80      	subs	r0, r0, r6
 8002a2c:	42b8      	cmp	r0, r7
 8002a2e:	d9f7      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a30:	e7a5      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a32:	6891      	ldr	r1, [r2, #8]
 8002a34:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002a38:	e7ce      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8002a3a:	bf00      	nop
 8002a3c:	42470068 	.word	0x42470068
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40007000 	.word	0x40007000
 8002a48:	42470e40 	.word	0x42470e40

08002a4c <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8002a52:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002a56:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002a5a:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a5c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002a60:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002a64:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8002a66:	6893      	ldr	r3, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8002a68:	6f12      	ldr	r2, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8002a6a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8002a6e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60c3      	str	r3, [r0, #12]
 8002a76:	4770      	bx	lr
 8002a78:	40023800 	.word	0x40023800

08002a7c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002a7c:	2801      	cmp	r0, #1
 8002a7e:	d120      	bne.n	8002ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8002a82:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002a84:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8002a88:	d004      	beq.n	8002a94 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002a8a:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002a8c:	480f      	ldr	r0, [pc, #60]	; (8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002a8e:	bf18      	it	ne
 8002a90:	2000      	movne	r0, #0
 8002a92:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a94:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002a96:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a98:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a9a:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002a9c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002aa0:	bf4c      	ite	mi
 8002aa2:	4b0b      	ldrmi	r3, [pc, #44]	; (8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002aa4:	4b0b      	ldrpl	r3, [pc, #44]	; (8002ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002aa6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002aaa:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002aae:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002ab2:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002ab6:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002ab8:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8002abc:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8002ac0:	4770      	bx	lr
  uint32_t frequency = 0U;
 8002ac2:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	00bb8000 	.word	0x00bb8000
 8002ad0:	007a1200 	.word	0x007a1200
 8002ad4:	00f42400 	.word	0x00f42400

08002ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002adc:	9e06      	ldr	r6, [sp, #24]
 8002ade:	4604      	mov	r4, r0
 8002ae0:	4688      	mov	r8, r1
 8002ae2:	4617      	mov	r7, r2
 8002ae4:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002ae6:	6822      	ldr	r2, [r4, #0]
 8002ae8:	6893      	ldr	r3, [r2, #8]
 8002aea:	ea38 0303 	bics.w	r3, r8, r3
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	429f      	cmp	r7, r3
 8002af6:	d102      	bne.n	8002afe <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002af8:	2000      	movs	r0, #0
}
 8002afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002afe:	1c6b      	adds	r3, r5, #1
 8002b00:	d0f2      	beq.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002b02:	bb55      	cbnz	r5, 8002b5a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b0c:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b0e:	6862      	ldr	r2, [r4, #4]
 8002b10:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002b14:	d10a      	bne.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002b16:	68a2      	ldr	r2, [r4, #8]
 8002b18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002b1c:	d002      	beq.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8002b1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002b22:	d103      	bne.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b2e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002b32:	d109      	bne.n	8002b48 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b3a:	0412      	lsls	r2, r2, #16
 8002b3c:	0c12      	lsrs	r2, r2, #16
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b46:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002b54:	2003      	movs	r0, #3
 8002b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002b5a:	f7fd fd07 	bl	800056c <HAL_GetTick>
 8002b5e:	1b80      	subs	r0, r0, r6
 8002b60:	4285      	cmp	r5, r0
 8002b62:	d8c0      	bhi.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0xe>
 8002b64:	e7ce      	b.n	8002b04 <SPI_WaitFlagStateUntilTimeout+0x2c>

08002b66 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b66:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b68:	460b      	mov	r3, r1
 8002b6a:	9200      	str	r2, [sp, #0]
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	2200      	movs	r2, #0
{
 8002b70:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b72:	f7ff ffb1 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002b76:	b120      	cbz	r0, 8002b82 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b7a:	f043 0320 	orr.w	r3, r3, #32
 8002b7e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b80:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8002b82:	b002      	add	sp, #8
 8002b84:	bd10      	pop	{r4, pc}

08002b86 <HAL_SPI_Init>:
{
 8002b86:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8002b88:	4604      	mov	r4, r0
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	d036      	beq.n	8002bfc <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8002b92:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002b96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b9a:	b91b      	cbnz	r3, 8002ba4 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002b9c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002ba0:	f004 faca 	bl	8007138 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002ba4:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ba6:	68a0      	ldr	r0, [r4, #8]
 8002ba8:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002baa:	2302      	movs	r3, #2
 8002bac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002bb0:	680b      	ldr	r3, [r1, #0]
 8002bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002bb8:	6863      	ldr	r3, [r4, #4]
 8002bba:	4303      	orrs	r3, r0
 8002bbc:	68e0      	ldr	r0, [r4, #12]
 8002bbe:	4303      	orrs	r3, r0
 8002bc0:	6920      	ldr	r0, [r4, #16]
 8002bc2:	4303      	orrs	r3, r0
 8002bc4:	6960      	ldr	r0, [r4, #20]
 8002bc6:	4303      	orrs	r3, r0
 8002bc8:	69e0      	ldr	r0, [r4, #28]
 8002bca:	4303      	orrs	r3, r0
 8002bcc:	6a20      	ldr	r0, [r4, #32]
 8002bce:	4303      	orrs	r3, r0
 8002bd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002bd2:	4303      	orrs	r3, r0
 8002bd4:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002bd8:	4303      	orrs	r3, r0
 8002bda:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bdc:	0c12      	lsrs	r2, r2, #16
 8002bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002be0:	f002 0204 	and.w	r2, r2, #4
 8002be4:	431a      	orrs	r2, r3
 8002be6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002be8:	69cb      	ldr	r3, [r1, #28]
 8002bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bee:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bf0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002bf2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bf4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bf6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8002bfa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002bfc:	2001      	movs	r0, #1
}
 8002bfe:	bd10      	pop	{r4, pc}

08002c00 <HAL_SPI_Transmit>:
{
 8002c00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002c04:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002c06:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002c0a:	2b01      	cmp	r3, #1
{
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	460d      	mov	r5, r1
 8002c10:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002c12:	f000 809c 	beq.w	8002d4e <HAL_SPI_Transmit+0x14e>
 8002c16:	2301      	movs	r3, #1
 8002c18:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002c1c:	f7fd fca6 	bl	800056c <HAL_GetTick>
 8002c20:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002c22:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002c26:	b2c0      	uxtb	r0, r0
 8002c28:	2801      	cmp	r0, #1
 8002c2a:	f040 808e 	bne.w	8002d4a <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8002c2e:	2d00      	cmp	r5, #0
 8002c30:	d04e      	beq.n	8002cd0 <HAL_SPI_Transmit+0xd0>
 8002c32:	f1b8 0f00 	cmp.w	r8, #0
 8002c36:	d04b      	beq.n	8002cd0 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c42:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c44:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002c48:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c4c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c4e:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c50:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c52:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c58:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8002c5a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002c5e:	bf02      	ittt	eq
 8002c60:	681a      	ldreq	r2, [r3, #0]
 8002c62:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8002c66:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002c6c:	bf5e      	ittt	pl
 8002c6e:	681a      	ldrpl	r2, [r3, #0]
 8002c70:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002c74:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c76:	68e2      	ldr	r2, [r4, #12]
 8002c78:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002c7c:	6862      	ldr	r2, [r4, #4]
 8002c7e:	d138      	bne.n	8002cf2 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002c80:	b11a      	cbz	r2, 8002c8a <HAL_SPI_Transmit+0x8a>
 8002c82:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002c84:	b292      	uxth	r2, r2
 8002c86:	2a01      	cmp	r2, #1
 8002c88:	d106      	bne.n	8002c98 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002c8a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002c8e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8002c90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002c98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b993      	cbnz	r3, 8002cc4 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002c9e:	9700      	str	r7, [sp, #0]
 8002ca0:	4633      	mov	r3, r6
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f7ff ff16 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002cac:	b978      	cbnz	r0, 8002cce <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002cae:	463a      	mov	r2, r7
 8002cb0:	4631      	mov	r1, r6
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f7ff ff57 	bl	8002b66 <SPI_CheckFlag_BSY>
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d038      	beq.n	8002d2e <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002cc0:	2001      	movs	r0, #1
    goto error;
 8002cc2:	e005      	b.n	8002cd0 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	0790      	lsls	r0, r2, #30
 8002cca:	d4de      	bmi.n	8002c8a <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002ccc:	b94e      	cbnz	r6, 8002ce2 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8002cce:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002cdc:	b004      	add	sp, #16
 8002cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002ce2:	1c71      	adds	r1, r6, #1
 8002ce4:	d0d8      	beq.n	8002c98 <HAL_SPI_Transmit+0x98>
 8002ce6:	f7fd fc41 	bl	800056c <HAL_GetTick>
 8002cea:	1bc0      	subs	r0, r0, r7
 8002cec:	4286      	cmp	r6, r0
 8002cee:	d8d3      	bhi.n	8002c98 <HAL_SPI_Transmit+0x98>
 8002cf0:	e7ed      	b.n	8002cce <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002cf2:	b11a      	cbz	r2, 8002cfc <HAL_SPI_Transmit+0xfc>
 8002cf4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	2a01      	cmp	r2, #1
 8002cfa:	d106      	bne.n	8002d0a <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002cfc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002d00:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002d02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002d0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0c5      	beq.n	8002c9e <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	0792      	lsls	r2, r2, #30
 8002d18:	d4f0      	bmi.n	8002cfc <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002d1a:	2e00      	cmp	r6, #0
 8002d1c:	d0d7      	beq.n	8002cce <HAL_SPI_Transmit+0xce>
 8002d1e:	1c73      	adds	r3, r6, #1
 8002d20:	d0f3      	beq.n	8002d0a <HAL_SPI_Transmit+0x10a>
 8002d22:	f7fd fc23 	bl	800056c <HAL_GetTick>
 8002d26:	1bc0      	subs	r0, r0, r7
 8002d28:	4286      	cmp	r6, r0
 8002d2a:	d8ee      	bhi.n	8002d0a <HAL_SPI_Transmit+0x10a>
 8002d2c:	e7cf      	b.n	8002cce <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2e:	68a3      	ldr	r3, [r4, #8]
 8002d30:	b933      	cbnz	r3, 8002d40 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d32:	9303      	str	r3, [sp, #12]
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	9203      	str	r2, [sp, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	9303      	str	r3, [sp, #12]
 8002d3e:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d40:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002d42:	3000      	adds	r0, #0
 8002d44:	bf18      	it	ne
 8002d46:	2001      	movne	r0, #1
 8002d48:	e7c2      	b.n	8002cd0 <HAL_SPI_Transmit+0xd0>
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	e7c0      	b.n	8002cd0 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8002d4e:	2002      	movs	r0, #2
 8002d50:	e7c4      	b.n	8002cdc <HAL_SPI_Transmit+0xdc>

08002d52 <HAL_SPI_ErrorCallback>:
 8002d52:	4770      	bx	lr

08002d54 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8002d54:	6803      	ldr	r3, [r0, #0]
{
 8002d56:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8002d58:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002d5a:	689a      	ldr	r2, [r3, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002d5c:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8002d60:	2d01      	cmp	r5, #1
{
 8002d62:	b085      	sub	sp, #20
 8002d64:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002d66:	d105      	bne.n	8002d74 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002d68:	064d      	lsls	r5, r1, #25
 8002d6a:	d503      	bpl.n	8002d74 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8002d6c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 8002d6e:	4798      	blx	r3
}
 8002d70:	b005      	add	sp, #20
 8002d72:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002d74:	0795      	lsls	r5, r2, #30
 8002d76:	d504      	bpl.n	8002d82 <HAL_SPI_IRQHandler+0x2e>
 8002d78:	0608      	lsls	r0, r1, #24
 8002d7a:	d502      	bpl.n	8002d82 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8002d7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d7e:	4620      	mov	r0, r4
 8002d80:	e7f5      	b.n	8002d6e <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8002d82:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8002d86:	d0f3      	beq.n	8002d70 <HAL_SPI_IRQHandler+0x1c>
 8002d88:	068d      	lsls	r5, r1, #26
 8002d8a:	d5f1      	bpl.n	8002d70 <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002d8c:	0650      	lsls	r0, r2, #25
 8002d8e:	d50f      	bpl.n	8002db0 <HAL_SPI_IRQHandler+0x5c>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d90:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002d94:	2803      	cmp	r0, #3
 8002d96:	f04f 0500 	mov.w	r5, #0
 8002d9a:	d041      	beq.n	8002e20 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d9e:	f040 0004 	orr.w	r0, r0, #4
 8002da2:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da4:	9500      	str	r5, [sp, #0]
 8002da6:	68d8      	ldr	r0, [r3, #12]
 8002da8:	9000      	str	r0, [sp, #0]
 8002daa:	6898      	ldr	r0, [r3, #8]
 8002dac:	9000      	str	r0, [sp, #0]
 8002dae:	9800      	ldr	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8002db0:	0695      	lsls	r5, r2, #26
 8002db2:	d50c      	bpl.n	8002dce <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002db4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002db6:	f040 0001 	orr.w	r0, r0, #1
 8002dba:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	9002      	str	r0, [sp, #8]
 8002dc0:	6898      	ldr	r0, [r3, #8]
 8002dc2:	9002      	str	r0, [sp, #8]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002dca:	6018      	str	r0, [r3, #0]
 8002dcc:	9802      	ldr	r0, [sp, #8]
    if((itflag & SPI_FLAG_FRE) != RESET)
 8002dce:	05d0      	lsls	r0, r2, #23
 8002dd0:	d508      	bpl.n	8002de4 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002dd2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002dd4:	f042 0208 	orr.w	r2, r2, #8
 8002dd8:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	9203      	str	r2, [sp, #12]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	9203      	str	r2, [sp, #12]
 8002de2:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002de4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002de6:	2a00      	cmp	r2, #0
 8002de8:	d0c2      	beq.n	8002d70 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002df0:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002df2:	2201      	movs	r2, #1
 8002df4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002df8:	078a      	lsls	r2, r1, #30
 8002dfa:	d018      	beq.n	8002e2e <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002dfc:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8002dfe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e00:	f022 0203 	bic.w	r2, r2, #3
 8002e04:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8002e06:	b118      	cbz	r0, 8002e10 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_SPI_IRQHandler+0xe4>)
 8002e0a:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002e0c:	f7fd fd7b 	bl	8000906 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8002e10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d0ac      	beq.n	8002d70 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_SPI_IRQHandler+0xe4>)
 8002e18:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002e1a:	f7fd fd74 	bl	8000906 <HAL_DMA_Abort_IT>
 8002e1e:	e7a7      	b.n	8002d70 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e20:	9501      	str	r5, [sp, #4]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	9201      	str	r2, [sp, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	9b01      	ldr	r3, [sp, #4]
        return;
 8002e2c:	e7a0      	b.n	8002d70 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f7ff ff8f 	bl	8002d52 <HAL_SPI_ErrorCallback>
 8002e34:	e79c      	b.n	8002d70 <HAL_SPI_IRQHandler+0x1c>
 8002e36:	bf00      	nop
 8002e38:	08002e3d 	.word	0x08002e3d

08002e3c <SPI_DMAAbortOnError>:
{
 8002e3c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e3e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002e44:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8002e46:	f7ff ff84 	bl	8002d52 <HAL_SPI_ErrorCallback>
 8002e4a:	bd08      	pop	{r3, pc}

08002e4c <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	b538      	push	{r3, r4, r5, lr}
 8002e50:	ad05      	add	r5, sp, #20
 8002e52:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e58:	2b01      	cmp	r3, #1
{
 8002e5a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e5c:	d126      	bne.n	8002eac <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e64:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e66:	68c3      	ldr	r3, [r0, #12]
 8002e68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e70:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e72:	68c3      	ldr	r3, [r0, #12]
 8002e74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e78:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e7c:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e7e:	bf02      	ittt	eq
 8002e80:	68c3      	ldreq	r3, [r0, #12]
 8002e82:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002e86:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002e88:	f000 f88a 	bl	8002fa0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8002e8c:	9b08      	ldr	r3, [sp, #32]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e92:	68a3      	ldr	r3, [r4, #8]
 8002e94:	f043 0306 	orr.w	r3, r3, #6
 8002e98:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e9a:	68a3      	ldr	r3, [r4, #8]
 8002e9c:	f043 0320 	orr.w	r3, r3, #32
 8002ea0:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	b004      	add	sp, #16
 8002eaa:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002eac:	68c3      	ldr	r3, [r0, #12]
 8002eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb2:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002eb4:	f000 f874 	bl	8002fa0 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ebc:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ebe:	e7e5      	b.n	8002e8c <USB_CoreInit+0x40>

08002ec0 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ec0:	6883      	ldr	r3, [r0, #8]
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002ec8:	2000      	movs	r0, #0
 8002eca:	4770      	bx	lr

08002ecc <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ecc:	6883      	ldr	r3, [r0, #8]
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	4770      	bx	lr

08002ed8 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002ed8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002eda:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002edc:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002ede:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002ee2:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8002ee4:	d108      	bne.n	8002ef8 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002ee6:	68c3      	ldr	r3, [r0, #12]
 8002ee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002eec:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8002eee:	2032      	movs	r0, #50	; 0x32
 8002ef0:	f7fd fb42 	bl	8000578 <HAL_Delay>
  
  return HAL_OK;
}
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002ef8:	2900      	cmp	r1, #0
 8002efa:	d1f8      	bne.n	8002eee <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002efc:	68c3      	ldr	r3, [r0, #12]
 8002efe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f02:	60c3      	str	r3, [r0, #12]
 8002f04:	e7f3      	b.n	8002eee <USB_SetCurrentMode+0x16>
	...

08002f08 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002f08:	0189      	lsls	r1, r1, #6
 8002f0a:	f041 0120 	orr.w	r1, r1, #32
 8002f0e:	4a06      	ldr	r2, [pc, #24]	; (8002f28 <USB_FlushTxFifo+0x20>)
 8002f10:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002f12:	3a01      	subs	r2, #1
 8002f14:	d005      	beq.n	8002f22 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f16:	6903      	ldr	r3, [r0, #16]
 8002f18:	f013 0320 	ands.w	r3, r3, #32
 8002f1c:	d1f9      	bne.n	8002f12 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8002f1e:	4618      	mov	r0, r3
 8002f20:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f22:	2003      	movs	r0, #3
}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	00030d41 	.word	0x00030d41

08002f2c <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <USB_FlushRxFifo+0x1c>)
 8002f30:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002f32:	3a01      	subs	r2, #1
 8002f34:	d005      	beq.n	8002f42 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f36:	6903      	ldr	r3, [r0, #16]
 8002f38:	f013 0310 	ands.w	r3, r3, #16
 8002f3c:	d1f9      	bne.n	8002f32 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002f3e:	4618      	mov	r0, r3
 8002f40:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f42:	2003      	movs	r0, #3
}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	00030d41 	.word	0x00030d41

08002f4c <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8002f52:	b94c      	cbnz	r4, 8002f68 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8002f54:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002f56:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8002f62:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8002f64:	4299      	cmp	r1, r3
 8002f66:	d101      	bne.n	8002f6c <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8002f68:	2000      	movs	r0, #0
 8002f6a:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002f6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002f70:	6010      	str	r0, [r2, #0]
 8002f72:	e7f7      	b.n	8002f64 <USB_WritePacket+0x18>

08002f74 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8002f74:	3203      	adds	r2, #3
 8002f76:	f022 0203 	bic.w	r2, r2, #3
 8002f7a:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002f7c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8002f80:	4291      	cmp	r1, r2
 8002f82:	d101      	bne.n	8002f88 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8002f84:	4608      	mov	r0, r1
 8002f86:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002f88:	6803      	ldr	r3, [r0, #0]
 8002f8a:	f841 3b04 	str.w	r3, [r1], #4
 8002f8e:	e7f7      	b.n	8002f80 <USB_ReadPacket+0xc>

08002f90 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8002f90:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8002f92:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8002f94:	4010      	ands	r0, r2
 8002f96:	4770      	bx	lr

08002f98 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8002f98:	6940      	ldr	r0, [r0, #20]
}
 8002f9a:	f000 0001 	and.w	r0, r0, #1
 8002f9e:	4770      	bx	lr

08002fa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	d101      	bne.n	8002faa <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002fa6:	2003      	movs	r0, #3
 8002fa8:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002faa:	6902      	ldr	r2, [r0, #16]
 8002fac:	2a00      	cmp	r2, #0
 8002fae:	daf8      	bge.n	8002fa2 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002fb0:	6903      	ldr	r3, [r0, #16]
 8002fb2:	4a06      	ldr	r2, [pc, #24]	; (8002fcc <USB_CoreReset+0x2c>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	d0f3      	beq.n	8002fa6 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002fbe:	6903      	ldr	r3, [r0, #16]
 8002fc0:	f013 0301 	ands.w	r3, r3, #1
 8002fc4:	d1f9      	bne.n	8002fba <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8002fc6:	4618      	mov	r0, r3
}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	00030d41 	.word	0x00030d41

08002fd0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	b538      	push	{r3, r4, r5, lr}
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	a805      	add	r0, sp, #20
 8002fd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8002fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe8:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 8002fea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ff0:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff8:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8002ffa:	9b07      	ldr	r3, [sp, #28]
 8002ffc:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8002ffe:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8003002:	d13c      	bne.n	800307e <USB_HostInit+0xae>
 8003004:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8003008:	d039      	beq.n	800307e <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003012:	2110      	movs	r1, #16
 8003014:	4620      	mov	r0, r4
 8003016:	f7ff ff77 	bl	8002f08 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800301a:	4620      	mov	r0, r4
 800301c:	f7ff ff86 	bl	8002f2c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003020:	2300      	movs	r3, #0
 8003022:	9906      	ldr	r1, [sp, #24]
 8003024:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 800302c:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 800302e:	428b      	cmp	r3, r1
 8003030:	d12a      	bne.n	8003088 <USB_HostInit+0xb8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8003032:	2101      	movs	r1, #1
 8003034:	4620      	mov	r0, r4
 8003036:	f000 f873 	bl	8003120 <USB_DriveVbus>
  
  HAL_Delay(200U);
 800303a:	20c8      	movs	r0, #200	; 0xc8
 800303c:	f7fd fa9c 	bl	8000578 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 8003044:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 800304e:	d120      	bne.n	8003092 <USB_HostInit+0xc2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8003054:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003058:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <USB_HostInit+0xd8>)
 800305c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003060:	9b08      	ldr	r3, [sp, #32]
 8003062:	b91b      	cbnz	r3, 800306c <USB_HostInit+0x9c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003064:	69a3      	ldr	r3, [r4, #24]
 8003066:	f043 0310 	orr.w	r3, r3, #16
 800306a:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 800306c:	69a2      	ldr	r2, [r4, #24]
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <USB_HostInit+0xdc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8003074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003078:	2000      	movs	r0, #0
 800307a:	b004      	add	sp, #16
 800307c:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8003086:	e7c4      	b.n	8003012 <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003088:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 800308a:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 800308c:	60d5      	str	r5, [r2, #12]
 800308e:	3220      	adds	r2, #32
 8003090:	e7cd      	b.n	800302e <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 8003092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003096:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8003098:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800309c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <USB_HostInit+0xe0>)
 80030a0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030a4:	e7dc      	b.n	8003060 <USB_HostInit+0x90>
 80030a6:	bf00      	nop
 80030a8:	004000e0 	.word	0x004000e0
 80030ac:	a3200008 	.word	0xa3200008
 80030b0:	00e00300 	.word	0x00e00300

080030b4 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80030b4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80030b8:	f023 0303 	bic.w	r3, r3, #3
{
 80030bc:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80030be:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80030c2:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80030c6:	f001 0303 	and.w	r3, r1, #3
 80030ca:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 80030cc:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80030ce:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80030d2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 80030d6:	d104      	bne.n	80030e2 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80030d8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80030dc:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 80030de:	2000      	movs	r0, #0
 80030e0:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 80030e2:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 80030e4:	bf04      	itt	eq
 80030e6:	f241 7370 	movweq	r3, #6000	; 0x1770
 80030ea:	6053      	streq	r3, [r2, #4]
 80030ec:	e7f7      	b.n	80030de <USB_InitFSLSPClkSel+0x2a>

080030ee <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80030ee:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 80030f0:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80030f4:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80030f6:	9b01      	ldr	r3, [sp, #4]
 80030f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030fc:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 80030fe:	9b01      	ldr	r3, [sp, #4]
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003104:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8003106:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 800310a:	200a      	movs	r0, #10
 800310c:	f7fd fa34 	bl	8000578 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8003110:	9b01      	ldr	r3, [sp, #4]
  return HAL_OK;
}
 8003112:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8003114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003118:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 800311c:	b002      	add	sp, #8
 800311e:	bd10      	pop	{r4, pc}

08003120 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003120:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8003122:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003126:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8003128:	9b01      	ldr	r3, [sp, #4]
 800312a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800312e:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003130:	9b01      	ldr	r3, [sp, #4]
 8003132:	04da      	lsls	r2, r3, #19
 8003134:	d406      	bmi.n	8003144 <USB_DriveVbus+0x24>
 8003136:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8003138:	bf02      	ittt	eq
 800313a:	9b01      	ldreq	r3, [sp, #4]
 800313c:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003140:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003144:	9b01      	ldr	r3, [sp, #4]
 8003146:	04db      	lsls	r3, r3, #19
 8003148:	d505      	bpl.n	8003156 <USB_DriveVbus+0x36>
 800314a:	b921      	cbnz	r1, 8003156 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 800314c:	9b01      	ldr	r3, [sp, #4]
 800314e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003152:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 8003156:	2000      	movs	r0, #0
 8003158:	b002      	add	sp, #8
 800315a:	4770      	bx	lr

0800315c <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 800315c:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 800315e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003162:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8003164:	9801      	ldr	r0, [sp, #4]
}
 8003166:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800316a:	b002      	add	sp, #8
 800316c:	4770      	bx	lr

0800316e <USB_GetCurrentFrame>:
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800316e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003172:	6880      	ldr	r0, [r0, #8]
}
 8003174:	b280      	uxth	r0, r0
 8003176:	4770      	bx	lr

08003178 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800317a:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 800317e:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 8003182:	f89d 5018 	ldrb.w	r5, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8003186:	f04f 36ff 	mov.w	r6, #4294967295
 800318a:	60a6      	str	r6, [r4, #8]
 800318c:	b257      	sxtb	r7, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 800318e:	2d03      	cmp	r5, #3
 8003190:	d814      	bhi.n	80031bc <USB_HC_Init+0x44>
 8003192:	e8df f005 	tbb	[pc, r5]
 8003196:	5302      	.short	0x5302
 8003198:	4d02      	.short	0x4d02
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800319a:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 800319e:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80031a0:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 80031a2:	da04      	bge.n	80031ae <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80031a4:	68e6      	ldr	r6, [r4, #12]
 80031a6:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80031aa:	60e6      	str	r6, [r4, #12]
 80031ac:	e006      	b.n	80031bc <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 80031ae:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80031b2:	d003      	beq.n	80031bc <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80031b4:	68e6      	ldr	r6, [r4, #12]
 80031b6:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 80031ba:	60e6      	str	r6, [r4, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80031bc:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418
 80031c0:	2601      	movs	r6, #1
 80031c2:	fa06 f101 	lsl.w	r1, r6, r1
 80031c6:	ea41 010c 	orr.w	r1, r1, ip
 80031ca:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80031ce:	6981      	ldr	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80031d0:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80031d2:	02d2      	lsls	r2, r2, #11
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80031d4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80031d8:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80031dc:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80031e0:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80031e2:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80031e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80031e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80031ec:	2f00      	cmp	r7, #0
 80031ee:	bfb4      	ite	lt
 80031f0:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 80031f4:	2600      	movge	r6, #0
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80031f6:	f3c1 010a 	ubfx	r1, r1, #0, #11
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80031fa:	2b02      	cmp	r3, #2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80031fc:	ea4f 4385 	mov.w	r3, r5, lsl #18
 8003200:	ea42 0201 	orr.w	r2, r2, r1
 8003204:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003208:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800320c:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8003210:	ea43 0306 	orr.w	r3, r3, r6
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8003214:	bf0c      	ite	eq
 8003216:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 800321a:	2000      	movne	r0, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800321c:	4303      	orrs	r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800321e:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8003220:	2d03      	cmp	r5, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003222:	bf02      	ittt	eq
 8003224:	6823      	ldreq	r3, [r4, #0]
 8003226:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 800322a:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 800322c:	2000      	movs	r0, #0
 800322e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003230:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80U) 
 8003234:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003236:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8003238:	dac0      	bge.n	80031bc <USB_HC_Init+0x44>
 800323a:	e7b3      	b.n	80031a4 <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800323c:	f240 2625 	movw	r6, #549	; 0x225
 8003240:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8003242:	2f00      	cmp	r7, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8003244:	bfbe      	ittt	lt
 8003246:	68e6      	ldrlt	r6, [r4, #12]
 8003248:	f446 76c0 	orrlt.w	r6, r6, #384	; 0x180
 800324c:	60e6      	strlt	r6, [r4, #12]
 800324e:	e7b5      	b.n	80031bc <USB_HC_Init+0x44>

08003250 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 800325e:	2300      	movs	r3, #0
 8003260:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 8003262:	2300      	movs	r3, #0
 8003264:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 800326a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800326e:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800327a:	d02b      	beq.n	80032d4 <USB_HC_StartXfer+0x84>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	791b      	ldrb	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d127      	bne.n	80032d4 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10b      	bne.n	80032a2 <USB_HC_StartXfer+0x52>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	795b      	ldrb	r3, [r3, #5]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	785b      	ldrb	r3, [r3, #1]
 8003296:	4619      	mov	r1, r3
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fa0f 	bl	80036bc <USB_DoPing>
      return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e10d      	b.n	80034be <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d115      	bne.n	80032d4 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	4619      	mov	r1, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80032cc:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d019      	beq.n	8003310 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	8912      	ldrh	r2, [r2, #8]
 80032e4:	4413      	add	r3, r2
 80032e6:	3b01      	subs	r3, #1
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	8912      	ldrh	r2, [r2, #8]
 80032ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80032f0:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80032f2:	8bfa      	ldrh	r2, [r7, #30]
 80032f4:	8b3b      	ldrh	r3, [r7, #24]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d90c      	bls.n	8003314 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80032fa:	8b3b      	ldrh	r3, [r7, #24]
 80032fc:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80032fe:	8bfb      	ldrh	r3, [r7, #30]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	8912      	ldrh	r2, [r2, #8]
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	611a      	str	r2, [r3, #16]
 800330e:	e001      	b.n	8003314 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 8003310:	2301      	movs	r3, #1
 8003312:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	78db      	ldrb	r3, [r3, #3]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 800331c:	8bfb      	ldrh	r3, [r7, #30]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	8912      	ldrh	r2, [r2, #8]
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	461a      	mov	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	4619      	mov	r1, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8003344:	8bfb      	ldrh	r3, [r7, #30]
 8003346:	04db      	lsls	r3, r3, #19
 8003348:	4618      	mov	r0, r3
 800334a:	4b5f      	ldr	r3, [pc, #380]	; (80034c8 <USB_HC_StartXfer+0x278>)
 800334c:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800334e:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	7a9b      	ldrb	r3, [r3, #10]
 8003354:	075b      	lsls	r3, r3, #29
 8003356:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800335a:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800335c:	610b      	str	r3, [r1, #16]
  
  if (dma)
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	461a      	mov	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	4619      	mov	r1, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	785b      	ldrb	r3, [r3, #1]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80033b6:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	785b      	ldrb	r3, [r3, #1]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	4619      	mov	r1, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	7f7a      	ldrb	r2, [r7, #29]
 80033da:	0752      	lsls	r2, r2, #29
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033f8:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003400:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	785b      	ldrb	r3, [r3, #1]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	461a      	mov	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d14f      	bne.n	80034bc <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	78db      	ldrb	r3, [r3, #3]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d14b      	bne.n	80034bc <USB_HC_StartXfer+0x26c>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d047      	beq.n	80034bc <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	79db      	ldrb	r3, [r3, #7]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d831      	bhi.n	8003498 <USB_HC_StartXfer+0x248>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <USB_HC_StartXfer+0x1ec>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	0800344d 	.word	0x0800344d
 8003440:	08003471 	.word	0x08003471
 8003444:	0800344d 	.word	0x0800344d
 8003448:	08003471 	.word	0x08003471
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	3303      	adds	r3, #3
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8003456:	8b7a      	ldrh	r2, [r7, #26]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	b29b      	uxth	r3, r3
 800345e:	429a      	cmp	r2, r3
 8003460:	d91c      	bls.n	800349c <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]
        }
        break;
 800346e:	e015      	b.n	800349c <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	3303      	adds	r3, #3
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 800347a:	8b7a      	ldrh	r2, [r7, #26]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	b29b      	uxth	r3, r3
 8003486:	429a      	cmp	r2, r3
 8003488:	d90a      	bls.n	80034a0 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	619a      	str	r2, [r3, #24]
        }
        break;
 8003496:	e003      	b.n	80034a0 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8003498:	bf00      	nop
 800349a:	e002      	b.n	80034a2 <USB_HC_StartXfer+0x252>
        break;
 800349c:	bf00      	nop
 800349e:	e000      	b.n	80034a2 <USB_HC_StartXfer+0x252>
        break;
 80034a0:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	68d9      	ldr	r1, [r3, #12]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	785a      	ldrb	r2, [r3, #1]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	b298      	uxth	r0, r3
 80034b0:	2300      	movs	r3, #0
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	4603      	mov	r3, r0
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff fd48 	bl	8002f4c <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	1ff80000 	.word	0x1ff80000

080034cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	b29b      	uxth	r3, r3
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0c9b      	lsrs	r3, r3, #18
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <USB_HC_Halt+0x40>
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8003526:	2b02      	cmp	r3, #2
 8003528:	d160      	bne.n	80035ec <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	4619      	mov	r1, r3
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800354a:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d135      	bne.n	80035c4 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	4619      	mov	r1, r3
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003578:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	4619      	mov	r1, r3
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800359a:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3301      	adds	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035a8:	d81e      	bhi.n	80035e8 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035c0:	d0ec      	beq.n	800359c <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80035c2:	e074      	b.n	80036ae <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	4619      	mov	r1, r3
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035e4:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80035e6:	e062      	b.n	80036ae <USB_HC_Halt+0x1c4>
          break;
 80035e8:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80035ea:	e060      	b.n	80036ae <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	4619      	mov	r1, r3
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800360c:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d135      	bne.n	8003688 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	4619      	mov	r1, r3
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800363c:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364a:	4619      	mov	r1, r3
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800365e:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3301      	adds	r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800366c:	d81e      	bhi.n	80036ac <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003684:	d0ec      	beq.n	8003660 <USB_HC_Halt+0x176>
 8003686:	e012      	b.n	80036ae <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	4619      	mov	r1, r3
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036a8:	600b      	str	r3, [r1, #0]
 80036aa:	e000      	b.n	80036ae <USB_HC_Halt+0x1c4>
          break;
 80036ac:	bf00      	nop
    }
  }
  
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	04db      	lsls	r3, r3, #19
 80036e2:	4619      	mov	r1, r3
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <USB_DoPing+0x74>)
 80036e6:	400b      	ands	r3, r1
 80036e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003704:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800370c:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	461a      	mov	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	1ff80000 	.word	0x1ff80000

08003734 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fbc3 	bl	8002ecc <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8003746:	2110      	movs	r1, #16
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fbdd 	bl	8002f08 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fbec 	bl	8002f2c <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
 8003758:	e01f      	b.n	800379a <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003770:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003778:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003780:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	3301      	adds	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d9dc      	bls.n	800375a <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	75fb      	strb	r3, [r7, #23]
 80037a4:	e034      	b.n	8003810 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037bc:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037c4:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037cc:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3301      	adds	r3, #1
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ec:	d80c      	bhi.n	8003808 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003804:	d0ec      	beq.n	80037e0 <USB_StopHost+0xac>
 8003806:	e000      	b.n	800380a <USB_StopHost+0xd6>
        break;
 8003808:	bf00      	nop
  for (i = 0; i <= 15; i++)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	3301      	adds	r3, #1
 800380e:	75fb      	strb	r3, [r7, #23]
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	d9c7      	bls.n	80037a6 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800381c:	461a      	mov	r2, r3
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f04f 32ff 	mov.w	r2, #4294967295
 800382a:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fb47 	bl	8002ec0 <USB_EnableGlobalInt>
  return HAL_OK;  
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 800383c:	2000      	movs	r0, #0
 800383e:	4770      	bx	lr

08003840 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003840:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8003844:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003846:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 8003848:	7b2b      	ldrb	r3, [r5, #12]
{
 800384a:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 800384c:	b123      	cbz	r3, 8003858 <USBH_MSC_Process+0x18>
  USBH_StatusTypeDef error = USBH_BUSY ;
 800384e:	f113 30ff 	adds.w	r0, r3, #4294967295
 8003852:	bf18      	it	ne
 8003854:	2001      	movne	r0, #1
 8003856:	bd70      	pop	{r4, r5, r6, pc}
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8003858:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 800385c:	682a      	ldr	r2, [r5, #0]
 800385e:	4291      	cmp	r1, r2
 8003860:	f04f 0401 	mov.w	r4, #1
 8003864:	f080 80c6 	bcs.w	80039f4 <USBH_MSC_Process+0x1b4>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8003868:	2234      	movs	r2, #52	; 0x34
 800386a:	fb02 5301 	mla	r3, r2, r1, r5
 800386e:	f883 4091 	strb.w	r4, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8003872:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003876:	4614      	mov	r4, r2
 8003878:	2b08      	cmp	r3, #8
 800387a:	d83a      	bhi.n	80038f2 <USBH_MSC_Process+0xb2>
 800387c:	e8df f003 	tbb	[pc, r3]
 8003880:	64203905 	.word	0x64203905
 8003884:	3939870e 	.word	0x3939870e
 8003888:	b6          	.byte	0xb6
 8003889:	00          	.byte	0x00
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800388a:	fb04 5401 	mla	r4, r4, r1, r5
 800388e:	2304      	movs	r3, #4
 8003890:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 8003894:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
 8003898:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800389c:	2434      	movs	r4, #52	; 0x34
 800389e:	fb04 5201 	mla	r2, r4, r1, r5
 80038a2:	329f      	adds	r2, #159	; 0x9f
 80038a4:	b2c9      	uxtb	r1, r1
 80038a6:	4630      	mov	r0, r6
 80038a8:	f000 fbe7 	bl	800407a <USBH_MSC_SCSI_Inquiry>
        if( scsi_status == USBH_OK)
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d15f      	bne.n	8003970 <USBH_MSC_Process+0x130>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 80038b0:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80038b4:	fb04 5503 	mla	r5, r4, r3, r5
 80038b8:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 80038ba:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 80038be:	e018      	b.n	80038f2 <USBH_MSC_Process+0xb2>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 80038c0:	b2c9      	uxtb	r1, r1
 80038c2:	f000 fb75 	bl	8003fb0 <USBH_MSC_SCSI_TestUnitReady>
        if( ready_status == USBH_OK)
 80038c6:	b9b0      	cbnz	r0, 80038f6 <USBH_MSC_Process+0xb6>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80038c8:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80038cc:	2234      	movs	r2, #52	; 0x34
 80038ce:	fb02 5103 	mla	r1, r2, r3, r5
 80038d2:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 80038d6:	b100      	cbz	r0, 80038da <USBH_MSC_Process+0x9a>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 80038d8:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80038da:	fb02 5503 	mla	r5, r2, r3, r5
 80038de:	2303      	movs	r3, #3
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 80038e0:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80038e4:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80038ee:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
  USBH_StatusTypeDef error = USBH_BUSY ;
 80038f2:	2001      	movs	r0, #1
}
 80038f4:	bd70      	pop	{r4, r5, r6, pc}
        if( ready_status == USBH_FAIL)
 80038f6:	2802      	cmp	r0, #2
 80038f8:	d118      	bne.n	800392c <USBH_MSC_Process+0xec>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80038fa:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80038fe:	2234      	movs	r2, #52	; 0x34
 8003900:	fb02 5103 	mla	r1, r2, r3, r5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8003904:	fb02 5503 	mla	r5, r2, r3, r5
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8003908:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 800390c:	2802      	cmp	r0, #2
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 800390e:	bf14      	ite	ne
 8003910:	2001      	movne	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8003912:	2000      	moveq	r0, #0
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8003914:	2305      	movs	r3, #5
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8003916:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 800391a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800391e:	2001      	movs	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8003920:	2302      	movs	r3, #2
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8003922:	f885 0091 	strb.w	r0, [r5, #145]	; 0x91
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8003926:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 800392a:	bd70      	pop	{r4, r5, r6, pc}
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 800392c:	2804      	cmp	r0, #4
 800392e:	d1e0      	bne.n	80038f2 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003930:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8003934:	2234      	movs	r2, #52	; 0x34
 8003936:	fb02 5503 	mla	r5, r2, r3, r5
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800393a:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800393c:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800393e:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8003942:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 8003946:	bd70      	pop	{r4, r5, r6, pc}
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8003948:	fb04 5201 	mla	r2, r4, r1, r5
 800394c:	3294      	adds	r2, #148	; 0x94
 800394e:	b2c9      	uxtb	r1, r1
 8003950:	f000 fb54 	bl	8003ffc <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 8003954:	b960      	cbnz	r0, 8003970 <USBH_MSC_Process+0x130>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1)
 8003956:	f8b5 20f8 	ldrh.w	r2, [r5, #248]	; 0xf8
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800395a:	2301      	movs	r3, #1
 800395c:	fb04 5402 	mla	r4, r4, r2, r5
          MSC_Handle->current_lun++;
 8003960:	441a      	add	r2, r3
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003962:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8003966:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
          MSC_Handle->current_lun++;
 800396a:	f8a5 20f8 	strh.w	r2, [r5, #248]	; 0xf8
 800396e:	e7c0      	b.n	80038f2 <USBH_MSC_Process+0xb2>
        else if( scsi_status == USBH_FAIL)
 8003970:	2802      	cmp	r0, #2
 8003972:	d105      	bne.n	8003980 <USBH_MSC_Process+0x140>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8003974:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8003978:	fb04 5503 	mla	r5, r4, r3, r5
 800397c:	2305      	movs	r3, #5
 800397e:	e79c      	b.n	80038ba <USBH_MSC_Process+0x7a>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8003980:	2804      	cmp	r0, #4
 8003982:	d1b6      	bne.n	80038f2 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003984:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8003988:	fb04 5503 	mla	r5, r4, r3, r5
 800398c:	e7d5      	b.n	800393a <USBH_MSC_Process+0xfa>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800398e:	fb04 5201 	mla	r2, r4, r1, r5
 8003992:	329c      	adds	r2, #156	; 0x9c
 8003994:	b2c9      	uxtb	r1, r1
 8003996:	f000 fbda 	bl	800414e <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 800399a:	b9f8      	cbnz	r0, 80039dc <USBH_MSC_Process+0x19c>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800399c:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80039a0:	fb04 5403 	mla	r4, r4, r3, r5
 80039a4:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 80039a8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80039ac:	2a02      	cmp	r2, #2
 80039ae:	d10b      	bne.n	80039c8 <USBH_MSC_Process+0x188>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 80039b0:	f8d5 00fc 	ldr.w	r0, [r5, #252]	; 0xfc
 80039b4:	f8d6 13b8 	ldr.w	r1, [r6, #952]	; 0x3b8
 80039b8:	1a09      	subs	r1, r1, r0
 80039ba:	f242 700f 	movw	r0, #9999	; 0x270f
 80039be:	4281      	cmp	r1, r0
 80039c0:	d802      	bhi.n	80039c8 <USBH_MSC_Process+0x188>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80039c2:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 80039c6:	e794      	b.n	80038f2 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80039c8:	2234      	movs	r2, #52	; 0x34
 80039ca:	fb02 5203 	mla	r2, r2, r3, r5
 80039ce:	2001      	movs	r0, #1
          MSC_Handle->current_lun++;
 80039d0:	4403      	add	r3, r0
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80039d2:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
          MSC_Handle->current_lun++;
 80039d6:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 80039da:	bd70      	pop	{r4, r5, r6, pc}
        if( scsi_status == USBH_FAIL)
 80039dc:	2802      	cmp	r0, #2
 80039de:	d1cf      	bne.n	8003980 <USBH_MSC_Process+0x140>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 80039e0:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80039e4:	fb04 5503 	mla	r5, r4, r3, r5
 80039e8:	2308      	movs	r3, #8
 80039ea:	e766      	b.n	80038ba <USBH_MSC_Process+0x7a>
        MSC_Handle->current_lun++;
 80039ec:	3101      	adds	r1, #1
 80039ee:	f8a5 10f8 	strh.w	r1, [r5, #248]	; 0xf8
 80039f2:	e77e      	b.n	80038f2 <USBH_MSC_Process+0xb2>
      MSC_Handle->current_lun = 0;
 80039f4:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 80039f8:	732c      	strb	r4, [r5, #12]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 80039fa:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 80039fe:	2102      	movs	r1, #2
 8003a00:	4798      	blx	r3
 8003a02:	e776      	b.n	80038f2 <USBH_MSC_Process+0xb2>

08003a04 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8003a04:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{   
 8003a08:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8003a0a:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8003a0c:	7ba3      	ldrb	r3, [r4, #14]
 8003a0e:	2b02      	cmp	r3, #2
{   
 8003a10:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 8003a12:	d002      	beq.n	8003a1a <USBH_MSC_ClassRequest+0x16>
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d020      	beq.n	8003a5a <USBH_MSC_ClassRequest+0x56>
 8003a18:	bb2b      	cbnz	r3, 8003a66 <USBH_MSC_ClassRequest+0x62>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f000 f9bc 	bl	8003d9a <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 8003a22:	2803      	cmp	r0, #3
 8003a24:	d10e      	bne.n	8003a44 <USBH_MSC_ClassRequest+0x40>
      MSC_Handle->max_lun = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	6023      	str	r3, [r4, #0]
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8003a2a:	7822      	ldrb	r2, [r4, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8003a2c:	2300      	movs	r3, #0
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8003a2e:	3201      	adds	r2, #1
 8003a30:	6022      	str	r2, [r4, #0]
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8003a32:	2034      	movs	r0, #52	; 0x34
 8003a34:	2502      	movs	r5, #2
        MSC_Handle->unit[i].state_changed = 0;
 8003a36:	461e      	mov	r6, r3
 8003a38:	1c59      	adds	r1, r3, #1
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d804      	bhi.n	8003a4a <USBH_MSC_ClassRequest+0x46>
 8003a40:	2000      	movs	r0, #0
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
    if(status == USBH_OK)
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d0f0      	beq.n	8003a2a <USBH_MSC_ClassRequest+0x26>
}
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8003a4a:	fb00 4303 	mla	r3, r0, r3, r4
 8003a4e:	f883 5092 	strb.w	r5, [r3, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0;
 8003a52:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
 8003a56:	460b      	mov	r3, r1
 8003a58:	e7ee      	b.n	8003a38 <USBH_MSC_ClassRequest+0x34>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f001 f825 	bl	8004aaa <USBH_ClrFeature>
 8003a60:	b908      	cbnz	r0, 8003a66 <USBH_MSC_ClassRequest+0x62>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 8003a62:	7be3      	ldrb	r3, [r4, #15]
 8003a64:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8003a66:	2001      	movs	r0, #1
 8003a68:	e7ee      	b.n	8003a48 <USBH_MSC_ClassRequest+0x44>

08003a6a <USBH_MSC_InterfaceDeInit>:
{
 8003a6a:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003a6c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003a70:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 8003a72:	7969      	ldrb	r1, [r5, #5]
{
 8003a74:	4604      	mov	r4, r0
  if ( MSC_Handle->OutPipe)
 8003a76:	b139      	cbz	r1, 8003a88 <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8003a78:	f001 f893 	bl	8004ba2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 8003a7c:	7969      	ldrb	r1, [r5, #5]
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f001 f8ac 	bl	8004bdc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8003a84:	2300      	movs	r3, #0
 8003a86:	716b      	strb	r3, [r5, #5]
  if ( MSC_Handle->InPipe)
 8003a88:	7929      	ldrb	r1, [r5, #4]
 8003a8a:	b141      	cbz	r1, 8003a9e <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f001 f888 	bl	8004ba2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8003a92:	7929      	ldrb	r1, [r5, #4]
 8003a94:	4620      	mov	r0, r4
 8003a96:	f001 f8a1 	bl	8004bdc <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	712b      	strb	r3, [r5, #4]
  if(phost->pActiveClass->pData)
 8003a9e:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003aa2:	69d8      	ldr	r0, [r3, #28]
 8003aa4:	b128      	cbz	r0, 8003ab2 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free (phost->pActiveClass->pData);
 8003aa6:	f004 fb41 	bl	800812c <free>
    phost->pActiveClass->pData = 0;
 8003aaa:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003aae:	2200      	movs	r2, #0
 8003ab0:	61da      	str	r2, [r3, #28]
}
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}

08003ab6 <USBH_MSC_InterfaceInit>:
{	 
 8003ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8003ab8:	f8d0 1374 	ldr.w	r1, [r0, #884]	; 0x374
{	 
 8003abc:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8003abe:	7909      	ldrb	r1, [r1, #4]
 8003ac0:	2350      	movs	r3, #80	; 0x50
 8003ac2:	2206      	movs	r2, #6
{	 
 8003ac4:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8003ac6:	f000 fc63 	bl	8004390 <USBH_FindInterface>
  if(interface == 0xFF) /* Not Valid Interface */
 8003aca:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8003acc:	4601      	mov	r1, r0
  if(interface == 0xFF) /* Not Valid Interface */
 8003ace:	d06d      	beq.n	8003bac <USBH_MSC_InterfaceInit+0xf6>
    USBH_SelectInterface (phost, interface);
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f000 fc54 	bl	800437e <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8003ad6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003ada:	f8d5 6374 	ldr.w	r6, [r5, #884]	; 0x374
 8003ade:	f004 fb1d 	bl	800811c <malloc>
 8003ae2:	61f0      	str	r0, [r6, #28]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003ae4:	f895 231f 	ldrb.w	r2, [r5, #799]	; 0x31f
 8003ae8:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8003aea:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003aec:	fb03 5002 	mla	r0, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003af0:	fb03 5302 	mla	r3, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003af4:	f890 1348 	ldrb.w	r1, [r0, #840]	; 0x348
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003af8:	f893 2350 	ldrb.w	r2, [r3, #848]	; 0x350
 8003afc:	f8b0 034a 	ldrh.w	r0, [r0, #842]	; 0x34a
 8003b00:	f8b3 3352 	ldrh.w	r3, [r3, #850]	; 0x352
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003b04:	f011 0f80 	tst.w	r1, #128	; 0x80
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8003b08:	bf19      	ittee	ne
 8003b0a:	71e1      	strbne	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8003b0c:	8160      	strhne	r0, [r4, #10]
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8003b0e:	71a1      	strbeq	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 8003b10:	8120      	strheq	r0, [r4, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003b12:	f012 0f80 	tst.w	r2, #128	; 0x80
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8003b16:	bf08      	it	eq
 8003b18:	71a2      	strbeq	r2, [r4, #6]
    MSC_Handle->current_lun = 0;
 8003b1a:	f04f 0600 	mov.w	r6, #0
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003b1e:	79a1      	ldrb	r1, [r4, #6]
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8003b20:	bf18      	it	ne
 8003b22:	71e2      	strbne	r2, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003b24:	4628      	mov	r0, r5
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 8003b26:	bf14      	ite	ne
 8003b28:	8163      	strhne	r3, [r4, #10]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 8003b2a:	8123      	strheq	r3, [r4, #8]
    MSC_Handle->current_lun = 0;
 8003b2c:	f8a4 60f8 	strh.w	r6, [r4, #248]	; 0xf8
    MSC_Handle->rw_lun = 0;
 8003b30:	f8a4 60fa 	strh.w	r6, [r4, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8003b34:	7326      	strb	r6, [r4, #12]
    MSC_Handle->error = MSC_OK;
 8003b36:	7366      	strb	r6, [r4, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8003b38:	73a6      	strb	r6, [r4, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003b3a:	f001 f837 	bl	8004bac <USBH_AllocPipe>
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8003b3e:	79e1      	ldrb	r1, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003b40:	7160      	strb	r0, [r4, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8003b42:	4628      	mov	r0, r5
 8003b44:	f001 f832 	bl	8004bac <USBH_AllocPipe>
 8003b48:	7120      	strb	r0, [r4, #4]
    USBH_MSC_BOT_Init(phost);
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f000 f930 	bl	8003db0 <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 8003b50:	2268      	movs	r2, #104	; 0x68
 8003b52:	4631      	mov	r1, r6
 8003b54:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8003b58:	f004 faf0 	bl	800813c <memset>
    USBH_OpenPipe  (phost,
 8003b5c:	8920      	ldrh	r0, [r4, #8]
 8003b5e:	9002      	str	r0, [sp, #8]
 8003b60:	2702      	movs	r7, #2
 8003b62:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003b66:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003b6a:	79a2      	ldrb	r2, [r4, #6]
 8003b6c:	7961      	ldrb	r1, [r4, #5]
 8003b6e:	9000      	str	r0, [sp, #0]
 8003b70:	9701      	str	r7, [sp, #4]
 8003b72:	4628      	mov	r0, r5
 8003b74:	f001 f806 	bl	8004b84 <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 8003b78:	8960      	ldrh	r0, [r4, #10]
 8003b7a:	9002      	str	r0, [sp, #8]
 8003b7c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003b80:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003b84:	79e2      	ldrb	r2, [r4, #7]
 8003b86:	7921      	ldrb	r1, [r4, #4]
 8003b88:	9000      	str	r0, [sp, #0]
 8003b8a:	9701      	str	r7, [sp, #4]
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f000 fff9 	bl	8004b84 <USBH_OpenPipe>
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 8003b92:	4632      	mov	r2, r6
 8003b94:	7921      	ldrb	r1, [r4, #4]
 8003b96:	4628      	mov	r0, r5
 8003b98:	f004 f8e1 	bl	8007d5e <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 8003b9c:	4632      	mov	r2, r6
 8003b9e:	7961      	ldrb	r1, [r4, #5]
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	f004 f8dc 	bl	8007d5e <USBH_LL_SetToggle>
    status = USBH_OK; 
 8003ba6:	4630      	mov	r0, r6
}
 8003ba8:	b005      	add	sp, #20
 8003baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = USBH_FAIL;      
 8003bac:	2002      	movs	r0, #2
 8003bae:	e7fb      	b.n	8003ba8 <USBH_MSC_InterfaceInit+0xf2>

08003bb0 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003bb0:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8003bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003bb6:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8003bb8:	2634      	movs	r6, #52	; 0x34
 8003bba:	fb06 5401 	mla	r4, r6, r1, r5
 8003bbe:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d010      	beq.n	8003be8 <USBH_MSC_RdWrProcess+0x38>
 8003bc6:	2b07      	cmp	r3, #7
 8003bc8:	d019      	beq.n	8003bfe <USBH_MSC_RdWrProcess+0x4e>
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d122      	bne.n	8003c14 <USBH_MSC_RdWrProcess+0x64>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif       
    break; 
  
  case MSC_REQUEST_SENSE:
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8003bce:	fb06 5201 	mla	r2, r6, r1, r5
 8003bd2:	329c      	adds	r2, #156	; 0x9c
 8003bd4:	f000 fabb 	bl	800414e <USBH_MSC_SCSI_RequestSense>
    
    if( scsi_status == USBH_OK)
 8003bd8:	b9f0      	cbnz	r0, 8003c18 <USBH_MSC_RdWrProcess+0x68>
    {
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
      USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
      USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8003bda:	2301      	movs	r3, #1
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8003bdc:	2002      	movs	r0, #2
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8003bde:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8003be2:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
 8003be6:	e008      	b.n	8003bfa <USBH_MSC_RdWrProcess+0x4a>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
 8003be8:	2300      	movs	r3, #0
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	f000 fb3b 	bl	8004268 <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 8003bf2:	b950      	cbnz	r0, 8003c0a <USBH_MSC_RdWrProcess+0x5a>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  default:
    break;  
    
  }
  return error;
}
 8003bfa:	b002      	add	sp, #8
 8003bfc:	bd70      	pop	{r4, r5, r6, pc}
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f000 faec 	bl	80041e0 <USBH_MSC_SCSI_Write>
 8003c08:	e7f3      	b.n	8003bf2 <USBH_MSC_RdWrProcess+0x42>
    else if( scsi_status == USBH_FAIL)
 8003c0a:	2802      	cmp	r0, #2
 8003c0c:	d104      	bne.n	8003c18 <USBH_MSC_RdWrProcess+0x68>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
 8003c0e:	2305      	movs	r3, #5
 8003c10:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8003c14:	2001      	movs	r0, #1
 8003c16:	e7f0      	b.n	8003bfa <USBH_MSC_RdWrProcess+0x4a>
    if( scsi_status == USBH_FAIL)
 8003c18:	2804      	cmp	r0, #4
 8003c1a:	d1fb      	bne.n	8003c14 <USBH_MSC_RdWrProcess+0x64>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8003c22:	2002      	movs	r0, #2
 8003c24:	e7e9      	b.n	8003bfa <USBH_MSC_RdWrProcess+0x4a>

08003c26 <USBH_MSC_UnitIsReady>:
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
  
  if(phost->gState == HOST_CLASS)
 8003c26:	7803      	ldrb	r3, [r0, #0]
 8003c28:	2b0a      	cmp	r3, #10
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8003c2a:	bf01      	itttt	eq
 8003c2c:	f8d0 3374 	ldreq.w	r3, [r0, #884]	; 0x374
  {
    return (MSC_Handle->unit[lun].error == MSC_OK);
 8003c30:	69db      	ldreq	r3, [r3, #28]
 8003c32:	2234      	moveq	r2, #52	; 0x34
 8003c34:	fb02 3101 	mlaeq	r1, r2, r1, r3
 8003c38:	bf03      	ittte	eq
 8003c3a:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
 8003c3e:	fab0 f080 	clzeq	r0, r0
 8003c42:	0940      	lsreq	r0, r0, #5
 8003c44:	2000      	movne	r0, #0
  }
  else
  {
    return 0;
  }
}
 8003c46:	4770      	bx	lr

08003c48 <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
  if(phost->gState == HOST_CLASS)
 8003c48:	7803      	ldrb	r3, [r0, #0]
 8003c4a:	2b0a      	cmp	r3, #10
{
 8003c4c:	b510      	push	{r4, lr}
  if(phost->gState == HOST_CLASS)
 8003c4e:	d111      	bne.n	8003c74 <USBH_MSC_GetLUNInfo+0x2c>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
 8003c50:	f8d0 0374 	ldr.w	r0, [r0, #884]	; 0x374
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8003c54:	2490      	movs	r4, #144	; 0x90
 8003c56:	2334      	movs	r3, #52	; 0x34
 8003c58:	fb13 4301 	smlabb	r3, r3, r1, r4
 8003c5c:	69c1      	ldr	r1, [r0, #28]
 8003c5e:	4419      	add	r1, r3
 8003c60:	f101 0334 	add.w	r3, r1, #52	; 0x34
 8003c64:	f851 0b04 	ldr.w	r0, [r1], #4
 8003c68:	f842 0b04 	str.w	r0, [r2], #4
 8003c6c:	4299      	cmp	r1, r3
 8003c6e:	d1f9      	bne.n	8003c64 <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 8003c70:	2000      	movs	r0, #0
 8003c72:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBH_FAIL;
 8003c74:	2002      	movs	r0, #2
  }
}
 8003c76:	bd10      	pop	{r4, pc}

08003c78 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8003c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 8003c7c:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 8003c80:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8003c84:	4604      	mov	r4, r0
 8003c86:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0) || 
 8003c88:	b3bd      	cbz	r5, 8003cfa <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) || 
 8003c8a:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 8003c8c:	2d0a      	cmp	r5, #10
 8003c8e:	d134      	bne.n	8003cfa <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 8003c90:	f8d0 5374 	ldr.w	r5, [r0, #884]	; 0x374
 8003c94:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8003c96:	2634      	movs	r6, #52	; 0x34
 8003c98:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 8003c9c:	f896 e090 	ldrb.w	lr, [r6, #144]	; 0x90
 8003ca0:	f1be 0f01 	cmp.w	lr, #1
 8003ca4:	d129      	bne.n	8003cfa <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_READ;
 8003ca6:	f04f 0e06 	mov.w	lr, #6
 8003caa:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8003cae:	f886 e090 	strb.w	lr, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8003cb2:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost,
 8003cb6:	f8cd 8000 	str.w	r8, [sp]
 8003cba:	f000 fad5 	bl	8004268 <USBH_MSC_SCSI_Read>
  
  timeout = phost->Timer;
  
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8003cbe:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 8003cc2:	f8d4 93b8 	ldr.w	r9, [r4, #952]	; 0x3b8
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8003cc6:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8003cca:	4639      	mov	r1, r7
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7ff ff6f 	bl	8003bb0 <USBH_MSC_RdWrProcess>
 8003cd2:	2801      	cmp	r0, #1
 8003cd4:	d005      	beq.n	8003ce2 <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8003cda:	2000      	movs	r0, #0
}
 8003cdc:	b003      	add	sp, #12
 8003cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8003ce2:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003ce6:	eba3 0309 	sub.w	r3, r3, r9
 8003cea:	42b3      	cmp	r3, r6
 8003cec:	d803      	bhi.n	8003cf6 <USBH_MSC_Read+0x7e>
 8003cee:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e9      	bne.n	8003cca <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8003cfa:	2002      	movs	r0, #2
 8003cfc:	e7ee      	b.n	8003cdc <USBH_MSC_Read+0x64>

08003cfe <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8003cfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 8003d02:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 8003d06:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0) || 
 8003d0e:	b3bd      	cbz	r5, 8003d80 <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) || 
 8003d10:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 8003d12:	2d0a      	cmp	r5, #10
 8003d14:	d134      	bne.n	8003d80 <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 8003d16:	f8d0 5374 	ldr.w	r5, [r0, #884]	; 0x374
 8003d1a:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8003d1c:	2634      	movs	r6, #52	; 0x34
 8003d1e:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 8003d22:	f896 e090 	ldrb.w	lr, [r6, #144]	; 0x90
 8003d26:	f1be 0f01 	cmp.w	lr, #1
 8003d2a:	d129      	bne.n	8003d80 <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_WRITE;
 8003d2c:	f04f 0e07 	mov.w	lr, #7
 8003d30:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8003d34:	f886 e090 	strb.w	lr, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8003d38:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost,
 8003d3c:	f8cd 8000 	str.w	r8, [sp]
 8003d40:	f000 fa4e 	bl	80041e0 <USBH_MSC_SCSI_Write>
                     length);
  
  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 8003d44:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 8003d48:	f8d4 93b8 	ldr.w	r9, [r4, #952]	; 0x3b8
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 8003d4c:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8003d50:	4639      	mov	r1, r7
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff ff2c 	bl	8003bb0 <USBH_MSC_RdWrProcess>
 8003d58:	2801      	cmp	r0, #1
 8003d5a:	d005      	beq.n	8003d68 <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8003d60:	2000      	movs	r0, #0
}
 8003d62:	b003      	add	sp, #12
 8003d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 8003d68:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003d6c:	eba3 0309 	sub.w	r3, r3, r9
 8003d70:	42b3      	cmp	r3, r6
 8003d72:	d803      	bhi.n	8003d7c <USBH_MSC_Write+0x7e>
 8003d74:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e9      	bne.n	8003d50 <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8003d80:	2002      	movs	r0, #2
 8003d82:	e7ee      	b.n	8003d62 <USBH_MSC_Write+0x64>

08003d84 <USBH_MSC_BOT_REQ_Reset>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8003d84:	2221      	movs	r2, #33	; 0x21
 8003d86:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8003d88:	22ff      	movs	r2, #255	; 0xff
 8003d8a:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8003d90:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 0;           
 8003d92:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );  
 8003d94:	4611      	mov	r1, r2
 8003d96:	f000 bc7c 	b.w	8004692 <USBH_CtlReq>

08003d9a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003d9a:	22a1      	movs	r2, #161	; 0xa1
 8003d9c:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8003d9e:	22fe      	movs	r2, #254	; 0xfe
 8003da0:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 8003da2:	2200      	movs	r2, #0
 8003da4:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8003da6:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1;           
 8003da8:	2201      	movs	r2, #1
 8003daa:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 8003dac:	f000 bc71 	b.w	8004692 <USBH_CtlReq>

08003db0 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003db0:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8003db4:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003db6:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <USBH_MSC_BOT_Init+0x20>)
 8003dbc:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8003dc4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
}
 8003dc8:	2000      	movs	r0, #0
 8003dca:	4770      	bx	lr
 8003dcc:	43425355 	.word	0x43425355
 8003dd0:	20304050 	.word	0x20304050

08003dd4 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;  
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003dd4:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8003dd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003dda:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0;
  
  switch (MSC_Handle->hbot.state)
 8003ddc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003de0:	3b01      	subs	r3, #1
{
 8003de2:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 8003de4:	2b0a      	cmp	r3, #10
 8003de6:	d859      	bhi.n	8003e9c <USBH_MSC_BOT_Process+0xc8>
 8003de8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003dec:	001a000b 	.word	0x001a000b
 8003df0:	003d0033 	.word	0x003d0033
 8003df4:	0068005e 	.word	0x0068005e
 8003df8:	0093008b 	.word	0x0093008b
 8003dfc:	00be00b4 	.word	0x00be00b4
 8003e00:	00d6      	.short	0x00d6
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8003e02:	2302      	movs	r3, #2
    USBH_BulkSendData (phost,
 8003e04:	2501      	movs	r5, #1
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8003e06:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8003e0a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    USBH_BulkSendData (phost,
 8003e0e:	221f      	movs	r2, #31
 8003e10:	7963      	ldrb	r3, [r4, #5]
 8003e12:	9500      	str	r5, [sp, #0]
 8003e14:	f104 0154 	add.w	r1, r4, #84	; 0x54
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
      {
        USBH_BulkSendData (phost,
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f000 fe8c 	bl	8004b36 <USBH_BulkSendData>
 8003e1e:	e03d      	b.n	8003e9c <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 8003e20:	7961      	ldrb	r1, [r4, #5]
 8003e22:	f003 ff8b 	bl	8007d3c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003e26:	2801      	cmp	r0, #1
 8003e28:	d10c      	bne.n	8003e44 <USBH_MSC_BOT_Process+0x70>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 8003e2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e2c:	b143      	cbz	r3, 8003e40 <USBH_MSC_BOT_Process+0x6c>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8003e2e:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8003e32:	2b00      	cmp	r3, #0
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8003e34:	bfb4      	ite	lt
 8003e36:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 8003e38:	2305      	movge	r3, #5
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
    if ( status == USBH_OK)
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8003e3a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003e3e:	e006      	b.n	8003e4e <USBH_MSC_BOT_Process+0x7a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8003e40:	2307      	movs	r3, #7
 8003e42:	e7fa      	b.n	8003e3a <USBH_MSC_BOT_Process+0x66>
    else if(URB_Status == USBH_URB_NOTREADY)
 8003e44:	2802      	cmp	r0, #2
 8003e46:	d158      	bne.n	8003efa <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    
  default:      
    break;
  }
  return status;
}
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd70      	pop	{r4, r5, r6, pc}
    USBH_BulkReceiveData (phost,
 8003e52:	7923      	ldrb	r3, [r4, #4]
 8003e54:	8962      	ldrh	r2, [r4, #10]
 8003e56:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003e5a:	f000 fe83 	bl	8004b64 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 8003e5e:	2304      	movs	r3, #4
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8003e60:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003e64:	e01a      	b.n	8003e9c <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8003e66:	7921      	ldrb	r1, [r4, #4]
 8003e68:	f003 ff68 	bl	8007d3c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE) 
 8003e6c:	2801      	cmp	r0, #1
 8003e6e:	d117      	bne.n	8003ea0 <USBH_MSC_BOT_Process+0xcc>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8003e70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e72:	8962      	ldrh	r2, [r4, #10]
 8003e74:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 8003e76:	bf8a      	itet	hi
 8003e78:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8003e7a:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8003e7c:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8003e80:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8003e82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8003e84:	bf84      	itt	hi
 8003e86:	1889      	addhi	r1, r1, r2
 8003e88:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d065      	beq.n	8003f5c <USBH_MSC_BOT_Process+0x188>
        USBH_BulkReceiveData (phost,
 8003e90:	7923      	ldrb	r3, [r4, #4]
 8003e92:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003e96:	4630      	mov	r0, r6
 8003e98:	f000 fe64 	bl	8004b64 <USBH_BulkReceiveData>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	e7d6      	b.n	8003e4e <USBH_MSC_BOT_Process+0x7a>
    else if(URB_Status == USBH_URB_STALL)
 8003ea0:	2805      	cmp	r0, #5
 8003ea2:	d1fb      	bne.n	8003e9c <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8003ea4:	2309      	movs	r3, #9
 8003ea6:	e7db      	b.n	8003e60 <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkSendData (phost,
 8003ea8:	2501      	movs	r5, #1
 8003eaa:	7963      	ldrb	r3, [r4, #5]
 8003eac:	8922      	ldrh	r2, [r4, #8]
 8003eae:	9500      	str	r5, [sp, #0]
 8003eb0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003eb4:	f000 fe3f 	bl	8004b36 <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8003eb8:	2306      	movs	r3, #6
 8003eba:	e7d1      	b.n	8003e60 <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 8003ebc:	7961      	ldrb	r1, [r4, #5]
 8003ebe:	f003 ff3d 	bl	8007d3c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003ec2:	2801      	cmp	r0, #1
 8003ec4:	d115      	bne.n	8003ef2 <USBH_MSC_BOT_Process+0x11e>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8003ec6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ec8:	8922      	ldrh	r2, [r4, #8]
 8003eca:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 8003ecc:	bf8a      	itet	hi
 8003ece:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8003ed0:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8003ed2:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8003ed6:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8003ed8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8003eda:	bf84      	itt	hi
 8003edc:	1889      	addhi	r1, r1, r2
 8003ede:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
 8003ee2:	2501      	movs	r5, #1
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d039      	beq.n	8003f5c <USBH_MSC_BOT_Process+0x188>
        USBH_BulkSendData (phost,
 8003ee8:	7963      	ldrb	r3, [r4, #5]
 8003eea:	9500      	str	r5, [sp, #0]
 8003eec:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003ef0:	e792      	b.n	8003e18 <USBH_MSC_BOT_Process+0x44>
    else if(URB_Status == USBH_URB_NOTREADY)
 8003ef2:	2802      	cmp	r0, #2
 8003ef4:	d101      	bne.n	8003efa <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8003ef6:	2305      	movs	r3, #5
 8003ef8:	e7b2      	b.n	8003e60 <USBH_MSC_BOT_Process+0x8c>
    else if(URB_Status == USBH_URB_STALL)
 8003efa:	2805      	cmp	r0, #5
 8003efc:	d1ce      	bne.n	8003e9c <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8003efe:	230a      	movs	r3, #10
 8003f00:	e7ae      	b.n	8003e60 <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkReceiveData (phost,
 8003f02:	7923      	ldrb	r3, [r4, #4]
 8003f04:	220d      	movs	r2, #13
 8003f06:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8003f0a:	f000 fe2b 	bl	8004b64 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8003f0e:	2308      	movs	r3, #8
 8003f10:	e7a6      	b.n	8003e60 <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8003f12:	7921      	ldrb	r1, [r4, #4]
 8003f14:	f003 ff12 	bl	8007d3c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003f18:	2801      	cmp	r0, #1
 8003f1a:	d1c1      	bne.n	8003ea0 <USBH_MSC_BOT_Process+0xcc>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003f1c:	f8d6 3374 	ldr.w	r3, [r6, #884]	; 0x374
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8003f20:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 8003f24:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003f28:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	7921      	ldrb	r1, [r4, #4]
 8003f2e:	f003 fec1 	bl	8007cb4 <USBH_LL_GetLastXferSize>
 8003f32:	280d      	cmp	r0, #13
 8003f34:	d137      	bne.n	8003fa6 <USBH_MSC_BOT_Process+0x1d2>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8003f36:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003f38:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <USBH_MSC_BOT_Process+0x1d8>)
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d133      	bne.n	8003fa6 <USBH_MSC_BOT_Process+0x1d2>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8003f3e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d12f      	bne.n	8003fa6 <USBH_MSC_BOT_Process+0x1d2>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8003f46:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
        status = USBH_OK;
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2002      	movne	r0, #2
 8003f50:	2000      	moveq	r0, #0
 8003f52:	e77c      	b.n	8003e4e <USBH_MSC_BOT_Process+0x7a>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8003f54:	79e1      	ldrb	r1, [r4, #7]
 8003f56:	f000 fda8 	bl	8004aaa <USBH_ClrFeature>
    if (error == USBH_OK)
 8003f5a:	b908      	cbnz	r0, 8003f60 <USBH_MSC_BOT_Process+0x18c>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	e77f      	b.n	8003e60 <USBH_MSC_BOT_Process+0x8c>
    else if (error == USBH_UNRECOVERED_ERROR)
 8003f60:	2804      	cmp	r0, #4
 8003f62:	d19b      	bne.n	8003e9c <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8003f64:	230b      	movs	r3, #11
 8003f66:	e77b      	b.n	8003e60 <USBH_MSC_BOT_Process+0x8c>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8003f68:	79a1      	ldrb	r1, [r4, #6]
 8003f6a:	f000 fd9e 	bl	8004aaa <USBH_ClrFeature>
    if ( error == USBH_OK)
 8003f6e:	4605      	mov	r5, r0
 8003f70:	b980      	cbnz	r0, 8003f94 <USBH_MSC_BOT_Process+0x1c0>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 8003f72:	7961      	ldrb	r1, [r4, #5]
 8003f74:	4630      	mov	r0, r6
 8003f76:	f003 ff01 	bl	8007d7c <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8003f7a:	f1c0 0201 	rsb	r2, r0, #1
 8003f7e:	7961      	ldrb	r1, [r4, #5]
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	4630      	mov	r0, r6
 8003f84:	f003 feeb 	bl	8007d5e <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 8003f88:	462a      	mov	r2, r5
 8003f8a:	7921      	ldrb	r1, [r4, #4]
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f003 fee6 	bl	8007d5e <USBH_LL_SetToggle>
 8003f92:	e787      	b.n	8003ea4 <USBH_MSC_BOT_Process+0xd0>
    else if (error == USBH_UNRECOVERED_ERROR)
 8003f94:	2804      	cmp	r0, #4
 8003f96:	e7e4      	b.n	8003f62 <USBH_MSC_BOT_Process+0x18e>
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8003f98:	f7ff fef4 	bl	8003d84 <USBH_MSC_BOT_REQ_Reset>
    if ( status == USBH_OK)
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	f47f af56 	bne.w	8003e4e <USBH_MSC_BOT_Process+0x7a>
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e749      	b.n	8003e3a <USBH_MSC_BOT_Process+0x66>
        status = USBH_FAIL;
 8003fa6:	2002      	movs	r0, #2
 8003fa8:	e751      	b.n	8003e4e <USBH_MSC_BOT_Process+0x7a>
 8003faa:	bf00      	nop
 8003fac:	53425355 	.word	0x53425355

08003fb0 <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003fb0:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8003fb4:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003fb6:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8003fb8:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003fbc:	2d01      	cmp	r5, #1
 8003fbe:	d003      	beq.n	8003fc8 <USBH_MSC_SCSI_TestUnitReady+0x18>
 8003fc0:	2d02      	cmp	r5, #2
 8003fc2:	d017      	beq.n	8003ff4 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8003fc4:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8003fc8:	2600      	movs	r6, #0
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003fca:	230a      	movs	r3, #10
 8003fcc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8003fd0:	65e6      	str	r6, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8003fd2:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	4631      	mov	r1, r6
 8003fda:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8003fde:	f004 f8ad 	bl	800813c <memset>
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003fe2:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 8003fe4:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003fe8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003fec:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    error = USBH_BUSY; 
 8003ff0:	4628      	mov	r0, r5
    break;
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
}
 8003ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8003ff8:	f7ff beec 	b.w	8003dd4 <USBH_MSC_BOT_Process>

08003ffc <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003ffc:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8004000:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004002:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8004004:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8004008:	2d01      	cmp	r5, #1
{
 800400a:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 800400c:	d003      	beq.n	8004016 <USBH_MSC_SCSI_ReadCapacity+0x1a>
 800400e:	2d02      	cmp	r5, #2
 8004010:	d01c      	beq.n	800404c <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8004012:	2001      	movs	r0, #1
  default:
    break;
  }
  
  return error;
}
 8004014:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8004016:	2308      	movs	r3, #8
 8004018:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8004020:	230a      	movs	r3, #10
 8004022:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8004026:	2210      	movs	r2, #16
 8004028:	2100      	movs	r1, #0
 800402a:	f104 0063 	add.w	r0, r4, #99	; 0x63
 800402e:	f004 f885 	bl	800813c <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 8004032:	2325      	movs	r3, #37	; 0x25
 8004034:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8004038:	2302      	movs	r3, #2
 800403a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 800403e:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004042:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8004046:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800404a:	e7e2      	b.n	8004012 <USBH_MSC_SCSI_ReadCapacity+0x16>
    error = USBH_MSC_BOT_Process(phost, lun);
 800404c:	f7ff fec2 	bl	8003dd4 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8004050:	2800      	cmp	r0, #0
 8004052:	d1df      	bne.n	8004014 <USBH_MSC_SCSI_ReadCapacity+0x18>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8004054:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8004058:	784b      	ldrb	r3, [r1, #1]
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 800405a:	788a      	ldrb	r2, [r1, #2]
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 800405c:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 800405e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004062:	78ca      	ldrb	r2, [r1, #3]
 8004064:	4313      	orrs	r3, r2
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8004066:	780a      	ldrb	r2, [r1, #0]
 8004068:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 800406c:	6033      	str	r3, [r6, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 800406e:	798a      	ldrb	r2, [r1, #6]
 8004070:	79cb      	ldrb	r3, [r1, #7]
 8004072:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004076:	80b3      	strh	r3, [r6, #4]
 8004078:	bd70      	pop	{r4, r5, r6, pc}

0800407a <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 800407a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800407c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8004080:	69dc      	ldr	r4, [r3, #28]
  switch(MSC_Handle->hbot.cmd_state)
 8004082:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8004086:	2d01      	cmp	r5, #1
{
 8004088:	460f      	mov	r7, r1
 800408a:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 800408c:	d003      	beq.n	8004096 <USBH_MSC_SCSI_Inquiry+0x1c>
 800408e:	2d02      	cmp	r5, #2
 8004090:	d027      	beq.n	80040e2 <USBH_MSC_SCSI_Inquiry+0x68>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8004092:	2502      	movs	r5, #2
 8004094:	e023      	b.n	80040de <USBH_MSC_SCSI_Inquiry+0x64>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800409c:	230a      	movs	r3, #10
 800409e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80040a8:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 80040ac:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 80040b0:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 80040b4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
        
    MSC_Handle->hbot.state = BOT_SEND_CBW;

    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80040b8:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80040ba:	2224      	movs	r2, #36	; 0x24
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 80040bc:	2112      	movs	r1, #18
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 80040be:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80040c0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 80040c4:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80040c8:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 80040ca:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 80040ce:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 80040d2:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80040d6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 80040da:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  default:
    break;
  }
  
  return error;
}
 80040de:	4628      	mov	r0, r5
 80040e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 80040e2:	f7ff fe77 	bl	8003dd4 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 80040e6:	4605      	mov	r5, r0
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d1f8      	bne.n	80040de <USBH_MSC_SCSI_Inquiry+0x64>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80040ec:	4601      	mov	r1, r0
 80040ee:	2222      	movs	r2, #34	; 0x22
 80040f0:	4630      	mov	r0, r6
 80040f2:	f004 f823 	bl	800813c <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 80040f6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 8004102:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	7033      	strb	r3, [r6, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 800410c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	09db      	lsrs	r3, r3, #7
 8004114:	70b3      	strb	r3, [r6, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 8004116:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800411a:	f852 3f08 	ldr.w	r3, [r2, #8]!
 800411e:	f8c6 3003 	str.w	r3, [r6, #3]
 8004122:	6853      	ldr	r3, [r2, #4]
 8004124:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 8004128:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800412c:	3310      	adds	r3, #16
 800412e:	f106 020c 	add.w	r2, r6, #12
 8004132:	f103 0110 	add.w	r1, r3, #16
 8004136:	f853 0b04 	ldr.w	r0, [r3], #4
 800413a:	f842 0b04 	str.w	r0, [r2], #4
 800413e:	428b      	cmp	r3, r1
 8004140:	d1f9      	bne.n	8004136 <USBH_MSC_SCSI_Inquiry+0xbc>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 8004142:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f8c6 301d 	str.w	r3, [r6, #29]
 800414c:	e7c7      	b.n	80040de <USBH_MSC_SCSI_Inquiry+0x64>

0800414e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 800414e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004150:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8004154:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8004156:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800415a:	2d01      	cmp	r5, #1
{
 800415c:	460f      	mov	r7, r1
 800415e:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 8004160:	d003      	beq.n	800416a <USBH_MSC_SCSI_RequestSense+0x1c>
 8004162:	2d02      	cmp	r5, #2
 8004164:	d029      	beq.n	80041ba <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8004166:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 8004168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800416a:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800416c:	260e      	movs	r6, #14
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800416e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8004172:	230a      	movs	r3, #10
 8004174:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8004178:	65e6      	str	r6, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800417a:	2210      	movs	r2, #16
 800417c:	2100      	movs	r1, #0
 800417e:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8004182:	f003 ffdb 	bl	800813c <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8004186:	2303      	movs	r3, #3
 8004188:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 800418c:	2300      	movs	r3, #0
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 800418e:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8004190:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 8004194:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 8004198:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800419c:	2302      	movs	r3, #2
 800419e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 80041a2:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 80041a6:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80041aa:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80041ae:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 80041b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 80041b6:	4628      	mov	r0, r5
    break;
 80041b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 80041ba:	f7ff fe0b 	bl	8003dd4 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 80041be:	2800      	cmp	r0, #0
 80041c0:	d1d2      	bne.n	8004168 <USBH_MSC_SCSI_RequestSense+0x1a>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 80041c2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80041c6:	789b      	ldrb	r3, [r3, #2]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	7033      	strb	r3, [r6, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80041ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80041d2:	7b1b      	ldrb	r3, [r3, #12]
 80041d4:	7073      	strb	r3, [r6, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80041d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80041da:	7b5b      	ldrb	r3, [r3, #13]
 80041dc:	70b3      	strb	r3, [r6, #2]
 80041de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041e0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80041e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041e2:	461e      	mov	r6, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80041e4:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 80041e8:	9201      	str	r2, [sp, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80041ea:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 80041ec:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80041f0:	2d01      	cmp	r5, #1
 80041f2:	d003      	beq.n	80041fc <USBH_MSC_SCSI_Write+0x1c>
 80041f4:	2d02      	cmp	r5, #2
 80041f6:	d034      	beq.n	8004262 <USBH_MSC_SCSI_Write+0x82>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80041f8:	2002      	movs	r0, #2
 80041fa:	e030      	b.n	800425e <USBH_MSC_SCSI_Write+0x7e>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 80041fc:	9a06      	ldr	r2, [sp, #24]
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80041fe:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8004200:	0252      	lsls	r2, r2, #9
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8004202:	2100      	movs	r1, #0
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8004204:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8004206:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800420a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800420e:	2210      	movs	r2, #16
 8004210:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8004214:	f003 ff92 	bl	800813c <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10; 
 8004218:	232a      	movs	r3, #42	; 0x2a
 800421a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    
    /*logical block address*/
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 800421e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004222:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8004226:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800422a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 800422e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004232:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 8004236:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800423a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    
    
    /*Transfer length */
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 800423e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004242:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8004246:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800424a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800424e:	2302      	movs	r3, #2
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004250:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8004254:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8004258:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 800425c:	4628      	mov	r0, r5
  default:
    break;
  }
  
  return error;
}
 800425e:	b002      	add	sp, #8
 8004260:	bd70      	pop	{r4, r5, r6, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8004262:	f7ff fdb7 	bl	8003dd4 <USBH_MSC_BOT_Process>
    break;
 8004266:	e7fa      	b.n	800425e <USBH_MSC_SCSI_Write+0x7e>

08004268 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8004268:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800426a:	461e      	mov	r6, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800426c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8004270:	9201      	str	r2, [sp, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004272:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8004274:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8004278:	2d01      	cmp	r5, #1
 800427a:	d003      	beq.n	8004284 <USBH_MSC_SCSI_Read+0x1c>
 800427c:	2d02      	cmp	r5, #2
 800427e:	d035      	beq.n	80042ec <USBH_MSC_SCSI_Read+0x84>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8004280:	2002      	movs	r0, #2
 8004282:	e031      	b.n	80042e8 <USBH_MSC_SCSI_Read+0x80>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8004284:	9a06      	ldr	r2, [sp, #24]
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8004286:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8004288:	0252      	lsls	r2, r2, #9
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800428a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800428e:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8004290:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8004292:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8004296:	2210      	movs	r2, #16
 8004298:	2100      	movs	r1, #0
 800429a:	f104 0063 	add.w	r0, r4, #99	; 0x63
 800429e:	f003 ff4d 	bl	800813c <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10; 
 80042a2:	2328      	movs	r3, #40	; 0x28
 80042a4:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    
    /*logical block address*/
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 80042a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80042ac:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 80042b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80042b4:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 80042b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80042bc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 80042c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80042c4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    
    
    /*Transfer length */
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 80042c8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80042cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 80042d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80042d4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80042d8:	2302      	movs	r3, #2
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80042da:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80042de:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 80042e2:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 80042e6:	4628      	mov	r0, r5
  default:
    break;
  }
  
  return error;
}
 80042e8:	b002      	add	sp, #8
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 80042ec:	f7ff fd72 	bl	8003dd4 <USBH_MSC_BOT_Process>
    break;
 80042f0:	e7fa      	b.n	80042e8 <USBH_MSC_SCSI_Read+0x80>

080042f2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80042f2:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 80042f6:	f500 726e 	add.w	r2, r0, #952	; 0x3b8
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 80042fa:	2100      	movs	r1, #0
 80042fc:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8004300:	4293      	cmp	r3, r2
 8004302:	d1fb      	bne.n	80042fc <DeInitStateMachine+0xa>
 8004304:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8004308:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8004312:	4291      	cmp	r1, r2
 8004314:	d1fb      	bne.n	800430e <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8004316:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8004318:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 800431a:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800431c:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800431e:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 8004320:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  phost->Control.state = CTRL_SETUP;
 8004324:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8004326:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 8004328:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800432a:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800432e:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 8004332:	2000      	movs	r0, #0
 8004334:	4770      	bx	lr

08004336 <USBH_Init>:
{
 8004336:	b538      	push	{r3, r4, r5, lr}
 8004338:	460d      	mov	r5, r1
  if(phost == NULL)
 800433a:	4604      	mov	r4, r0
 800433c:	b180      	cbz	r0, 8004360 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 800433e:	2300      	movs	r3, #0
  phost->id = id;
 8004340:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  phost->pActiveClass = NULL;
 8004344:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 8004348:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 800434c:	f7ff ffd1 	bl	80042f2 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8004350:	b10d      	cbz	r5, 8004356 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8004352:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  USBH_LL_Init(phost);
 8004356:	4620      	mov	r0, r4
 8004358:	f003 fc48 	bl	8007bec <USBH_LL_Init>
  return USBH_OK;
 800435c:	2000      	movs	r0, #0
 800435e:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL; 
 8004360:	2002      	movs	r0, #2
}
 8004362:	bd38      	pop	{r3, r4, r5, pc}

08004364 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 8004364:	b149      	cbz	r1, 800437a <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004366:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800436a:	b933      	cbnz	r3, 800437a <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800436c:	2201      	movs	r2, #1
 800436e:	f8c0 2378 	str.w	r2, [r0, #888]	; 0x378
 8004372:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
      status = USBH_OK;
 8004376:	4618      	mov	r0, r3
 8004378:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 800437a:	2002      	movs	r0, #2
  }
  
  return status;
}
 800437c:	4770      	bx	lr

0800437e <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800437e:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 8004382:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8004384:	bf86      	itte	hi
 8004386:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 800438a:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 800438c:	2002      	movls	r0, #2
  }
  return status;  
}
 800438e:	4770      	bx	lr

08004390 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004390:	b530      	push	{r4, r5, lr}
 8004392:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8004394:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 8004398:	428d      	cmp	r5, r1
 800439a:	d001      	beq.n	80043a0 <USBH_FindInterface+0x10>
 800439c:	29ff      	cmp	r1, #255	; 0xff
 800439e:	d10d      	bne.n	80043bc <USBH_FindInterface+0x2c>
 80043a0:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 80043a4:	4295      	cmp	r5, r2
 80043a6:	d001      	beq.n	80043ac <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 80043a8:	2aff      	cmp	r2, #255	; 0xff
 80043aa:	d107      	bne.n	80043bc <USBH_FindInterface+0x2c>
 80043ac:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 80043b0:	429d      	cmp	r5, r3
 80043b2:	d101      	bne.n	80043b8 <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 80043b4:	b2e0      	uxtb	r0, r4
 80043b6:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 80043b8:	2bff      	cmp	r3, #255	; 0xff
 80043ba:	d0fb      	beq.n	80043b4 <USBH_FindInterface+0x24>
 80043bc:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80043be:	2c02      	cmp	r4, #2
 80043c0:	f100 001a 	add.w	r0, r0, #26
 80043c4:	d1e6      	bne.n	8004394 <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 80043c6:	20ff      	movs	r0, #255	; 0xff
}
 80043c8:	bd30      	pop	{r4, r5, pc}

080043ca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80043ca:	b510      	push	{r4, lr}
 80043cc:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80043ce:	f003 fc39 	bl	8007c44 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 80043d2:	2101      	movs	r1, #1
 80043d4:	4620      	mov	r0, r4
 80043d6:	f003 fcb5 	bl	8007d44 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 80043da:	2000      	movs	r0, #0
 80043dc:	bd10      	pop	{r4, pc}

080043de <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80043de:	b530      	push	{r4, r5, lr}
 80043e0:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80043e2:	2302      	movs	r3, #2
 80043e4:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 80043e8:	7803      	ldrb	r3, [r0, #0]
{
 80043ea:	4604      	mov	r4, r0
  switch (phost->gState)
 80043ec:	2b0a      	cmp	r3, #10
 80043ee:	d817      	bhi.n	8004420 <USBH_Process+0x42>
 80043f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80043f4:	0016000b 	.word	0x0016000b
 80043f8:	01010019 	.word	0x01010019
 80043fc:	00490016 	.word	0x00490016
 8004400:	00b800e9 	.word	0x00b800e9
 8004404:	00ca00c1 	.word	0x00ca00c1
 8004408:	00f9      	.short	0x00f9
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 800440a:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 800440e:	b13b      	cbz	r3, 8004420 <USBH_Process+0x42>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8004410:	2301      	movs	r3, #1
 8004412:	7003      	strb	r3, [r0, #0]
      USBH_Delay(200); 
 8004414:	20c8      	movs	r0, #200	; 0xc8
 8004416:	f003 fcbf 	bl	8007d98 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800441a:	4620      	mov	r0, r4
 800441c:	f003 fc3c 	bl	8007c98 <USBH_LL_ResetPort>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 8004420:	2000      	movs	r0, #0
 8004422:	b007      	add	sp, #28
 8004424:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 8004426:	2064      	movs	r0, #100	; 0x64
 8004428:	f003 fcb6 	bl	8007d98 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800442c:	4620      	mov	r0, r4
 800442e:	f003 fc25 	bl	8007c7c <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8004432:	2305      	movs	r3, #5
 8004434:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8004436:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 800443a:	2100      	movs	r1, #0
 800443c:	4620      	mov	r0, r4
 800443e:	f000 fbb5 	bl	8004bac <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8004442:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8004444:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8004446:	4620      	mov	r0, r4
 8004448:	f000 fbb0 	bl	8004bac <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 800444c:	79a2      	ldrb	r2, [r4, #6]
 800444e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8004452:	7120      	strb	r0, [r4, #4]
 8004454:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8004456:	9202      	str	r2, [sp, #8]
 8004458:	2500      	movs	r5, #0
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800445a:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800445e:	9200      	str	r2, [sp, #0]
 8004460:	9501      	str	r5, [sp, #4]
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	4620      	mov	r0, r4
 8004466:	f000 fb8d 	bl	8004b84 <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800446a:	79a2      	ldrb	r2, [r4, #6]
 800446c:	9202      	str	r2, [sp, #8]
 800446e:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8004472:	9200      	str	r2, [sp, #0]
 8004474:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004478:	7961      	ldrb	r1, [r4, #5]
 800447a:	9501      	str	r5, [sp, #4]
 800447c:	462a      	mov	r2, r5
 800447e:	4620      	mov	r0, r4
 8004480:	f000 fb80 	bl	8004b84 <USBH_OpenPipe>
 8004484:	e7cc      	b.n	8004420 <USBH_Process+0x42>
  switch (phost->EnumState)
 8004486:	7843      	ldrb	r3, [r0, #1]
 8004488:	2b07      	cmp	r3, #7
 800448a:	d8c9      	bhi.n	8004420 <USBH_Process+0x42>
 800448c:	e8df f003 	tbb	[pc, r3]
 8004490:	2d1c1404 	.word	0x2d1c1404
 8004494:	55483c34 	.word	0x55483c34
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8004498:	2108      	movs	r1, #8
 800449a:	f000 f9d3 	bl	8004844 <USBH_Get_DevDesc>
 800449e:	4605      	mov	r5, r0
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d1bd      	bne.n	8004420 <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80044a4:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80044a6:	f894 2327 	ldrb.w	r2, [r4, #807]	; 0x327
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80044aa:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 80044ac:	7921      	ldrb	r1, [r4, #4]
 80044ae:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80044b2:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 80044b4:	9202      	str	r2, [sp, #8]
 80044b6:	e7d0      	b.n	800445a <USBH_Process+0x7c>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80044b8:	2112      	movs	r1, #18
 80044ba:	f000 f9c3 	bl	8004844 <USBH_Get_DevDesc>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d1ae      	bne.n	8004420 <USBH_Process+0x42>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 80044c2:	2302      	movs	r3, #2
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 80044c4:	7063      	strb	r3, [r4, #1]
 80044c6:	e7ab      	b.n	8004420 <USBH_Process+0x42>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80044c8:	2101      	movs	r1, #1
 80044ca:	f000 fad2 	bl	8004a72 <USBH_SetAddress>
 80044ce:	4605      	mov	r5, r0
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d1a5      	bne.n	8004420 <USBH_Process+0x42>
      USBH_Delay(2);
 80044d4:	2002      	movs	r0, #2
 80044d6:	f003 fc5f 	bl	8007d98 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 80044da:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 80044dc:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 80044de:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 80044e0:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 80044e4:	7921      	ldrb	r1, [r4, #4]
 80044e6:	79a2      	ldrb	r2, [r4, #6]
 80044e8:	e7e4      	b.n	80044b4 <USBH_Process+0xd6>
    if ( USBH_Get_CfgDesc(phost, 
 80044ea:	2109      	movs	r1, #9
 80044ec:	f000 fa03 	bl	80048f6 <USBH_Get_CfgDesc>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d195      	bne.n	8004420 <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 80044f4:	2304      	movs	r3, #4
 80044f6:	e7e5      	b.n	80044c4 <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 80044f8:	f8b0 1334 	ldrh.w	r1, [r0, #820]	; 0x334
 80044fc:	f000 f9fb 	bl	80048f6 <USBH_Get_CfgDesc>
 8004500:	2800      	cmp	r0, #0
 8004502:	d18d      	bne.n	8004420 <USBH_Process+0x42>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8004504:	2305      	movs	r3, #5
 8004506:	e7dd      	b.n	80044c4 <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8004508:	f890 132e 	ldrb.w	r1, [r0, #814]	; 0x32e
 800450c:	b131      	cbz	r1, 800451c <USBH_Process+0x13e>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 800450e:	23ff      	movs	r3, #255	; 0xff
 8004510:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8004514:	f000 fa86 	bl	8004a24 <USBH_Get_StringDesc>
 8004518:	2800      	cmp	r0, #0
 800451a:	d181      	bne.n	8004420 <USBH_Process+0x42>
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800451c:	2306      	movs	r3, #6
 800451e:	e7d1      	b.n	80044c4 <USBH_Process+0xe6>
#endif       
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8004520:	f890 132f 	ldrb.w	r1, [r0, #815]	; 0x32f
 8004524:	b139      	cbz	r1, 8004536 <USBH_Process+0x158>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8004526:	23ff      	movs	r3, #255	; 0xff
 8004528:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800452c:	f000 fa7a 	bl	8004a24 <USBH_Get_StringDesc>
 8004530:	2800      	cmp	r0, #0
 8004532:	f47f af75 	bne.w	8004420 <USBH_Process+0x42>
                               phost->device.Data, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 8004536:	2307      	movs	r3, #7
 8004538:	e7c4      	b.n	80044c4 <USBH_Process+0xe6>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 800453a:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 800453e:	b139      	cbz	r1, 8004550 <USBH_Process+0x172>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8004540:	23ff      	movs	r3, #255	; 0xff
 8004542:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8004546:	f000 fa6d 	bl	8004a24 <USBH_Get_StringDesc>
 800454a:	2800      	cmp	r0, #0
 800454c:	f47f af68 	bne.w	8004420 <USBH_Process+0x42>
      phost->device.current_interface = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 8004556:	f894 3331 	ldrb.w	r3, [r4, #817]	; 0x331
 800455a:	2b01      	cmp	r3, #1
 800455c:	d009      	beq.n	8004572 <USBH_Process+0x194>
        phost->gState  = HOST_INPUT; 
 800455e:	2307      	movs	r3, #7
      phost->gState  = HOST_ABORT_STATE;
 8004560:	7023      	strb	r3, [r4, #0]
 8004562:	e75d      	b.n	8004420 <USBH_Process+0x42>
      if(phost->pUser != NULL)
 8004564:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8004568:	2b00      	cmp	r3, #0
 800456a:	f43f af59 	beq.w	8004420 <USBH_Process+0x42>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800456e:	2101      	movs	r1, #1
 8004570:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004572:	2308      	movs	r3, #8
 8004574:	e7f4      	b.n	8004560 <USBH_Process+0x182>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004576:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
 800457a:	f000 fa88 	bl	8004a8e <USBH_SetCfg>
 800457e:	2800      	cmp	r0, #0
 8004580:	f47f af4e 	bne.w	8004420 <USBH_Process+0x42>
      phost->gState  = HOST_CHECK_CLASS;
 8004584:	2309      	movs	r3, #9
 8004586:	e7eb      	b.n	8004560 <USBH_Process+0x182>
    if(phost->ClassNumber == 0)
 8004588:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800458c:	2b00      	cmp	r3, #0
 800458e:	f43f af47 	beq.w	8004420 <USBH_Process+0x42>
      phost->pActiveClass = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004598:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
 800459c:	f890 2341 	ldrb.w	r2, [r0, #833]	; 0x341
 80045a0:	7919      	ldrb	r1, [r3, #4]
 80045a2:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 80045a4:	bf08      	it	eq
 80045a6:	f8c0 3374 	streq.w	r3, [r0, #884]	; 0x374
      if(phost->pActiveClass != NULL)
 80045aa:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80045ae:	b1c3      	cbz	r3, 80045e2 <USBH_Process+0x204>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	4798      	blx	r3
 80045b4:	b9a8      	cbnz	r0, 80045e2 <USBH_Process+0x204>
          phost->gState  = HOST_CLASS_REQUEST; 
 80045b6:	2306      	movs	r3, #6
 80045b8:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 80045ba:	2103      	movs	r1, #3
 80045bc:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80045c0:	4620      	mov	r0, r4
 80045c2:	4798      	blx	r3
 80045c4:	e72c      	b.n	8004420 <USBH_Process+0x42>
    if(phost->pActiveClass != NULL)
 80045c6:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80045ca:	b153      	cbz	r3, 80045e2 <USBH_Process+0x204>
      status = phost->pActiveClass->Requests(phost);
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	4798      	blx	r3
 80045d0:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 80045d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f47f af21 	bne.w	8004420 <USBH_Process+0x42>
        phost->gState  = HOST_CLASS;        
 80045de:	230a      	movs	r3, #10
 80045e0:	e7be      	b.n	8004560 <USBH_Process+0x182>
      phost->gState  = HOST_ABORT_STATE;
 80045e2:	230c      	movs	r3, #12
 80045e4:	e7bc      	b.n	8004560 <USBH_Process+0x182>
    if(phost->pActiveClass != NULL)
 80045e6:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f43f af18 	beq.w	8004420 <USBH_Process+0x42>
      phost->pActiveClass->BgndProcess(phost);
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4798      	blx	r3
 80045f4:	e714      	b.n	8004420 <USBH_Process+0x42>
    DeInitStateMachine(phost);  
 80045f6:	f7ff fe7c 	bl	80042f2 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 80045fa:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f43f af0e 	beq.w	8004420 <USBH_Process+0x42>
      phost->pActiveClass->DeInit(phost); 
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	4620      	mov	r0, r4
 8004608:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 return USBH_OK;  
 8004610:	e706      	b.n	8004420 <USBH_Process+0x42>

08004612 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8004612:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
 8004616:	4770      	bx	lr

08004618 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 8004618:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 800461c:	3201      	adds	r2, #1
 800461e:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8004622:	7802      	ldrb	r2, [r0, #0]
 8004624:	2a0a      	cmp	r2, #10
 8004626:	d104      	bne.n	8004632 <USBH_LL_IncTimer+0x1a>
 8004628:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 800462c:	b10b      	cbz	r3, 8004632 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	4718      	bx	r3
 8004632:	4770      	bx	lr

08004634 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8004634:	7802      	ldrb	r2, [r0, #0]
{
 8004636:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8004638:	b94a      	cbnz	r2, 800464e <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
    
    if(phost->pUser != NULL)
 800463a:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
    phost->device.is_connected = 1;
 800463e:	2201      	movs	r2, #1
 8004640:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8004644:	b10b      	cbz	r3, 800464a <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8004646:	2104      	movs	r1, #4
 8004648:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 800464a:	2000      	movs	r0, #0
 800464c:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 800464e:	7802      	ldrb	r2, [r0, #0]
 8004650:	2a01      	cmp	r2, #1
    phost->gState = HOST_DEV_ATTACHED ;
 8004652:	bf04      	itt	eq
 8004654:	2202      	moveq	r2, #2
 8004656:	7002      	strbeq	r2, [r0, #0]
 8004658:	e7f7      	b.n	800464a <USBH_LL_Connect+0x16>

0800465a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800465a:	b510      	push	{r4, lr}
 800465c:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 800465e:	f003 faff 	bl	8007c60 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8004662:	7921      	ldrb	r1, [r4, #4]
 8004664:	4620      	mov	r0, r4
 8004666:	f000 fab9 	bl	8004bdc <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 800466a:	7961      	ldrb	r1, [r4, #5]
 800466c:	4620      	mov	r0, r4
 800466e:	f000 fab5 	bl	8004bdc <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8004672:	2300      	movs	r3, #0
 8004674:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8004678:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800467c:	b113      	cbz	r3, 8004684 <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800467e:	2105      	movs	r1, #5
 8004680:	4620      	mov	r0, r4
 8004682:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004684:	4620      	mov	r0, r4
 8004686:	f003 fadd 	bl	8007c44 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 800468a:	2303      	movs	r3, #3
 800468c:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 800468e:	2000      	movs	r0, #0
 8004690:	bd10      	pop	{r4, pc}

08004692 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8004692:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004694:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8004696:	7880      	ldrb	r0, [r0, #2]
 8004698:	2801      	cmp	r0, #1
 800469a:	d003      	beq.n	80046a4 <USBH_CtlReq+0x12>
 800469c:	2802      	cmp	r0, #2
 800469e:	d008      	beq.n	80046b2 <USBH_CtlReq+0x20>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80046a0:	2001      	movs	r0, #1
 80046a2:	e004      	b.n	80046ae <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 80046a4:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 80046a6:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 80046a8:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;  
 80046aa:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 80046ac:	70a3      	strb	r3, [r4, #2]
}
 80046ae:	b003      	add	sp, #12
 80046b0:	bd30      	pop	{r4, r5, pc}
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 80046b2:	7e23      	ldrb	r3, [r4, #24]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	2b0a      	cmp	r3, #10
 80046b8:	d8f2      	bhi.n	80046a0 <USBH_CtlReq+0xe>
 80046ba:	e8df f003 	tbb	[pc, r3]
 80046be:	0f06      	.short	0x0f06
 80046c0:	4a3d3126 	.word	0x4a3d3126
 80046c4:	897c6b60 	.word	0x897c6b60
 80046c8:	92          	.byte	0x92
 80046c9:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 80046ca:	7962      	ldrb	r2, [r4, #5]
 80046cc:	f104 0110 	add.w	r1, r4, #16
 80046d0:	4620      	mov	r0, r4
 80046d2:	f000 f9f8 	bl	8004ac6 <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 80046d6:	2302      	movs	r3, #2
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 80046d8:	7623      	strb	r3, [r4, #24]
 80046da:	e7e1      	b.n	80046a0 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 80046dc:	7961      	ldrb	r1, [r4, #5]
 80046de:	4620      	mov	r0, r4
 80046e0:	f003 fb2c 	bl	8007d3c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80046e4:	2801      	cmp	r0, #1
 80046e6:	d123      	bne.n	8004730 <USBH_CtlReq+0x9e>
      if (phost->Control.setup.b.wLength.w != 0 )
 80046e8:	8ae2      	ldrh	r2, [r4, #22]
 80046ea:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80046ee:	b132      	cbz	r2, 80046fe <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da02      	bge.n	80046fa <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 80046f4:	2303      	movs	r3, #3
 80046f6:	7623      	strb	r3, [r4, #24]
 80046f8:	e7d9      	b.n	80046ae <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 80046fa:	2305      	movs	r3, #5
 80046fc:	e7ec      	b.n	80046d8 <USBH_CtlReq+0x46>
        if (direction == USB_D2H)
 80046fe:	2b00      	cmp	r3, #0
 8004700:	da01      	bge.n	8004706 <USBH_CtlReq+0x74>
      phost->Control.state = CTRL_STATUS_OUT;
 8004702:	2309      	movs	r3, #9
 8004704:	e7e8      	b.n	80046d8 <USBH_CtlReq+0x46>
          phost->Control.state = CTRL_STATUS_IN;
 8004706:	2307      	movs	r3, #7
 8004708:	e7e6      	b.n	80046d8 <USBH_CtlReq+0x46>
     phost->Control.timer = phost->Timer;
 800470a:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 800470e:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8004710:	89a2      	ldrh	r2, [r4, #12]
 8004712:	7923      	ldrb	r3, [r4, #4]
 8004714:	68a1      	ldr	r1, [r4, #8]
 8004716:	4620      	mov	r0, r4
 8004718:	f000 f9fd 	bl	8004b16 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800471c:	2304      	movs	r3, #4
 800471e:	e7db      	b.n	80046d8 <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8004720:	7921      	ldrb	r1, [r4, #4]
 8004722:	4620      	mov	r0, r4
 8004724:	f003 fb0a 	bl	8007d3c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004728:	2801      	cmp	r0, #1
 800472a:	d0ea      	beq.n	8004702 <USBH_CtlReq+0x70>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 800472c:	2805      	cmp	r0, #5
 800472e:	d01a      	beq.n	8004766 <USBH_CtlReq+0xd4>
    else if(URB_Status == USBH_URB_ERROR)
 8004730:	2804      	cmp	r0, #4
 8004732:	d1b5      	bne.n	80046a0 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;
 8004734:	230b      	movs	r3, #11
 8004736:	e7cf      	b.n	80046d8 <USBH_CtlReq+0x46>
    }
    break;
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 8004738:	2501      	movs	r5, #1
 800473a:	7963      	ldrb	r3, [r4, #5]
 800473c:	89a2      	ldrh	r2, [r4, #12]
 800473e:	9500      	str	r5, [sp, #0]
 8004740:	68a1      	ldr	r1, [r4, #8]
 8004742:	4620      	mov	r0, r4
 8004744:	f000 f9d0 	bl	8004ae8 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8004748:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 800474c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800474e:	2306      	movs	r3, #6
 8004750:	e7c2      	b.n	80046d8 <USBH_CtlReq+0x46>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8004752:	7961      	ldrb	r1, [r4, #5]
 8004754:	4620      	mov	r0, r4
 8004756:	f003 faf1 	bl	8007d3c <USBH_LL_GetURBState>
    
    if  (URB_Status == USBH_URB_DONE)
 800475a:	2801      	cmp	r0, #1
 800475c:	d0d3      	beq.n	8004706 <USBH_CtlReq+0x74>
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
 800475e:	2805      	cmp	r0, #5
 8004760:	d103      	bne.n	800476a <USBH_CtlReq+0xd8>
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
 8004762:	230c      	movs	r3, #12
 8004764:	7623      	strb	r3, [r4, #24]
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      status = USBH_NOT_SUPPORTED;
 8004766:	2003      	movs	r0, #3
 8004768:	e7a1      	b.n	80046ae <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800476a:	2802      	cmp	r0, #2
 800476c:	d0c5      	beq.n	80046fa <USBH_CtlReq+0x68>
    else if (URB_Status == USBH_URB_ERROR)
 800476e:	2804      	cmp	r0, #4
 8004770:	d196      	bne.n	80046a0 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 8004772:	230b      	movs	r3, #11
 8004774:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8004776:	2301      	movs	r3, #1
 8004778:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 800477a:	2002      	movs	r0, #2
  return status;
 800477c:	e797      	b.n	80046ae <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 800477e:	2200      	movs	r2, #0
 8004780:	7923      	ldrb	r3, [r4, #4]
 8004782:	4611      	mov	r1, r2
 8004784:	4620      	mov	r0, r4
 8004786:	f000 f9c6 	bl	8004b16 <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 800478a:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 800478e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004790:	2308      	movs	r3, #8
 8004792:	e7a1      	b.n	80046d8 <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8004794:	7921      	ldrb	r1, [r4, #4]
 8004796:	4620      	mov	r0, r4
 8004798:	f003 fad0 	bl	8007d3c <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 800479c:	2801      	cmp	r0, #1
 800479e:	d104      	bne.n	80047aa <USBH_CtlReq+0x118>
      phost->RequestState = CMD_SEND;
 80047a0:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 80047a2:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 80047a4:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 80047a6:	7620      	strb	r0, [r4, #24]
 80047a8:	e781      	b.n	80046ae <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 80047aa:	2804      	cmp	r0, #4
 80047ac:	d0c2      	beq.n	8004734 <USBH_CtlReq+0xa2>
     else if(URB_Status == USBH_URB_STALL)
 80047ae:	2805      	cmp	r0, #5
 80047b0:	f47f af76 	bne.w	80046a0 <USBH_CtlReq+0xe>
 80047b4:	e7d7      	b.n	8004766 <USBH_CtlReq+0xd4>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80047b6:	2200      	movs	r2, #0
 80047b8:	2501      	movs	r5, #1
 80047ba:	7963      	ldrb	r3, [r4, #5]
 80047bc:	9500      	str	r5, [sp, #0]
 80047be:	4611      	mov	r1, r2
 80047c0:	4620      	mov	r0, r4
 80047c2:	f000 f991 	bl	8004ae8 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 80047c6:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 80047ca:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80047cc:	230a      	movs	r3, #10
 80047ce:	e783      	b.n	80046d8 <USBH_CtlReq+0x46>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 80047d0:	7961      	ldrb	r1, [r4, #5]
 80047d2:	4620      	mov	r0, r4
 80047d4:	f003 fab2 	bl	8007d3c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80047d8:	2801      	cmp	r0, #1
 80047da:	d0e1      	beq.n	80047a0 <USBH_CtlReq+0x10e>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 80047dc:	2802      	cmp	r0, #2
 80047de:	d1a7      	bne.n	8004730 <USBH_CtlReq+0x9e>
 80047e0:	e78f      	b.n	8004702 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80047e2:	7e63      	ldrb	r3, [r4, #25]
 80047e4:	3301      	adds	r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	7663      	strb	r3, [r4, #25]
 80047ec:	d806      	bhi.n	80047fc <USBH_CtlReq+0x16a>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f003 fa36 	bl	8007c60 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 80047f4:	2001      	movs	r0, #1
 80047f6:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 80047f8:	70a0      	strb	r0, [r4, #2]
 80047fa:	e758      	b.n	80046ae <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80047fc:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8004800:	2106      	movs	r1, #6
 8004802:	4620      	mov	r0, r4
 8004804:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	7663      	strb	r3, [r4, #25]
 800480a:	e7b4      	b.n	8004776 <USBH_CtlReq+0xe4>

0800480c <USBH_GetDescriptor>:
{ 
 800480c:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 800480e:	7884      	ldrb	r4, [r0, #2]
{ 
 8004810:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8004814:	2c01      	cmp	r4, #1
 8004816:	d110      	bne.n	800483a <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004818:	f061 047f 	orn	r4, r1, #127	; 0x7f
 800481c:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 800481e:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8004822:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8004826:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004828:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409;
 800482c:	bf0c      	ite	eq
 800482e:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 8004832:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004834:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0;
 8004836:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length; 
 8004838:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff , length );     
 800483a:	462a      	mov	r2, r5
 800483c:	4619      	mov	r1, r3
}
 800483e:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 8004840:	f7ff bf27 	b.w	8004692 <USBH_CtlReq>

08004844 <USBH_Get_DevDesc>:
{
 8004844:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8004846:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 800484a:	460d      	mov	r5, r1
 800484c:	9100      	str	r1, [sp, #0]
 800484e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004852:	2100      	movs	r1, #0
{
 8004854:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004856:	f7ff ffd9 	bl	800480c <USBH_GetDescriptor>
 800485a:	2800      	cmp	r0, #0
 800485c:	d149      	bne.n	80048f2 <USBH_Get_DevDesc+0xae>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800485e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8004862:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8004866:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800486a:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800486e:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 8004872:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8004876:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800487a:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800487e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8004882:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8004886:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800488a:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800488e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8004892:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  if (length > 8)
 8004896:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8004898:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 800489c:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  if (length > 8)
 80048a0:	d927      	bls.n	80048f2 <USBH_Get_DevDesc+0xae>
    dev_desc->idVendor           = LE16 (buf +  8);
 80048a2:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 80048a6:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 80048aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048ae:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    dev_desc->idProduct          = LE16 (buf + 10);
 80048b2:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
 80048b6:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 80048ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048be:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80048c2:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
 80048c6:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 80048ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048ce:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80048d2:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 80048d6:	f884 332e 	strb.w	r3, [r4, #814]	; 0x32e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80048da:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 80048de:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80048e2:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80048e6:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80048ea:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80048ee:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
}
 80048f2:	b003      	add	sp, #12
 80048f4:	bd30      	pop	{r4, r5, pc}

080048f6 <USBH_Get_CfgDesc>:
{
 80048f6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.CfgDesc_Raw;
 80048fa:	f100 051c 	add.w	r5, r0, #28
{
 80048fe:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 8004900:	9100      	str	r1, [sp, #0]
 8004902:	462b      	mov	r3, r5
 8004904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004908:	2100      	movs	r1, #0
{
 800490a:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800490c:	f7ff ff7e 	bl	800480c <USBH_GetDescriptor>
 8004910:	bb68      	cbnz	r0, 800496e <USBH_Get_CfgDesc+0x78>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004912:	7f23      	ldrb	r3, [r4, #28]
 8004914:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8004918:	7f63      	ldrb	r3, [r4, #29]
 800491a:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800491e:	7fa6      	ldrb	r6, [r4, #30]
 8004920:	7fe3      	ldrb	r3, [r4, #31]
 8004922:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8004926:	f894 3020 	ldrb.w	r3, [r4, #32]
 800492a:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800492e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004932:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004936:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800493a:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800493e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8004942:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004946:	b2b6      	uxth	r6, r6
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8004948:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800494c:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004950:	2f09      	cmp	r7, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8004952:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004956:	d90a      	bls.n	800496e <USBH_Get_CfgDesc+0x78>
 8004958:	4622      	mov	r2, r4
 800495a:	462b      	mov	r3, r5
 800495c:	4686      	mov	lr, r0
 800495e:	2109      	movs	r1, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004960:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8004964:	f1be 0f02 	cmp.w	lr, #2
 8004968:	d001      	beq.n	800496e <USBH_Get_CfgDesc+0x78>
 800496a:	428e      	cmp	r6, r1
 800496c:	d802      	bhi.n	8004974 <USBH_Get_CfgDesc+0x7e>
}
 800496e:	b002      	add	sp, #8
 8004970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004974:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8004976:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004978:	4429      	add	r1, r5
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 800497a:	785d      	ldrb	r5, [r3, #1]
 800497c:	2d04      	cmp	r5, #4
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800497e:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8004980:	d1f0      	bne.n	8004964 <USBH_Get_CfgDesc+0x6e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004982:	781d      	ldrb	r5, [r3, #0]
 8004984:	f882 533c 	strb.w	r5, [r2, #828]	; 0x33c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004988:	785d      	ldrb	r5, [r3, #1]
 800498a:	f882 533d 	strb.w	r5, [r2, #829]	; 0x33d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800498e:	789d      	ldrb	r5, [r3, #2]
 8004990:	f882 533e 	strb.w	r5, [r2, #830]	; 0x33e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004994:	78dd      	ldrb	r5, [r3, #3]
 8004996:	f882 533f 	strb.w	r5, [r2, #831]	; 0x33f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800499a:	791d      	ldrb	r5, [r3, #4]
 800499c:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80049a0:	795d      	ldrb	r5, [r3, #5]
 80049a2:	f882 5341 	strb.w	r5, [r2, #833]	; 0x341
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80049a6:	799d      	ldrb	r5, [r3, #6]
 80049a8:	f882 5342 	strb.w	r5, [r2, #834]	; 0x342
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80049ac:	79dd      	ldrb	r5, [r3, #7]
 80049ae:	f882 5343 	strb.w	r5, [r2, #835]	; 0x343
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80049b2:	7a1d      	ldrb	r5, [r3, #8]
 80049b4:	f882 5344 	strb.w	r5, [r2, #836]	; 0x344
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80049b8:	fb08 f90e 	mul.w	r9, r8, lr
        ep_ix = 0;
 80049bc:	2500      	movs	r5, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80049be:	f892 7340 	ldrb.w	r7, [r2, #832]	; 0x340
 80049c2:	42bd      	cmp	r5, r7
 80049c4:	db03      	blt.n	80049ce <USBH_Get_CfgDesc+0xd8>
 80049c6:	f10e 0e01 	add.w	lr, lr, #1
 80049ca:	321a      	adds	r2, #26
 80049cc:	e7ca      	b.n	8004964 <USBH_Get_CfgDesc+0x6e>
 80049ce:	428e      	cmp	r6, r1
 80049d0:	d9f9      	bls.n	80049c6 <USBH_Get_CfgDesc+0xd0>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80049d2:	781f      	ldrb	r7, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80049d4:	443b      	add	r3, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80049d6:	4439      	add	r1, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80049d8:	785f      	ldrb	r7, [r3, #1]
 80049da:	2f05      	cmp	r7, #5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80049dc:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80049de:	d1ee      	bne.n	80049be <USBH_Get_CfgDesc+0xc8>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80049e0:	1c6f      	adds	r7, r5, #1
 80049e2:	eb09 05c7 	add.w	r5, r9, r7, lsl #3
 80049e6:	4425      	add	r5, r4
 80049e8:	f893 c000 	ldrb.w	ip, [r3]
 80049ec:	f885 c33e 	strb.w	ip, [r5, #830]	; 0x33e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80049f0:	f893 c001 	ldrb.w	ip, [r3, #1]
 80049f4:	f885 c33f 	strb.w	ip, [r5, #831]	; 0x33f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80049f8:	f893 c002 	ldrb.w	ip, [r3, #2]
 80049fc:	f885 c340 	strb.w	ip, [r5, #832]	; 0x340
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004a00:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004a04:	f885 c341 	strb.w	ip, [r5, #833]	; 0x341
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8004a08:	f893 a005 	ldrb.w	sl, [r3, #5]
 8004a0c:	f893 c004 	ldrb.w	ip, [r3, #4]
 8004a10:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 8004a14:	f8a5 c342 	strh.w	ip, [r5, #834]	; 0x342
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8004a18:	f893 c006 	ldrb.w	ip, [r3, #6]
 8004a1c:	f885 c344 	strb.w	ip, [r5, #836]	; 0x344
            ep_ix++;
 8004a20:	b27d      	sxtb	r5, r7
 8004a22:	e7cc      	b.n	80049be <USBH_Get_CfgDesc+0xc8>

08004a24 <USBH_Get_StringDesc>:
{
 8004a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8004a26:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8004a2a:	4614      	mov	r4, r2
 8004a2c:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004a34:	462b      	mov	r3, r5
 8004a36:	2100      	movs	r1, #0
{
 8004a38:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8004a3a:	f7ff fee7 	bl	800480c <USBH_GetDescriptor>
 8004a3e:	b978      	cbnz	r0, 8004a60 <USBH_Get_StringDesc+0x3c>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8004a40:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d10b      	bne.n	8004a60 <USBH_Get_StringDesc+0x3c>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8004a48:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8004a4c:	3b02      	subs	r3, #2
 8004a4e:	42bb      	cmp	r3, r7
 8004a50:	bfa8      	it	ge
 8004a52:	463b      	movge	r3, r7
 8004a54:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 8004a56:	4602      	mov	r2, r0
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d803      	bhi.n	8004a64 <USBH_Get_StringDesc+0x40>
    *pdest = 0; /* mark end of string */  
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	7023      	strb	r3, [r4, #0]
}
 8004a60:	b003      	add	sp, #12
 8004a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8004a64:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 8004a66:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8004a68:	7889      	ldrb	r1, [r1, #2]
 8004a6a:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0; idx < strlength; idx+=2 )
 8004a6e:	b292      	uxth	r2, r2
 8004a70:	e7f2      	b.n	8004a58 <USBH_Get_StringDesc+0x34>

08004a72 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8004a72:	7883      	ldrb	r3, [r0, #2]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d106      	bne.n	8004a86 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004a78:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004a7a:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004a7c:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004a7e:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004a80:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8004a82:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 8004a84:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );
 8004a86:	2200      	movs	r2, #0
 8004a88:	4611      	mov	r1, r2
 8004a8a:	f7ff be02 	b.w	8004692 <USBH_CtlReq>

08004a8e <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8004a8e:	7883      	ldrb	r3, [r0, #2]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d106      	bne.n	8004aa2 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8004a94:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004a96:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8004a98:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004a9a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004a9c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8004a9e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 8004aa0:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );      
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	f7ff bdf4 	b.w	8004692 <USBH_CtlReq>

08004aaa <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8004aaa:	7883      	ldrb	r3, [r0, #2]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d106      	bne.n	8004abe <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8004ab0:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004ab2:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004ab4:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8004ab6:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004ab8:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004aba:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8004abc:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 8004abe:	2200      	movs	r2, #0
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	f7ff bde6 	b.w	8004692 <USBH_CtlReq>

08004ac6 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8004ac6:	b530      	push	{r4, r5, lr}
 8004ac8:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004aca:	2400      	movs	r4, #0
{
 8004acc:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ace:	2308      	movs	r3, #8
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	9101      	str	r1, [sp, #4]
 8004ad4:	9403      	str	r4, [sp, #12]
 8004ad6:	9400      	str	r4, [sp, #0]
 8004ad8:	4623      	mov	r3, r4
 8004ada:	4622      	mov	r2, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	f003 f913 	bl	8007d08 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	b005      	add	sp, #20
 8004ae6:	bd30      	pop	{r4, r5, pc}

08004ae8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8004ae8:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004aea:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004aee:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004af0:	2d00      	cmp	r5, #0
{
 8004af2:	461c      	mov	r4, r3
 8004af4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004af8:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8004afa:	bf18      	it	ne
 8004afc:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004afe:	9303      	str	r3, [sp, #12]
 8004b00:	2301      	movs	r3, #1
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2300      	movs	r3, #0
 8004b06:	9101      	str	r1, [sp, #4]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	f003 f8fc 	bl	8007d08 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 8004b10:	2000      	movs	r0, #0
 8004b12:	b005      	add	sp, #20
 8004b14:	bd30      	pop	{r4, r5, pc}

08004b16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004b16:	b530      	push	{r4, r5, lr}
 8004b18:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b1a:	2400      	movs	r4, #0
{
 8004b1c:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b1e:	9202      	str	r2, [sp, #8]
 8004b20:	2201      	movs	r2, #1
 8004b22:	9101      	str	r1, [sp, #4]
 8004b24:	9403      	str	r4, [sp, #12]
 8004b26:	9200      	str	r2, [sp, #0]
 8004b28:	4623      	mov	r3, r4
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	f003 f8ec 	bl	8007d08 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8004b30:	4620      	mov	r0, r4
 8004b32:	b005      	add	sp, #20
 8004b34:	bd30      	pop	{r4, r5, pc}

08004b36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 8004b36:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004b38:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{ 
 8004b3c:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004b3e:	2d00      	cmp	r5, #0
{ 
 8004b40:	461c      	mov	r4, r3
 8004b42:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b46:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8004b48:	bf18      	it	ne
 8004b4a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	2301      	movs	r3, #1
 8004b50:	9101      	str	r1, [sp, #4]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2302      	movs	r3, #2
 8004b58:	4621      	mov	r1, r4
 8004b5a:	f003 f8d5 	bl	8007d08 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004b5e:	2000      	movs	r0, #0
 8004b60:	b005      	add	sp, #20
 8004b62:	bd30      	pop	{r4, r5, pc}

08004b64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004b64:	b530      	push	{r4, r5, lr}
 8004b66:	b085      	sub	sp, #20
 8004b68:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b6a:	2400      	movs	r4, #0
 8004b6c:	9202      	str	r2, [sp, #8]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	9101      	str	r1, [sp, #4]
 8004b72:	9403      	str	r4, [sp, #12]
 8004b74:	9200      	str	r2, [sp, #0]
 8004b76:	2302      	movs	r3, #2
 8004b78:	4629      	mov	r1, r5
 8004b7a:	f003 f8c5 	bl	8007d08 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 8004b7e:	4620      	mov	r0, r4
 8004b80:	b005      	add	sp, #20
 8004b82:	bd30      	pop	{r4, r5, pc}

08004b84 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8004b86:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004b8a:	9402      	str	r4, [sp, #8]
 8004b8c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004b90:	9401      	str	r4, [sp, #4]
 8004b92:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004b96:	9400      	str	r4, [sp, #0]
 8004b98:	f003 f890 	bl	8007cbc <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bd10      	pop	{r4, pc}

08004ba2 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8004ba2:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004ba4:	f003 f8a2 	bl	8007cec <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 8004ba8:	2000      	movs	r0, #0
 8004baa:	bd08      	pop	{r3, pc}

08004bac <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004bac:	b530      	push	{r4, r5, lr}
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f500 745f 	add.w	r4, r0, #892	; 0x37c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8004bb4:	f854 5b04 	ldr.w	r5, [r4], #4
 8004bb8:	042d      	lsls	r5, r5, #16
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	d408      	bmi.n	8004bd0 <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8004bbe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004bc2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 8004bc6:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8004bc8:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
}
 8004bcc:	b2d0      	uxtb	r0, r2
 8004bce:	bd30      	pop	{r4, r5, pc}
 8004bd0:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 8004bd2:	2b0b      	cmp	r3, #11
 8004bd4:	d1ee      	bne.n	8004bb4 <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 8004bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bda:	e7f7      	b.n	8004bcc <USBH_AllocPipe+0x20>

08004bdc <USBH_FreePipe>:
   if(idx < 11)
 8004bdc:	290a      	cmp	r1, #10
 8004bde:	bf9f      	itttt	ls
 8004be0:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 8004be4:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 8004be8:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8004bec:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
}
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	4770      	bx	lr

08004bf4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <disk_status+0x10>)
 8004bf6:	181a      	adds	r2, r3, r0
 8004bf8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004bfc:	7a10      	ldrb	r0, [r2, #8]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4718      	bx	r3
 8004c04:	2000012c 	.word	0x2000012c

08004c08 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <disk_initialize+0x1c>)
 8004c0a:	5c1a      	ldrb	r2, [r3, r0]
 8004c0c:	b942      	cbnz	r2, 8004c20 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8004c0e:	2201      	movs	r2, #1
 8004c10:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c12:	181a      	adds	r2, r3, r0
 8004c14:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004c18:	7a10      	ldrb	r0, [r2, #8]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4718      	bx	r3
  }
  return stat;
}
 8004c20:	2000      	movs	r0, #0
 8004c22:	4770      	bx	lr
 8004c24:	2000012c 	.word	0x2000012c

08004c28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c28:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c2a:	4c05      	ldr	r4, [pc, #20]	; (8004c40 <disk_read+0x18>)
 8004c2c:	1825      	adds	r5, r4, r0
 8004c2e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004c32:	6860      	ldr	r0, [r4, #4]
 8004c34:	6884      	ldr	r4, [r0, #8]
 8004c36:	7a28      	ldrb	r0, [r5, #8]
 8004c38:	46a4      	mov	ip, r4
  return res;
}
 8004c3a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c3c:	4760      	bx	ip
 8004c3e:	bf00      	nop
 8004c40:	2000012c 	.word	0x2000012c

08004c44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c44:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c46:	4c05      	ldr	r4, [pc, #20]	; (8004c5c <disk_write+0x18>)
 8004c48:	1825      	adds	r5, r4, r0
 8004c4a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004c4e:	6860      	ldr	r0, [r4, #4]
 8004c50:	68c4      	ldr	r4, [r0, #12]
 8004c52:	7a28      	ldrb	r0, [r5, #8]
 8004c54:	46a4      	mov	ip, r4
  return res;
}
 8004c56:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c58:	4760      	bx	ip
 8004c5a:	bf00      	nop
 8004c5c:	2000012c 	.word	0x2000012c

08004c60 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <disk_ioctl+0x18>)
{
 8004c62:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c64:	181c      	adds	r4, r3, r0
 8004c66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004c6a:	7a20      	ldrb	r0, [r4, #8]
 8004c6c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8004c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	4718      	bx	r3
 8004c76:	bf00      	nop
 8004c78:	2000012c 	.word	0x2000012c

08004c7c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8004c7c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8004c7e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8004c80:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8004c82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8004c86:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004c8a:	4770      	bx	lr

08004c8c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004c8c:	0a0b      	lsrs	r3, r1, #8
 8004c8e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c90:	7043      	strb	r3, [r0, #1]
 8004c92:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004c94:	0e09      	lsrs	r1, r1, #24
 8004c96:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004c98:	70c1      	strb	r1, [r0, #3]
 8004c9a:	4770      	bx	lr

08004c9c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c9c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8004c9e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8004ca2:	4290      	cmp	r0, r2
 8004ca4:	d1fb      	bne.n	8004c9e <mem_set+0x2>
}
 8004ca6:	4770      	bx	lr

08004ca8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <chk_lock+0x58>)
 8004caa:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cac:	2500      	movs	r5, #0
 8004cae:	462a      	mov	r2, r5
 8004cb0:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8004cb2:	681e      	ldr	r6, [r3, #0]
 8004cb4:	b1a6      	cbz	r6, 8004ce0 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004cb6:	6807      	ldr	r7, [r0, #0]
 8004cb8:	42be      	cmp	r6, r7
 8004cba:	d112      	bne.n	8004ce2 <chk_lock+0x3a>
 8004cbc:	685f      	ldr	r7, [r3, #4]
 8004cbe:	6886      	ldr	r6, [r0, #8]
 8004cc0:	42b7      	cmp	r7, r6
 8004cc2:	d10e      	bne.n	8004ce2 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8004cc4:	689f      	ldr	r7, [r3, #8]
 8004cc6:	6946      	ldr	r6, [r0, #20]
 8004cc8:	42b7      	cmp	r7, r6
 8004cca:	d10a      	bne.n	8004ce2 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ccc:	b9b1      	cbnz	r1, 8004cfc <chk_lock+0x54>
 8004cce:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8004cd2:	8993      	ldrh	r3, [r2, #12]
 8004cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd8:	bf14      	ite	ne
 8004cda:	2000      	movne	r0, #0
 8004cdc:	2010      	moveq	r0, #16
 8004cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8004ce0:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ce2:	3201      	adds	r2, #1
 8004ce4:	2a02      	cmp	r2, #2
 8004ce6:	f103 0310 	add.w	r3, r3, #16
 8004cea:	d1e2      	bne.n	8004cb2 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004cec:	b10d      	cbz	r5, 8004cf2 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004cee:	2000      	movs	r0, #0
 8004cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004cf2:	2902      	cmp	r1, #2
 8004cf4:	bf0c      	ite	eq
 8004cf6:	2000      	moveq	r0, #0
 8004cf8:	2012      	movne	r0, #18
 8004cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004cfc:	2010      	movs	r0, #16
 8004cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d00:	20000108 	.word	0x20000108

08004d04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d04:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <inc_lock+0x74>)
 8004d06:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8004d08:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8004d0e:	6814      	ldr	r4, [r2, #0]
 8004d10:	42ac      	cmp	r4, r5
 8004d12:	d107      	bne.n	8004d24 <inc_lock+0x20>
 8004d14:	6857      	ldr	r7, [r2, #4]
 8004d16:	6884      	ldr	r4, [r0, #8]
 8004d18:	42a7      	cmp	r7, r4
 8004d1a:	d103      	bne.n	8004d24 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8004d1c:	6897      	ldr	r7, [r2, #8]
 8004d1e:	6944      	ldr	r4, [r0, #20]
 8004d20:	42a7      	cmp	r7, r4
 8004d22:	d01d      	beq.n	8004d60 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d24:	3301      	adds	r3, #1
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	f102 0210 	add.w	r2, r2, #16
 8004d2c:	d1ef      	bne.n	8004d0e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d2e:	6833      	ldr	r3, [r6, #0]
 8004d30:	b113      	cbz	r3, 8004d38 <inc_lock+0x34>
 8004d32:	6933      	ldr	r3, [r6, #16]
 8004d34:	b9eb      	cbnz	r3, 8004d72 <inc_lock+0x6e>
 8004d36:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8004d38:	011c      	lsls	r4, r3, #4
 8004d3a:	1932      	adds	r2, r6, r4
 8004d3c:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8004d3e:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8004d40:	6940      	ldr	r0, [r0, #20]
 8004d42:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8004d44:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8004d46:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8004d48:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d4a:	b979      	cbnz	r1, 8004d6c <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d4c:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8004d50:	8992      	ldrh	r2, [r2, #12]
 8004d52:	3201      	adds	r2, #1
 8004d54:	b292      	uxth	r2, r2
 8004d56:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8004d5a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d5c:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8004d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d60:	2900      	cmp	r1, #0
 8004d62:	d0f3      	beq.n	8004d4c <inc_lock+0x48>
 8004d64:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8004d68:	8992      	ldrh	r2, [r2, #12]
 8004d6a:	b912      	cbnz	r2, 8004d72 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d70:	e7f1      	b.n	8004d56 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d72:	2000      	movs	r0, #0
 8004d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000108 	.word	0x20000108

08004d7c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004d7c:	3801      	subs	r0, #1
 8004d7e:	2801      	cmp	r0, #1
 8004d80:	d80e      	bhi.n	8004da0 <dec_lock+0x24>
		n = Files[i].ctr;
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <dec_lock+0x2c>)
 8004d84:	0103      	lsls	r3, r0, #4
 8004d86:	18d1      	adds	r1, r2, r3
 8004d88:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8004d8a:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8004d8e:	b280      	uxth	r0, r0
 8004d90:	b108      	cbz	r0, 8004d96 <dec_lock+0x1a>
 8004d92:	1e48      	subs	r0, r1, #1
 8004d94:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8004d96:	18d1      	adds	r1, r2, r3
 8004d98:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004d9a:	b918      	cbnz	r0, 8004da4 <dec_lock+0x28>
 8004d9c:	50d0      	str	r0, [r2, r3]
 8004d9e:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004da0:	2002      	movs	r0, #2
 8004da2:	4770      	bx	lr
		res = FR_OK;
 8004da4:	2000      	movs	r0, #0
	}
	return res;
}
 8004da6:	4770      	bx	lr
 8004da8:	20000108 	.word	0x20000108

08004dac <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004dac:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
 8004dae:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004db0:	3b02      	subs	r3, #2
 8004db2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8004db4:	bf3d      	ittte	cc
 8004db6:	8943      	ldrhcc	r3, [r0, #10]
 8004db8:	6b00      	ldrcc	r0, [r0, #48]	; 0x30
 8004dba:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004dbe:	2000      	movcs	r0, #0
}
 8004dc0:	4770      	bx	lr

08004dc2 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004dc2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 8004dc4:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 8004dc6:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004dc8:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	fbb1 f1f3 	udiv	r1, r1, r3
 8004dd0:	8963      	ldrh	r3, [r4, #10]
 8004dd2:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004dd6:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004dd8:	b130      	cbz	r0, 8004de8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004dda:	4281      	cmp	r1, r0
 8004ddc:	d302      	bcc.n	8004de4 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8004dde:	1a09      	subs	r1, r1, r0
 8004de0:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004de2:	e7f8      	b.n	8004dd6 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8004de4:	6850      	ldr	r0, [r2, #4]
 8004de6:	4408      	add	r0, r1
}
 8004de8:	bd10      	pop	{r4, pc}

08004dea <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004dea:	4602      	mov	r2, r0
 8004dec:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8004df0:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004df2:	01c3      	lsls	r3, r0, #7
 8004df4:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8004df8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004dfc:	fa50 f383 	uxtab	r3, r0, r3
	} while (--n);
 8004e00:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004e02:	b2d8      	uxtb	r0, r3
	} while (--n);
 8004e04:	d1f5      	bne.n	8004df2 <sum_sfn+0x8>
	return sum;
}
 8004e06:	4770      	bx	lr

08004e08 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004e08:	6802      	ldr	r2, [r0, #0]
{
 8004e0a:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8004e0c:	b152      	cbz	r2, 8004e24 <get_ldnumber+0x1c>
 8004e0e:	4611      	mov	r1, r2
 8004e10:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e16:	2c1f      	cmp	r4, #31
 8004e18:	d90c      	bls.n	8004e34 <get_ldnumber+0x2c>
 8004e1a:	2c3a      	cmp	r4, #58	; 0x3a
 8004e1c:	d1f8      	bne.n	8004e10 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8004e1e:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004e20:	428b      	cmp	r3, r1
 8004e22:	d002      	beq.n	8004e2a <get_ldnumber+0x22>
	int vol = -1;
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8004e28:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004e2a:	7812      	ldrb	r2, [r2, #0]
 8004e2c:	2a30      	cmp	r2, #48	; 0x30
 8004e2e:	d1f9      	bne.n	8004e24 <get_ldnumber+0x1c>
					*path = ++tt;
 8004e30:	3301      	adds	r3, #1
 8004e32:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8004e34:	2000      	movs	r0, #0
 8004e36:	bd10      	pop	{r4, pc}

08004e38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	b918      	cbnz	r0, 8004e48 <validate+0x10>
		*fs = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8004e44:	2009      	movs	r0, #9
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8004e48:	6803      	ldr	r3, [r0, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f8      	beq.n	8004e40 <validate+0x8>
 8004e4e:	781a      	ldrb	r2, [r3, #0]
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	d0f5      	beq.n	8004e40 <validate+0x8>
 8004e54:	88d9      	ldrh	r1, [r3, #6]
 8004e56:	8882      	ldrh	r2, [r0, #4]
 8004e58:	4291      	cmp	r1, r2
 8004e5a:	d1f1      	bne.n	8004e40 <validate+0x8>
 8004e5c:	7858      	ldrb	r0, [r3, #1]
 8004e5e:	f7ff fec9 	bl	8004bf4 <disk_status>
 8004e62:	f010 0001 	ands.w	r0, r0, #1
 8004e66:	d1eb      	bne.n	8004e40 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8004e6c:	bd38      	pop	{r3, r4, r5, pc}

08004e6e <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004e6e:	3801      	subs	r0, #1
 8004e70:	440a      	add	r2, r1
			*d++ = *s++;
 8004e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e76:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8004e7a:	4291      	cmp	r1, r2
 8004e7c:	d1f9      	bne.n	8004e72 <mem_cpy.part.0+0x4>
}
 8004e7e:	4770      	bx	lr

08004e80 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8004e80:	7eca      	ldrb	r2, [r1, #27]
 8004e82:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8004e84:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8004e86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8004e8a:	bf01      	itttt	eq
 8004e8c:	7d48      	ldrbeq	r0, [r1, #21]
 8004e8e:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004e90:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8004e94:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	4770      	bx	lr

08004e9c <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8004e9c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004ea0:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8004ea2:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8004ea4:	7803      	ldrb	r3, [r0, #0]
 8004ea6:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004ea8:	bf01      	itttt	eq
 8004eaa:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004eac:	750a      	strbeq	r2, [r1, #20]
 8004eae:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8004eb0:	754a      	strbeq	r2, [r1, #21]
 8004eb2:	4770      	bx	lr

08004eb4 <sync_window.part.3>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8004eb6:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004eb8:	f100 0738 	add.w	r7, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004ebc:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	7840      	ldrb	r0, [r0, #1]
 8004ec6:	f7ff febd 	bl	8004c44 <disk_write>
 8004eca:	b9a0      	cbnz	r0, 8004ef6 <sync_window.part.3+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ecc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ece:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8004ed0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ed2:	1aeb      	subs	r3, r5, r3
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d301      	bcc.n	8004edc <sync_window.part.3+0x28>
	FRESULT res = FR_OK;
 8004ed8:	2000      	movs	r0, #0
 8004eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004edc:	78a6      	ldrb	r6, [r4, #2]
 8004ede:	2e01      	cmp	r6, #1
 8004ee0:	d9fa      	bls.n	8004ed8 <sync_window.part.3+0x24>
					wsect += fs->fsize;
 8004ee2:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ee4:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004ee6:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ee8:	462a      	mov	r2, r5
 8004eea:	2301      	movs	r3, #1
 8004eec:	4639      	mov	r1, r7
 8004eee:	f7ff fea9 	bl	8004c44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ef2:	3e01      	subs	r6, #1
 8004ef4:	e7f3      	b.n	8004ede <sync_window.part.3+0x2a>
			res = FR_DISK_ERR;
 8004ef6:	2001      	movs	r0, #1
}
 8004ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004efa <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004efa:	78c3      	ldrb	r3, [r0, #3]
 8004efc:	b10b      	cbz	r3, 8004f02 <sync_window+0x8>
 8004efe:	f7ff bfd9 	b.w	8004eb4 <sync_window.part.3>
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	4770      	bx	lr

08004f06 <sync_fs>:
{
 8004f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f08:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004f0a:	f7ff fff6 	bl	8004efa <sync_window>
 8004f0e:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d141      	bne.n	8004f98 <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004f14:	7823      	ldrb	r3, [r4, #0]
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d136      	bne.n	8004f88 <sync_fs+0x82>
 8004f1a:	7927      	ldrb	r7, [r4, #4]
 8004f1c:	2f01      	cmp	r7, #1
 8004f1e:	d133      	bne.n	8004f88 <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8004f20:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8004f24:	4601      	mov	r1, r0
 8004f26:	89a2      	ldrh	r2, [r4, #12]
 8004f28:	4630      	mov	r0, r6
 8004f2a:	f7ff feb7 	bl	8004c9c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004f2e:	2355      	movs	r3, #85	; 0x55
 8004f30:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 8004f34:	23aa      	movs	r3, #170	; 0xaa
 8004f36:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 8004f3a:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8004f3c:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004f3e:	2172      	movs	r1, #114	; 0x72
 8004f40:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8004f44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 8004f48:	2361      	movs	r3, #97	; 0x61
 8004f4a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	*ptr++ = (BYTE)val;
 8004f4e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 8004f52:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val;
 8004f56:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8004f5a:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 8004f5e:	f884 121d 	strb.w	r1, [r4, #541]	; 0x21d
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004f62:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004f66:	69a1      	ldr	r1, [r4, #24]
 8004f68:	f7ff fe90 	bl	8004c8c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004f6c:	6961      	ldr	r1, [r4, #20]
 8004f6e:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8004f72:	f7ff fe8b 	bl	8004c8c <st_dword>
			fs->winsect = fs->volbase + 1;
 8004f76:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004f78:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8004f7a:	3201      	adds	r2, #1
 8004f7c:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004f7e:	463b      	mov	r3, r7
 8004f80:	4631      	mov	r1, r6
 8004f82:	f7ff fe5f 	bl	8004c44 <disk_write>
			fs->fsi_flag = 0;
 8004f86:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	7860      	ldrb	r0, [r4, #1]
 8004f8e:	f7ff fe67 	bl	8004c60 <disk_ioctl>
 8004f92:	3000      	adds	r0, #0
 8004f94:	bf18      	it	ne
 8004f96:	2001      	movne	r0, #1
}
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f9a <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f9c:	428b      	cmp	r3, r1
{
 8004f9e:	b570      	push	{r4, r5, r6, lr}
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004fa4:	d012      	beq.n	8004fcc <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8004fa6:	f7ff ffa8 	bl	8004efa <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004faa:	4604      	mov	r4, r0
 8004fac:	b960      	cbnz	r0, 8004fc8 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004fae:	462a      	mov	r2, r5
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8004fb6:	7870      	ldrb	r0, [r6, #1]
 8004fb8:	f7ff fe36 	bl	8004c28 <disk_read>
 8004fbc:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8004fbe:	bf1c      	itt	ne
 8004fc0:	f04f 35ff 	movne.w	r5, #4294967295
 8004fc4:	2401      	movne	r4, #1
			fs->winsect = sector;
 8004fc6:	6375      	str	r5, [r6, #52]	; 0x34
}
 8004fc8:	4620      	mov	r0, r4
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8004fcc:	2400      	movs	r4, #0
 8004fce:	e7fb      	b.n	8004fc8 <move_window+0x2e>

08004fd0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004fd0:	2300      	movs	r3, #0
{
 8004fd2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004fd4:	70c3      	strb	r3, [r0, #3]
 8004fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fda:	6343      	str	r3, [r0, #52]	; 0x34
{
 8004fdc:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004fde:	f7ff ffdc 	bl	8004f9a <move_window>
 8004fe2:	bb30      	cbnz	r0, 8005032 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8004fe4:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8004fe8:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8004fec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004ff0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d11e      	bne.n	8005036 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004ff8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004ffc:	2be9      	cmp	r3, #233	; 0xe9
 8004ffe:	d005      	beq.n	800500c <check_fs+0x3c>
 8005000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005002:	4a10      	ldr	r2, [pc, #64]	; (8005044 <check_fs+0x74>)
 8005004:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005008:	4293      	cmp	r3, r2
 800500a:	d116      	bne.n	800503a <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800500c:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8005010:	f7ff fe34 	bl	8004c7c <ld_dword>
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <check_fs+0x78>)
 8005016:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800501a:	4298      	cmp	r0, r3
 800501c:	d00f      	beq.n	800503e <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800501e:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8005022:	f7ff fe2b 	bl	8004c7c <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <check_fs+0x7c>)
 8005028:	4298      	cmp	r0, r3
 800502a:	bf14      	ite	ne
 800502c:	2002      	movne	r0, #2
 800502e:	2000      	moveq	r0, #0
 8005030:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005032:	2004      	movs	r0, #4
 8005034:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005036:	2003      	movs	r0, #3
 8005038:	bd10      	pop	{r4, pc}
	return 2;
 800503a:	2002      	movs	r0, #2
 800503c:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800503e:	2000      	movs	r0, #0
}
 8005040:	bd10      	pop	{r4, pc}
 8005042:	bf00      	nop
 8005044:	009000eb 	.word	0x009000eb
 8005048:	00544146 	.word	0x00544146
 800504c:	33544146 	.word	0x33544146

08005050 <find_volume>:
{
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8005054:	2300      	movs	r3, #0
{
 8005056:	b085      	sub	sp, #20
	*rfs = 0;
 8005058:	600b      	str	r3, [r1, #0]
{
 800505a:	460f      	mov	r7, r1
 800505c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800505e:	f7ff fed3 	bl	8004e08 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005062:	1e06      	subs	r6, r0, #0
 8005064:	f2c0 815e 	blt.w	8005324 <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005068:	4bb2      	ldr	r3, [pc, #712]	; (8005334 <find_volume+0x2e4>)
 800506a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800506e:	2c00      	cmp	r4, #0
 8005070:	f000 815a 	beq.w	8005328 <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 8005074:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005076:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005078:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800507c:	b173      	cbz	r3, 800509c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800507e:	7860      	ldrb	r0, [r4, #1]
 8005080:	f7ff fdb8 	bl	8004bf4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005084:	07c1      	lsls	r1, r0, #31
 8005086:	d409      	bmi.n	800509c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005088:	2d00      	cmp	r5, #0
 800508a:	f000 814f 	beq.w	800532c <find_volume+0x2dc>
 800508e:	f010 0004 	ands.w	r0, r0, #4
 8005092:	d000      	beq.n	8005096 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8005094:	200a      	movs	r0, #10
}
 8005096:	b005      	add	sp, #20
 8005098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800509c:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800509e:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80050a0:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80050a2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80050a4:	f7ff fdb0 	bl	8004c08 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80050a8:	07c2      	lsls	r2, r0, #31
 80050aa:	f100 8141 	bmi.w	8005330 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80050ae:	b10d      	cbz	r5, 80050b4 <find_volume+0x64>
 80050b0:	0743      	lsls	r3, r0, #29
 80050b2:	d4ef      	bmi.n	8005094 <find_volume+0x44>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80050b4:	f104 020c 	add.w	r2, r4, #12
 80050b8:	2102      	movs	r1, #2
 80050ba:	7860      	ldrb	r0, [r4, #1]
 80050bc:	f7ff fdd0 	bl	8004c60 <disk_ioctl>
 80050c0:	b108      	cbz	r0, 80050c6 <find_volume+0x76>
 80050c2:	2001      	movs	r0, #1
 80050c4:	e7e7      	b.n	8005096 <find_volume+0x46>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80050cc:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 80050d0:	d8f7      	bhi.n	80050c2 <find_volume+0x72>
 80050d2:	1e5e      	subs	r6, r3, #1
 80050d4:	401e      	ands	r6, r3
 80050d6:	d1f4      	bne.n	80050c2 <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80050d8:	4631      	mov	r1, r6
 80050da:	4620      	mov	r0, r4
 80050dc:	f7ff ff78 	bl	8004fd0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80050e0:	2802      	cmp	r0, #2
 80050e2:	f040 8101 	bne.w	80052e8 <find_volume+0x298>
 80050e6:	f504 71ff 	add.w	r1, r4, #510	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80050ea:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 80050ee:	b110      	cbz	r0, 80050f6 <find_volume+0xa6>
 80050f0:	4608      	mov	r0, r1
 80050f2:	f7ff fdc3 	bl	8004c7c <ld_dword>
 80050f6:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80050fa:	3601      	adds	r6, #1
 80050fc:	2e04      	cmp	r6, #4
 80050fe:	f101 0110 	add.w	r1, r1, #16
 8005102:	d1f2      	bne.n	80050ea <find_volume+0x9a>
 8005104:	2500      	movs	r5, #0
			bsect = br[i];
 8005106:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800510a:	2e00      	cmp	r6, #0
 800510c:	f000 80e4 	beq.w	80052d8 <find_volume+0x288>
 8005110:	4631      	mov	r1, r6
 8005112:	4620      	mov	r0, r4
 8005114:	f7ff ff5c 	bl	8004fd0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005118:	2801      	cmp	r0, #1
 800511a:	f200 80de 	bhi.w	80052da <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 800511e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005122:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005126:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 800512a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800512e:	4598      	cmp	r8, r3
 8005130:	f040 80e0 	bne.w	80052f4 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8005134:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8005138:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800513c:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8005140:	d104      	bne.n	800514c <find_volume+0xfc>
 8005142:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005146:	f7ff fd99 	bl	8004c7c <ld_dword>
 800514a:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800514c:	f894 7048 	ldrb.w	r7, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8005150:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005152:	1e7b      	subs	r3, r7, #1
 8005154:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005156:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005158:	f200 80cc 	bhi.w	80052f4 <find_volume+0x2a4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800515c:	f894 9045 	ldrb.w	r9, [r4, #69]	; 0x45
 8005160:	fa1f f389 	uxth.w	r3, r9
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005164:	434f      	muls	r7, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005166:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80c3 	beq.w	80052f4 <find_volume+0x2a4>
 800516e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005172:	ea13 0f09 	tst.w	r3, r9
 8005176:	f040 80bd 	bne.w	80052f4 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 800517a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800517e:	f894 a049 	ldrb.w	sl, [r4, #73]	; 0x49
 8005182:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005186:	ea4f 1358 	mov.w	r3, r8, lsr #5
 800518a:	fbba fbf3 	udiv	fp, sl, r3
 800518e:	fb03 a31b 	mls	r3, r3, fp, sl
 8005192:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005194:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 80ab 	bne.w	80052f4 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 800519e:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
 80051a2:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80051a6:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 80051aa:	d103      	bne.n	80051b4 <find_volume+0x164>
 80051ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051b0:	f7ff fd64 	bl	8004c7c <ld_dword>
	rv = rv << 8 | ptr[0];
 80051b4:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80051b8:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80051bc:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 80051c0:	f000 8098 	beq.w	80052f4 <find_volume+0x2a4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80051c4:	fa12 f38b 	uxtah	r3, r2, fp
 80051c8:	443b      	add	r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80051ca:	4298      	cmp	r0, r3
 80051cc:	f0c0 8092 	bcc.w	80052f4 <find_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80051d0:	1ac5      	subs	r5, r0, r3
 80051d2:	fbb5 f5f9 	udiv	r5, r5, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	f000 808c 	beq.w	80052f4 <find_volume+0x2a4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80051dc:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80051e0:	4285      	cmp	r5, r0
 80051e2:	f200 8089 	bhi.w	80052f8 <find_volume+0x2a8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80051e6:	f640 79f5 	movw	r9, #4085	; 0xff5
 80051ea:	454d      	cmp	r5, r9
 80051ec:	bf8c      	ite	hi
 80051ee:	f04f 0902 	movhi.w	r9, #2
 80051f2:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80051f6:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80051f8:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 80051fa:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 80051fc:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005200:	61e5      	str	r5, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005202:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005204:	62a2      	str	r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005206:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005208:	d179      	bne.n	80052fe <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 800520a:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 800520e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005212:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005216:	d16d      	bne.n	80052f4 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005218:	f1ba 0f00 	cmp.w	sl, #0
 800521c:	d16a      	bne.n	80052f4 <find_volume+0x2a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800521e:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8005222:	f7ff fd2b 	bl	8004c7c <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005226:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005228:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800522a:	f108 33ff 	add.w	r3, r8, #4294967295
 800522e:	441d      	add	r5, r3
 8005230:	fbb5 f8f8 	udiv	r8, r5, r8
 8005234:	4541      	cmp	r1, r8
 8005236:	d35d      	bcc.n	80052f4 <find_volume+0x2a4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005238:	f04f 33ff 	mov.w	r3, #4294967295
 800523c:	61a3      	str	r3, [r4, #24]
 800523e:	6163      	str	r3, [r4, #20]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005240:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8005244:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005248:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800524a:	d12f      	bne.n	80052ac <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800524c:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8005250:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8005254:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d127      	bne.n	80052ac <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
 800525c:	1c71      	adds	r1, r6, #1
 800525e:	4620      	mov	r0, r4
 8005260:	f7ff fe9b 	bl	8004f9a <move_window>
 8005264:	bb10      	cbnz	r0, 80052ac <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8005266:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 800526a:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 800526e:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8005270:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005274:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005278:	4293      	cmp	r3, r2
 800527a:	d117      	bne.n	80052ac <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800527c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8005280:	f7ff fcfc 	bl	8004c7c <ld_dword>
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <find_volume+0x2e8>)
 8005286:	4298      	cmp	r0, r3
 8005288:	d110      	bne.n	80052ac <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800528a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800528e:	f7ff fcf5 	bl	8004c7c <ld_dword>
 8005292:	4b2a      	ldr	r3, [pc, #168]	; (800533c <find_volume+0x2ec>)
 8005294:	4298      	cmp	r0, r3
 8005296:	d109      	bne.n	80052ac <find_volume+0x25c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005298:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800529c:	f7ff fcee 	bl	8004c7c <ld_dword>
 80052a0:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80052a2:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80052a6:	f7ff fce9 	bl	8004c7c <ld_dword>
 80052aa:	6160      	str	r0, [r4, #20]
	fs->id = ++Fsid;		/* File system mount ID */
 80052ac:	4a24      	ldr	r2, [pc, #144]	; (8005340 <find_volume+0x2f0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80052ae:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80052b2:	8813      	ldrh	r3, [r2, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]
 80052ba:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80052bc:	4b21      	ldr	r3, [pc, #132]	; (8005344 <find_volume+0x2f4>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4294      	cmp	r4, r2
 80052c2:	bf04      	itt	eq
 80052c4:	2200      	moveq	r2, #0
 80052c6:	601a      	streq	r2, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	4294      	cmp	r4, r2
 80052cc:	f04f 0000 	mov.w	r0, #0
 80052d0:	f47f aee1 	bne.w	8005096 <find_volume+0x46>
 80052d4:	6118      	str	r0, [r3, #16]
 80052d6:	e6de      	b.n	8005096 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80052d8:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80052da:	3501      	adds	r5, #1
 80052dc:	2d04      	cmp	r5, #4
 80052de:	f47f af12 	bne.w	8005106 <find_volume+0xb6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80052e2:	2804      	cmp	r0, #4
 80052e4:	d106      	bne.n	80052f4 <find_volume+0x2a4>
 80052e6:	e6ec      	b.n	80050c2 <find_volume+0x72>
 80052e8:	2804      	cmp	r0, #4
 80052ea:	f43f aeea 	beq.w	80050c2 <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80052ee:	2801      	cmp	r0, #1
 80052f0:	f67f af15 	bls.w	800511e <find_volume+0xce>
 80052f4:	200d      	movs	r0, #13
 80052f6:	e6ce      	b.n	8005096 <find_volume+0x46>
		fmt = FS_FAT32;
 80052f8:	f04f 0903 	mov.w	r9, #3
 80052fc:	e77b      	b.n	80051f6 <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80052fe:	f1ba 0f00 	cmp.w	sl, #0
 8005302:	d0f7      	beq.n	80052f4 <find_volume+0x2a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005304:	f1b9 0f02 	cmp.w	r9, #2
 8005308:	ea4f 0045 	mov.w	r0, r5, lsl #1
 800530c:	bf18      	it	ne
 800530e:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005310:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005312:	bf18      	it	ne
 8005314:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005318:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800531a:	bf0c      	ite	eq
 800531c:	4605      	moveq	r5, r0
 800531e:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8005322:	e782      	b.n	800522a <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005324:	200b      	movs	r0, #11
 8005326:	e6b6      	b.n	8005096 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005328:	200c      	movs	r0, #12
 800532a:	e6b4      	b.n	8005096 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 800532c:	4628      	mov	r0, r5
 800532e:	e6b2      	b.n	8005096 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005330:	2003      	movs	r0, #3
 8005332:	e6b0      	b.n	8005096 <find_volume+0x46>
 8005334:	20000104 	.word	0x20000104
 8005338:	41615252 	.word	0x41615252
 800533c:	61417272 	.word	0x61417272
 8005340:	20000128 	.word	0x20000128
 8005344:	20000108 	.word	0x20000108

08005348 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005348:	2901      	cmp	r1, #1
{
 800534a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800534e:	4604      	mov	r4, r0
 8005350:	460d      	mov	r5, r1
 8005352:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005354:	f240 808a 	bls.w	800546c <put_fat+0x124>
 8005358:	69c3      	ldr	r3, [r0, #28]
 800535a:	4299      	cmp	r1, r3
 800535c:	f080 8086 	bcs.w	800546c <put_fat+0x124>
		switch (fs->fs_type) {
 8005360:	7803      	ldrb	r3, [r0, #0]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d049      	beq.n	80053fa <put_fat+0xb2>
 8005366:	2b03      	cmp	r3, #3
 8005368:	d060      	beq.n	800542c <put_fat+0xe4>
 800536a:	2b01      	cmp	r3, #1
 800536c:	d17e      	bne.n	800546c <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 800536e:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005372:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005374:	8983      	ldrh	r3, [r0, #12]
 8005376:	fbba f3f3 	udiv	r3, sl, r3
 800537a:	4419      	add	r1, r3
 800537c:	f7ff fe0d 	bl	8004f9a <move_window>
 8005380:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8005382:	bb78      	cbnz	r0, 80053e4 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	fbba f2f3 	udiv	r2, sl, r3
 800538a:	f104 0838 	add.w	r8, r4, #56	; 0x38
 800538e:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005392:	f015 0501 	ands.w	r5, r5, #1
 8005396:	bf1f      	itttt	ne
 8005398:	f818 3002 	ldrbne.w	r3, [r8, r2]
 800539c:	f003 010f 	andne.w	r1, r3, #15
 80053a0:	013b      	lslne	r3, r7, #4
 80053a2:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80053a6:	bf14      	ite	ne
 80053a8:	430b      	orrne	r3, r1
 80053aa:	b2fb      	uxtbeq	r3, r7
 80053ac:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80053b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			fs->wflag = 1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 80053b6:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	fbb9 f3f3 	udiv	r3, r9, r3
 80053c0:	4620      	mov	r0, r4
 80053c2:	4419      	add	r1, r3
 80053c4:	f7ff fde9 	bl	8004f9a <move_window>
			if (res != FR_OK) break;
 80053c8:	4606      	mov	r6, r0
 80053ca:	b958      	cbnz	r0, 80053e4 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 80053cc:	89a3      	ldrh	r3, [r4, #12]
 80053ce:	fbb9 f2f3 	udiv	r2, r9, r3
 80053d2:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80053d6:	b145      	cbz	r5, 80053ea <put_fat+0xa2>
 80053d8:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80053dc:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 80053e0:	2301      	movs	r3, #1
 80053e2:	70e3      	strb	r3, [r4, #3]
}
 80053e4:	4630      	mov	r0, r6
 80053e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80053ea:	f818 3002 	ldrb.w	r3, [r8, r2]
 80053ee:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80053f2:	f023 030f 	bic.w	r3, r3, #15
 80053f6:	431f      	orrs	r7, r3
 80053f8:	e7f0      	b.n	80053dc <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053fa:	8983      	ldrh	r3, [r0, #12]
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005402:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005404:	4419      	add	r1, r3
 8005406:	f7ff fdc8 	bl	8004f9a <move_window>
			if (res != FR_OK) break;
 800540a:	4606      	mov	r6, r0
 800540c:	2800      	cmp	r0, #0
 800540e:	d1e9      	bne.n	80053e4 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005410:	89a1      	ldrh	r1, [r4, #12]
 8005412:	006d      	lsls	r5, r5, #1
 8005414:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8005418:	fbb5 f3f1 	udiv	r3, r5, r1
 800541c:	fb01 5513 	mls	r5, r1, r3, r5
 8005420:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8005422:	5557      	strb	r7, [r2, r5]
 8005424:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8005428:	705f      	strb	r7, [r3, #1]
 800542a:	e7d9      	b.n	80053e0 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800542c:	8983      	ldrh	r3, [r0, #12]
 800542e:	089b      	lsrs	r3, r3, #2
 8005430:	fbb1 f3f3 	udiv	r3, r1, r3
 8005434:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005436:	4419      	add	r1, r3
 8005438:	f7ff fdaf 	bl	8004f9a <move_window>
			if (res != FR_OK) break;
 800543c:	4606      	mov	r6, r0
 800543e:	2800      	cmp	r0, #0
 8005440:	d1d0      	bne.n	80053e4 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005442:	89a1      	ldrh	r1, [r4, #12]
 8005444:	00ad      	lsls	r5, r5, #2
 8005446:	f104 0338 	add.w	r3, r4, #56	; 0x38
 800544a:	fbb5 f2f1 	udiv	r2, r5, r1
 800544e:	fb01 5512 	mls	r5, r1, r2, r5
 8005452:	441d      	add	r5, r3
 8005454:	4628      	mov	r0, r5
 8005456:	f7ff fc11 	bl	8004c7c <ld_dword>
 800545a:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800545e:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005462:	4339      	orrs	r1, r7
 8005464:	4628      	mov	r0, r5
 8005466:	f7ff fc11 	bl	8004c8c <st_dword>
 800546a:	e7b9      	b.n	80053e0 <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 800546c:	2602      	movs	r6, #2
 800546e:	e7b9      	b.n	80053e4 <put_fat+0x9c>

08005470 <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005470:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8005472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005474:	4604      	mov	r4, r0
 8005476:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005478:	d968      	bls.n	800554c <get_fat.isra.7+0xdc>
 800547a:	69c3      	ldr	r3, [r0, #28]
 800547c:	4299      	cmp	r1, r3
 800547e:	d265      	bcs.n	800554c <get_fat.isra.7+0xdc>
		switch (fs->fs_type) {
 8005480:	7803      	ldrb	r3, [r0, #0]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d032      	beq.n	80054ec <get_fat.isra.7+0x7c>
 8005486:	2b03      	cmp	r3, #3
 8005488:	d048      	beq.n	800551c <get_fat.isra.7+0xac>
 800548a:	2b01      	cmp	r3, #1
 800548c:	d15e      	bne.n	800554c <get_fat.isra.7+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 800548e:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005492:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005494:	8983      	ldrh	r3, [r0, #12]
 8005496:	fbb5 f3f3 	udiv	r3, r5, r3
 800549a:	4419      	add	r1, r3
 800549c:	f7ff fd7d 	bl	8004f9a <move_window>
 80054a0:	b110      	cbz	r0, 80054a8 <get_fat.isra.7+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80054a8:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];
 80054ac:	fbb5 f2f1 	udiv	r2, r5, r1
 80054b0:	fb01 5212 	mls	r2, r1, r2, r5
 80054b4:	4422      	add	r2, r4
 80054b6:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054b8:	4620      	mov	r0, r4
 80054ba:	fbb7 f1f1 	udiv	r1, r7, r1
 80054be:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 80054c0:	f892 5038 	ldrb.w	r5, [r2, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054c4:	f7ff fd69 	bl	8004f9a <move_window>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d1ea      	bne.n	80054a2 <get_fat.isra.7+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 80054cc:	89a2      	ldrh	r2, [r4, #12]
 80054ce:	fbb7 f3f2 	udiv	r3, r7, r2
 80054d2:	fb02 7313 	mls	r3, r2, r3, r7
 80054d6:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80054d8:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80054da:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 80054de:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80054e2:	bf4c      	ite	mi
 80054e4:	0900      	lsrmi	r0, r0, #4
 80054e6:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80054ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054ec:	8983      	ldrh	r3, [r0, #12]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054f4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80054f6:	4419      	add	r1, r3
 80054f8:	f7ff fd4f 	bl	8004f9a <move_window>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d1d0      	bne.n	80054a2 <get_fat.isra.7+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005500:	89a1      	ldrh	r1, [r4, #12]
 8005502:	0076      	lsls	r6, r6, #1
 8005504:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8005508:	fbb6 f3f1 	udiv	r3, r6, r1
 800550c:	fb01 6613 	mls	r6, r1, r3, r6
 8005510:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 8005512:	5d90      	ldrb	r0, [r2, r6]
 8005514:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005516:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800551a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800551c:	8983      	ldrh	r3, [r0, #12]
 800551e:	089b      	lsrs	r3, r3, #2
 8005520:	fbb1 f3f3 	udiv	r3, r1, r3
 8005524:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005526:	4419      	add	r1, r3
 8005528:	f7ff fd37 	bl	8004f9a <move_window>
 800552c:	2800      	cmp	r0, #0
 800552e:	d1b8      	bne.n	80054a2 <get_fat.isra.7+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005530:	89a2      	ldrh	r2, [r4, #12]
 8005532:	00b6      	lsls	r6, r6, #2
 8005534:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8005538:	fbb6 f3f2 	udiv	r3, r6, r2
 800553c:	fb02 6613 	mls	r6, r2, r3, r6
 8005540:	4430      	add	r0, r6
 8005542:	f7ff fb9b 	bl	8004c7c <ld_dword>
 8005546:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800554a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800554c:	2001      	movs	r0, #1
}
 800554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005550 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005550:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	4605      	mov	r5, r0
 8005558:	460e      	mov	r6, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800555a:	d301      	bcc.n	8005560 <dir_sdi+0x10>
		return FR_INT_ERR;
 800555c:	2002      	movs	r0, #2
 800555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005560:	06ca      	lsls	r2, r1, #27
 8005562:	d1fb      	bne.n	800555c <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005564:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8005566:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8005568:	6169      	str	r1, [r5, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800556a:	b9d2      	cbnz	r2, 80055a2 <dir_sdi+0x52>
 800556c:	7823      	ldrb	r3, [r4, #0]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <dir_sdi+0x26>
		clst = fs->dirbase;
 8005572:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005574:	b9b3      	cbnz	r3, 80055a4 <dir_sdi+0x54>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005576:	8923      	ldrh	r3, [r4, #8]
 8005578:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 800557c:	d9ee      	bls.n	800555c <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 800557e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005580:	61eb      	str	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8005582:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005584:	69ea      	ldr	r2, [r5, #28]
 8005586:	2a00      	cmp	r2, #0
 8005588:	d0e8      	beq.n	800555c <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800558a:	89a1      	ldrh	r1, [r4, #12]
 800558c:	fbb6 f3f1 	udiv	r3, r6, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005590:	3438      	adds	r4, #56	; 0x38
 8005592:	fb01 6613 	mls	r6, r1, r3, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005596:	441a      	add	r2, r3
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005598:	4434      	add	r4, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800559a:	61ea      	str	r2, [r5, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800559c:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800559e:	2000      	movs	r0, #0
 80055a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a2:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80055a4:	8962      	ldrh	r2, [r4, #10]
 80055a6:	89a7      	ldrh	r7, [r4, #12]
 80055a8:	4357      	muls	r7, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 80055aa:	461a      	mov	r2, r3
 80055ac:	42be      	cmp	r6, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80055ae:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 80055b0:	d204      	bcs.n	80055bc <dir_sdi+0x6c>
		dp->sect = clust2sect(fs, clst);
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff fbfa 	bl	8004dac <clust2sect>
 80055b8:	61e8      	str	r0, [r5, #28]
 80055ba:	e7e2      	b.n	8005582 <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80055bc:	6828      	ldr	r0, [r5, #0]
 80055be:	f7ff ff57 	bl	8005470 <get_fat.isra.7>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055c2:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80055c4:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055c6:	d006      	beq.n	80055d6 <dir_sdi+0x86>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80055c8:	2801      	cmp	r0, #1
 80055ca:	d9c7      	bls.n	800555c <dir_sdi+0xc>
 80055cc:	69e3      	ldr	r3, [r4, #28]
 80055ce:	4298      	cmp	r0, r3
 80055d0:	d2c4      	bcs.n	800555c <dir_sdi+0xc>
			ofs -= csz;
 80055d2:	1bf6      	subs	r6, r6, r7
 80055d4:	e7ea      	b.n	80055ac <dir_sdi+0x5c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055d6:	2001      	movs	r0, #1
}
 80055d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080055da <create_chain>:
{
 80055da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055de:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 80055e0:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80055e2:	460f      	mov	r7, r1
 80055e4:	b971      	cbnz	r1, 8005604 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80055e6:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80055e8:	b1f6      	cbz	r6, 8005628 <create_chain+0x4e>
 80055ea:	69eb      	ldr	r3, [r5, #28]
 80055ec:	429e      	cmp	r6, r3
 80055ee:	bf28      	it	cs
 80055f0:	2601      	movcs	r6, #1
 80055f2:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80055f4:	69eb      	ldr	r3, [r5, #28]
			ncl++;							/* Next cluster */
 80055f6:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80055f8:	429c      	cmp	r4, r3
 80055fa:	d318      	bcc.n	800562e <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80055fc:	2e01      	cmp	r6, #1
 80055fe:	d815      	bhi.n	800562c <create_chain+0x52>
 8005600:	2400      	movs	r4, #0
 8005602:	e009      	b.n	8005618 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005604:	4628      	mov	r0, r5
 8005606:	f7ff ff33 	bl	8005470 <get_fat.isra.7>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800560a:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800560c:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800560e:	d937      	bls.n	8005680 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d104      	bne.n	800561e <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005614:	f04f 34ff 	mov.w	r4, #4294967295
}
 8005618:	4620      	mov	r0, r4
 800561a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800561e:	69eb      	ldr	r3, [r5, #28]
 8005620:	4298      	cmp	r0, r3
 8005622:	d3f9      	bcc.n	8005618 <create_chain+0x3e>
 8005624:	463e      	mov	r6, r7
 8005626:	e7e4      	b.n	80055f2 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005628:	2601      	movs	r6, #1
 800562a:	e7e2      	b.n	80055f2 <create_chain+0x18>
				ncl = 2;
 800562c:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800562e:	4621      	mov	r1, r4
 8005630:	f8d8 0000 	ldr.w	r0, [r8]
 8005634:	f7ff ff1c 	bl	8005470 <get_fat.isra.7>
			if (cs == 0) break;				/* Found a free cluster */
 8005638:	b130      	cbz	r0, 8005648 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800563a:	2801      	cmp	r0, #1
 800563c:	d020      	beq.n	8005680 <create_chain+0xa6>
 800563e:	3001      	adds	r0, #1
 8005640:	d0e8      	beq.n	8005614 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8005642:	42b4      	cmp	r4, r6
 8005644:	d1d6      	bne.n	80055f4 <create_chain+0x1a>
 8005646:	e7db      	b.n	8005600 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	4621      	mov	r1, r4
 800564e:	4628      	mov	r0, r5
 8005650:	f7ff fe7a 	bl	8005348 <put_fat>
		if (res == FR_OK && clst != 0) {
 8005654:	b990      	cbnz	r0, 800567c <create_chain+0xa2>
 8005656:	b957      	cbnz	r7, 800566e <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005658:	69ea      	ldr	r2, [r5, #28]
 800565a:	69ab      	ldr	r3, [r5, #24]
		fs->last_clst = ncl;
 800565c:	616c      	str	r4, [r5, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800565e:	3a02      	subs	r2, #2
 8005660:	4293      	cmp	r3, r2
 8005662:	d90f      	bls.n	8005684 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8005664:	792b      	ldrb	r3, [r5, #4]
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	712b      	strb	r3, [r5, #4]
 800566c:	e7d4      	b.n	8005618 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800566e:	4622      	mov	r2, r4
 8005670:	4639      	mov	r1, r7
 8005672:	4628      	mov	r0, r5
 8005674:	f7ff fe68 	bl	8005348 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005678:	2800      	cmp	r0, #0
 800567a:	d0ed      	beq.n	8005658 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800567c:	2801      	cmp	r0, #1
 800567e:	d0c9      	beq.n	8005614 <create_chain+0x3a>
 8005680:	2401      	movs	r4, #1
 8005682:	e7c9      	b.n	8005618 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005684:	3b01      	subs	r3, #1
 8005686:	61ab      	str	r3, [r5, #24]
 8005688:	e7ec      	b.n	8005664 <create_chain+0x8a>

0800568a <remove_chain>:
{
 800568a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568c:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800568e:	2d01      	cmp	r5, #1
{
 8005690:	4607      	mov	r7, r0
 8005692:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005694:	d801      	bhi.n	800569a <remove_chain+0x10>
 8005696:	2002      	movs	r0, #2
 8005698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 800569a:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800569c:	69e3      	ldr	r3, [r4, #28]
 800569e:	429d      	cmp	r5, r3
 80056a0:	d2f9      	bcs.n	8005696 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80056a2:	b12a      	cbz	r2, 80056b0 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80056a4:	f04f 32ff 	mov.w	r2, #4294967295
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7ff fe4d 	bl	8005348 <put_fat>
		if (res != FR_OK) return res;
 80056ae:	bb08      	cbnz	r0, 80056f4 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80056b0:	4629      	mov	r1, r5
 80056b2:	6838      	ldr	r0, [r7, #0]
 80056b4:	f7ff fedc 	bl	8005470 <get_fat.isra.7>
		if (nxt == 0) break;				/* Empty cluster? */
 80056b8:	4606      	mov	r6, r0
 80056ba:	b908      	cbnz	r0, 80056c0 <remove_chain+0x36>
	return FR_OK;
 80056bc:	2000      	movs	r0, #0
 80056be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80056c0:	2801      	cmp	r0, #1
 80056c2:	d0e8      	beq.n	8005696 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d014      	beq.n	80056f2 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80056c8:	2200      	movs	r2, #0
 80056ca:	4629      	mov	r1, r5
 80056cc:	4620      	mov	r0, r4
 80056ce:	f7ff fe3b 	bl	8005348 <put_fat>
			if (res != FR_OK) return res;
 80056d2:	b978      	cbnz	r0, 80056f4 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80056d4:	69e2      	ldr	r2, [r4, #28]
 80056d6:	69a3      	ldr	r3, [r4, #24]
 80056d8:	1e91      	subs	r1, r2, #2
 80056da:	428b      	cmp	r3, r1
 80056dc:	d205      	bcs.n	80056ea <remove_chain+0x60>
			fs->free_clst++;
 80056de:	3301      	adds	r3, #1
 80056e0:	61a3      	str	r3, [r4, #24]
			fs->fsi_flag |= 1;
 80056e2:	7923      	ldrb	r3, [r4, #4]
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80056ea:	4296      	cmp	r6, r2
 80056ec:	4635      	mov	r5, r6
 80056ee:	d3df      	bcc.n	80056b0 <remove_chain+0x26>
 80056f0:	e7e4      	b.n	80056bc <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80056f2:	2001      	movs	r0, #1
}
 80056f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080056f6 <dir_next>:
{
 80056f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80056fa:	69c3      	ldr	r3, [r0, #28]
{
 80056fc:	4605      	mov	r5, r0
 80056fe:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005700:	b1b3      	cbz	r3, 8005730 <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005702:	6947      	ldr	r7, [r0, #20]
 8005704:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005706:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 800570a:	d211      	bcs.n	8005730 <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 800570c:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800570e:	89a2      	ldrh	r2, [r4, #12]
 8005710:	fbb7 f0f2 	udiv	r0, r7, r2
 8005714:	fb02 7210 	mls	r2, r2, r0, r7
 8005718:	2a00      	cmp	r2, #0
 800571a:	d14f      	bne.n	80057bc <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 800571c:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 800571e:	3301      	adds	r3, #1
 8005720:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 8005722:	b941      	cbnz	r1, 8005736 <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005724:	8923      	ldrh	r3, [r4, #8]
 8005726:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800572a:	d847      	bhi.n	80057bc <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 800572c:	2300      	movs	r3, #0
 800572e:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005730:	2004      	movs	r0, #4
 8005732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005736:	8963      	ldrh	r3, [r4, #10]
 8005738:	3b01      	subs	r3, #1
 800573a:	4203      	tst	r3, r0
 800573c:	d13e      	bne.n	80057bc <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800573e:	4620      	mov	r0, r4
 8005740:	f7ff fe96 	bl	8005470 <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005744:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005746:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005748:	d802      	bhi.n	8005750 <dir_next+0x5a>
 800574a:	2002      	movs	r0, #2
 800574c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005750:	1c42      	adds	r2, r0, #1
 8005752:	d102      	bne.n	800575a <dir_next+0x64>
 8005754:	2001      	movs	r0, #1
 8005756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800575a:	69e3      	ldr	r3, [r4, #28]
 800575c:	4298      	cmp	r0, r3
 800575e:	d327      	bcc.n	80057b0 <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 8005760:	f1b8 0f00 	cmp.w	r8, #0
 8005764:	d0e2      	beq.n	800572c <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005766:	69a9      	ldr	r1, [r5, #24]
 8005768:	4628      	mov	r0, r5
 800576a:	f7ff ff36 	bl	80055da <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800576e:	4606      	mov	r6, r0
 8005770:	2800      	cmp	r0, #0
 8005772:	d03d      	beq.n	80057f0 <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005774:	2801      	cmp	r0, #1
 8005776:	d0e8      	beq.n	800574a <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d0eb      	beq.n	8005754 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800577c:	4620      	mov	r0, r4
 800577e:	f7ff fbbc 	bl	8004efa <sync_window>
 8005782:	4680      	mov	r8, r0
 8005784:	2800      	cmp	r0, #0
 8005786:	d1e5      	bne.n	8005754 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005788:	4601      	mov	r1, r0
 800578a:	89a2      	ldrh	r2, [r4, #12]
 800578c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8005790:	f7ff fa84 	bl	8004c9c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005794:	4631      	mov	r1, r6
 8005796:	4620      	mov	r0, r4
 8005798:	f7ff fb08 	bl	8004dac <clust2sect>
						fs->wflag = 1;
 800579c:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80057a0:	6360      	str	r0, [r4, #52]	; 0x34
 80057a2:	8963      	ldrh	r3, [r4, #10]
 80057a4:	4598      	cmp	r8, r3
 80057a6:	d316      	bcc.n	80057d6 <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 80057a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057aa:	eba3 0308 	sub.w	r3, r3, r8
 80057ae:	6363      	str	r3, [r4, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 80057b0:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80057b2:	4631      	mov	r1, r6
 80057b4:	4620      	mov	r0, r4
 80057b6:	f7ff faf9 	bl	8004dac <clust2sect>
 80057ba:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80057bc:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 80057be:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80057c0:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80057c4:	fbb7 f2f1 	udiv	r2, r7, r1
 80057c8:	fb01 7712 	mls	r7, r1, r2, r7
 80057cc:	441f      	add	r7, r3
 80057ce:	622f      	str	r7, [r5, #32]
	return FR_OK;
 80057d0:	2000      	movs	r0, #0
 80057d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 80057d6:	f884 9003 	strb.w	r9, [r4, #3]
 80057da:	4620      	mov	r0, r4
 80057dc:	f7ff fb6a 	bl	8004eb4 <sync_window.part.3>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d1b7      	bne.n	8005754 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80057e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057e6:	3301      	adds	r3, #1
 80057e8:	f108 0801 	add.w	r8, r8, #1
 80057ec:	6363      	str	r3, [r4, #52]	; 0x34
 80057ee:	e7d8      	b.n	80057a2 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80057f0:	2007      	movs	r0, #7
}
 80057f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080057f6 <dir_remove>:
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80057f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80057f8:	1c4b      	adds	r3, r1, #1
{
 80057fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fe:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005800:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 8005802:	6946      	ldr	r6, [r0, #20]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8005804:	d118      	bne.n	8005838 <dir_remove+0x42>
				dp->dir[DIR_Name] = DDEM;
 8005806:	27e5      	movs	r7, #229	; 0xe5
			fs->wflag = 1;
 8005808:	f04f 0801 	mov.w	r8, #1
			res = move_window(fs, dp->sect);
 800580c:	69e1      	ldr	r1, [r4, #28]
 800580e:	4628      	mov	r0, r5
 8005810:	f7ff fbc3 	bl	8004f9a <move_window>
			if (res != FR_OK) break;
 8005814:	b960      	cbnz	r0, 8005830 <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;
 8005816:	6a23      	ldr	r3, [r4, #32]
 8005818:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
 800581a:	f885 8003 	strb.w	r8, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800581e:	6963      	ldr	r3, [r4, #20]
 8005820:	429e      	cmp	r6, r3
 8005822:	d90d      	bls.n	8005840 <dir_remove+0x4a>
			res = dir_next(dp, 0);	/* Next entry */
 8005824:	4601      	mov	r1, r0
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff ff65 	bl	80056f6 <dir_next>
		} while (res == FR_OK);
 800582c:	2800      	cmp	r0, #0
 800582e:	d0ed      	beq.n	800580c <dir_remove+0x16>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8005830:	2804      	cmp	r0, #4
 8005832:	bf08      	it	eq
 8005834:	2002      	moveq	r0, #2
 8005836:	e003      	b.n	8005840 <dir_remove+0x4a>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8005838:	f7ff fe8a 	bl	8005550 <dir_sdi>
	if (res == FR_OK) {
 800583c:	2800      	cmp	r0, #0
 800583e:	d0e2      	beq.n	8005806 <dir_remove+0x10>
}
 8005840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005844 <dir_find>:
{
 8005844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005848:	2100      	movs	r1, #0
{
 800584a:	b085      	sub	sp, #20
 800584c:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800584e:	f8d0 a000 	ldr.w	sl, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005852:	f7ff fe7d 	bl	8005550 <dir_sdi>
	if (res != FR_OK) return res;
 8005856:	4680      	mov	r8, r0
 8005858:	2800      	cmp	r0, #0
 800585a:	f040 809e 	bne.w	800599a <dir_find+0x156>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005866:	632b      	str	r3, [r5, #48]	; 0x30
 8005868:	464e      	mov	r6, r9
		res = move_window(fs, dp->sect);
 800586a:	69e9      	ldr	r1, [r5, #28]
 800586c:	4650      	mov	r0, sl
 800586e:	f7ff fb94 	bl	8004f9a <move_window>
		if (res != FR_OK) break;
 8005872:	4680      	mov	r8, r0
 8005874:	2800      	cmp	r0, #0
 8005876:	f040 8090 	bne.w	800599a <dir_find+0x156>
		c = dp->dir[DIR_Name];
 800587a:	6a2c      	ldr	r4, [r5, #32]
 800587c:	7827      	ldrb	r7, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800587e:	2f00      	cmp	r7, #0
 8005880:	f000 8091 	beq.w	80059a6 <dir_find+0x162>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005884:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005886:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005888:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800588c:	71ab      	strb	r3, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800588e:	d003      	beq.n	8005898 <dir_find+0x54>
 8005890:	0712      	lsls	r2, r2, #28
 8005892:	d505      	bpl.n	80058a0 <dir_find+0x5c>
 8005894:	2b0f      	cmp	r3, #15
 8005896:	d005      	beq.n	80058a4 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005898:	f04f 33ff 	mov.w	r3, #4294967295
 800589c:	632b      	str	r3, [r5, #48]	; 0x30
 800589e:	e057      	b.n	8005950 <dir_find+0x10c>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80058a0:	2b0f      	cmp	r3, #15
 80058a2:	d15e      	bne.n	8005962 <dir_find+0x11e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80058a4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80058a8:	0658      	lsls	r0, r3, #25
 80058aa:	d452      	bmi.n	8005952 <dir_find+0x10e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80058ac:	0679      	lsls	r1, r7, #25
 80058ae:	d547      	bpl.n	8005940 <dir_find+0xfc>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80058b0:	696a      	ldr	r2, [r5, #20]
						sum = dp->dir[LDIR_Chksum];
 80058b2:	7b63      	ldrb	r3, [r4, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80058b4:	632a      	str	r2, [r5, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80058b6:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80058ba:	f894 900d 	ldrb.w	r9, [r4, #13]
 80058be:	4599      	cmp	r9, r3
 80058c0:	d16f      	bne.n	80059a2 <dir_find+0x15e>
	rv = rv << 8 | ptr[0];
 80058c2:	7ee3      	ldrb	r3, [r4, #27]
 80058c4:	7ea6      	ldrb	r6, [r4, #26]
 80058c6:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80058ca:	b236      	sxth	r6, r6
 80058cc:	2e00      	cmp	r6, #0
 80058ce:	d13f      	bne.n	8005950 <dir_find+0x10c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80058d0:	f894 8000 	ldrb.w	r8, [r4]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80058d4:	f8da b010 	ldr.w	fp, [sl, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80058d8:	f008 083f 	and.w	r8, r8, #63	; 0x3f
 80058dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80058e0:	f04f 080d 	mov.w	r8, #13
 80058e4:	fb08 f803 	mul.w	r8, r8, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80058e8:	2101      	movs	r1, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80058ea:	4b30      	ldr	r3, [pc, #192]	; (80059ac <dir_find+0x168>)
 80058ec:	5cf2      	ldrb	r2, [r6, r3]
 80058ee:	18a3      	adds	r3, r4, r2
	rv = rv << 8 | ptr[0];
 80058f0:	7858      	ldrb	r0, [r3, #1]
 80058f2:	5ca3      	ldrb	r3, [r4, r2]
 80058f4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		if (wc) {
 80058f8:	b331      	cbz	r1, 8005948 <dir_find+0x104>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80058fa:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 80058fe:	d827      	bhi.n	8005950 <dir_find+0x10c>
 8005900:	4618      	mov	r0, r3
 8005902:	9303      	str	r3, [sp, #12]
 8005904:	f000 fff4 	bl	80068f0 <ff_wtoupper>
 8005908:	f108 0201 	add.w	r2, r8, #1
 800590c:	9002      	str	r0, [sp, #8]
 800590e:	f83b 0018 	ldrh.w	r0, [fp, r8, lsl #1]
 8005912:	9201      	str	r2, [sp, #4]
 8005914:	f000 ffec 	bl	80068f0 <ff_wtoupper>
 8005918:	9902      	ldr	r1, [sp, #8]
 800591a:	4281      	cmp	r1, r0
 800591c:	d118      	bne.n	8005950 <dir_find+0x10c>
	rv = rv << 8 | ptr[0];
 800591e:	9b03      	ldr	r3, [sp, #12]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005920:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 8005922:	4619      	mov	r1, r3
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005924:	4690      	mov	r8, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005926:	3601      	adds	r6, #1
 8005928:	2e0d      	cmp	r6, #13
 800592a:	d1de      	bne.n	80058ea <dir_find+0xa6>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800592c:	7823      	ldrb	r3, [r4, #0]
 800592e:	065a      	lsls	r2, r3, #25
 8005930:	d503      	bpl.n	800593a <dir_find+0xf6>
 8005932:	b111      	cbz	r1, 800593a <dir_find+0xf6>
 8005934:	f83b 3018 	ldrh.w	r3, [fp, r8, lsl #1]
 8005938:	b953      	cbnz	r3, 8005950 <dir_find+0x10c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800593a:	3f01      	subs	r7, #1
 800593c:	b2fe      	uxtb	r6, r7
 800593e:	e008      	b.n	8005952 <dir_find+0x10e>
 8005940:	42be      	cmp	r6, r7
 8005942:	d105      	bne.n	8005950 <dir_find+0x10c>
 8005944:	464b      	mov	r3, r9
 8005946:	e7b8      	b.n	80058ba <dir_find+0x76>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800594c:	4293      	cmp	r3, r2
 800594e:	d0ea      	beq.n	8005926 <dir_find+0xe2>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005950:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8005952:	2100      	movs	r1, #0
 8005954:	4628      	mov	r0, r5
 8005956:	f7ff fece 	bl	80056f6 <dir_next>
	} while (res == FR_OK);
 800595a:	4680      	mov	r8, r0
 800595c:	2800      	cmp	r0, #0
 800595e:	d084      	beq.n	800586a <dir_find+0x26>
 8005960:	e01b      	b.n	800599a <dir_find+0x156>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005962:	b926      	cbnz	r6, 800596e <dir_find+0x12a>
 8005964:	4620      	mov	r0, r4
 8005966:	f7ff fa40 	bl	8004dea <sum_sfn>
 800596a:	4581      	cmp	r9, r0
 800596c:	d015      	beq.n	800599a <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800596e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8005972:	07db      	lsls	r3, r3, #31
 8005974:	d490      	bmi.n	8005898 <dir_find+0x54>
 8005976:	f104 010b 	add.w	r1, r4, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800597a:	f105 0224 	add.w	r2, r5, #36	; 0x24
		r = *d++ - *s++;
 800597e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005982:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8005986:	428c      	cmp	r4, r1
		r = *d++ - *s++;
 8005988:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 800598c:	d002      	beq.n	8005994 <dir_find+0x150>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f5      	beq.n	800597e <dir_find+0x13a>
 8005992:	e781      	b.n	8005898 <dir_find+0x54>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005994:	2b00      	cmp	r3, #0
 8005996:	f47f af7f 	bne.w	8005898 <dir_find+0x54>
}
 800599a:	4640      	mov	r0, r8
 800599c:	b005      	add	sp, #20
 800599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a2:	4699      	mov	r9, r3
 80059a4:	e7d4      	b.n	8005950 <dir_find+0x10c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80059a6:	f04f 0804 	mov.w	r8, #4
 80059aa:	e7f6      	b.n	800599a <dir_find+0x156>
 80059ac:	08008388 	.word	0x08008388

080059b0 <dir_register>:
{
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80059b4:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
 80059b8:	f014 04a0 	ands.w	r4, r4, #160	; 0xa0
{
 80059bc:	b089      	sub	sp, #36	; 0x24
 80059be:	4605      	mov	r5, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80059c0:	f040 8084 	bne.w	8005acc <dir_register+0x11c>
	FATFS *fs = dp->obj.fs;
 80059c4:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80059c6:	6932      	ldr	r2, [r6, #16]
 80059c8:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d155      	bne.n	8005a7c <dir_register+0xcc>
	mem_cpy(sn, dp->fn, 12);
 80059d0:	f105 0724 	add.w	r7, r5, #36	; 0x24
 80059d4:	220c      	movs	r2, #12
 80059d6:	4639      	mov	r1, r7
 80059d8:	a805      	add	r0, sp, #20
 80059da:	f7ff fa48 	bl	8004e6e <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80059de:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80059e2:	07db      	lsls	r3, r3, #31
 80059e4:	d57b      	bpl.n	8005ade <dir_register+0x12e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80059e6:	2340      	movs	r3, #64	; 0x40
				if (sr & 0x10000) sr ^= 0x11021;
 80059e8:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8005c18 <dir_register+0x268>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80059ec:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80059f0:	f04f 0901 	mov.w	r9, #1
 80059f4:	220b      	movs	r2, #11
 80059f6:	a905      	add	r1, sp, #20
 80059f8:	4638      	mov	r0, r7
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80059fa:	f8d6 a010 	ldr.w	sl, [r6, #16]
 80059fe:	f7ff fa36 	bl	8004e6e <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005a02:	f1b9 0f05 	cmp.w	r9, #5
 8005a06:	d84e      	bhi.n	8005aa6 <dir_register+0xf6>
 8005a08:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8005a0a:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8005a0c:	f003 000f 	and.w	r0, r3, #15
 8005a10:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8005a14:	2939      	cmp	r1, #57	; 0x39
 8005a16:	bf88      	it	hi
 8005a18:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8005a1c:	3a01      	subs	r2, #1
 8005a1e:	a803      	add	r0, sp, #12
 8005a20:	4410      	add	r0, r2
	} while (seq);
 8005a22:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8005a24:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8005a26:	d1f1      	bne.n	8005a0c <dir_register+0x5c>
	ns[i] = '~';
 8005a28:	a908      	add	r1, sp, #32
 8005a2a:	4411      	add	r1, r2
 8005a2c:	207e      	movs	r0, #126	; 0x7e
 8005a2e:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d03d      	beq.n	8005ab2 <dir_register+0x102>
 8005a36:	5cf9      	ldrb	r1, [r7, r3]
 8005a38:	2920      	cmp	r1, #32
 8005a3a:	d138      	bne.n	8005aae <dir_register+0xfe>
 8005a3c:	443b      	add	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005a3e:	2a07      	cmp	r2, #7
 8005a40:	bf9b      	ittet	ls
 8005a42:	a908      	addls	r1, sp, #32
 8005a44:	1889      	addls	r1, r1, r2
 8005a46:	2120      	movhi	r1, #32
 8005a48:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8005a4c:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8005a50:	eba3 0107 	sub.w	r1, r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005a54:	bf98      	it	ls
 8005a56:	3201      	addls	r2, #1
	} while (j < 8);
 8005a58:	2907      	cmp	r1, #7
 8005a5a:	d9f0      	bls.n	8005a3e <dir_register+0x8e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f7ff fef1 	bl	8005844 <dir_find>
 8005a62:	4682      	mov	sl, r0
			if (res != FR_OK) break;
 8005a64:	bba8      	cbnz	r0, 8005ad2 <dir_register+0x122>
		for (n = 1; n < 100; n++) {
 8005a66:	f109 0901 	add.w	r9, r9, #1
 8005a6a:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8005a6e:	d1c1      	bne.n	80059f4 <dir_register+0x44>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005a70:	f04f 0a07 	mov.w	sl, #7
}
 8005a74:	4650      	mov	r0, sl
 8005a76:	b009      	add	sp, #36	; 0x24
 8005a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005a7c:	3401      	adds	r4, #1
 8005a7e:	e7a3      	b.n	80059c8 <dir_register+0x18>
		while (*lfn) {	/* Create a CRC */
 8005a80:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 8005a82:	f002 0e01 	and.w	lr, r2, #1
 8005a86:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005a8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005a8e:	bf18      	it	ne
 8005a90:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8005a94:	3801      	subs	r0, #1
				wc >>= 1;
 8005a96:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8005a9a:	d1f2      	bne.n	8005a82 <dir_register+0xd2>
		while (*lfn) {	/* Create a CRC */
 8005a9c:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8005aa0:	2a00      	cmp	r2, #0
 8005aa2:	d1ed      	bne.n	8005a80 <dir_register+0xd0>
 8005aa4:	e7b1      	b.n	8005a0a <dir_register+0x5a>
 8005aa6:	f1aa 0102 	sub.w	r1, sl, #2
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005aaa:	464b      	mov	r3, r9
 8005aac:	e7f6      	b.n	8005a9c <dir_register+0xec>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005aae:	3301      	adds	r3, #1
 8005ab0:	e7bf      	b.n	8005a32 <dir_register+0x82>
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	e7c2      	b.n	8005a3c <dir_register+0x8c>
				n = 0;					/* Not a blank entry. Restart to search */
 8005ab6:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 8005ab8:	2101      	movs	r1, #1
 8005aba:	4628      	mov	r0, r5
 8005abc:	f7ff fe1b 	bl	80056f6 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005ac0:	4682      	mov	sl, r0
 8005ac2:	b310      	cbz	r0, 8005b0a <dir_register+0x15a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005ac4:	f1ba 0f04 	cmp.w	sl, #4
 8005ac8:	d0d2      	beq.n	8005a70 <dir_register+0xc0>
 8005aca:	e7d3      	b.n	8005a74 <dir_register+0xc4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005acc:	f04f 0a06 	mov.w	sl, #6
 8005ad0:	e7d0      	b.n	8005a74 <dir_register+0xc4>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005ad2:	2804      	cmp	r0, #4
 8005ad4:	d1ce      	bne.n	8005a74 <dir_register+0xc4>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005ad6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005ada:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005ade:	f89d 301f 	ldrb.w	r3, [sp, #31]
	FATFS *fs = dp->obj.fs;
 8005ae2:	f8d5 9000 	ldr.w	r9, [r5]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005ae6:	079b      	lsls	r3, r3, #30
 8005ae8:	bf48      	it	mi
 8005aea:	340c      	addmi	r4, #12
	res = dir_sdi(dp, 0);
 8005aec:	f04f 0100 	mov.w	r1, #0
 8005af0:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005af2:	bf49      	itett	mi
 8005af4:	230d      	movmi	r3, #13
 8005af6:	2401      	movpl	r4, #1
 8005af8:	fbb4 f4f3 	udivmi	r4, r4, r3
 8005afc:	3401      	addmi	r4, #1
	res = dir_sdi(dp, 0);
 8005afe:	f7ff fd27 	bl	8005550 <dir_sdi>
	if (res == FR_OK) {
 8005b02:	4682      	mov	sl, r0
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d1dd      	bne.n	8005ac4 <dir_register+0x114>
 8005b08:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8005b0a:	69e9      	ldr	r1, [r5, #28]
 8005b0c:	4648      	mov	r0, r9
 8005b0e:	f7ff fa44 	bl	8004f9a <move_window>
			if (res != FR_OK) break;
 8005b12:	4682      	mov	sl, r0
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d1d5      	bne.n	8005ac4 <dir_register+0x114>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005b18:	6a2b      	ldr	r3, [r5, #32]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2be5      	cmp	r3, #229	; 0xe5
 8005b1e:	d001      	beq.n	8005b24 <dir_register+0x174>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1c8      	bne.n	8005ab6 <dir_register+0x106>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005b24:	f108 0801 	add.w	r8, r8, #1
 8005b28:	4544      	cmp	r4, r8
 8005b2a:	d1c5      	bne.n	8005ab8 <dir_register+0x108>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005b2c:	3c01      	subs	r4, #1
 8005b2e:	d056      	beq.n	8005bde <dir_register+0x22e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005b30:	6969      	ldr	r1, [r5, #20]
 8005b32:	4628      	mov	r0, r5
 8005b34:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8005b38:	f7ff fd0a 	bl	8005550 <dir_sdi>
		if (res == FR_OK) {
 8005b3c:	4682      	mov	sl, r0
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d198      	bne.n	8005a74 <dir_register+0xc4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005b42:	4638      	mov	r0, r7
 8005b44:	f7ff f951 	bl	8004dea <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005b48:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005b4c:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8005b4e:	69e9      	ldr	r1, [r5, #28]
 8005b50:	4630      	mov	r0, r6
 8005b52:	f7ff fa22 	bl	8004f9a <move_window>
 8005b56:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d18b      	bne.n	8005a74 <dir_register+0xc4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005b5c:	6a2b      	ldr	r3, [r5, #32]
 8005b5e:	f8d6 c010 	ldr.w	ip, [r6, #16]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005b62:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005b66:	220f      	movs	r2, #15
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005b68:	b2e1      	uxtb	r1, r4
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005b6a:	f04f 0e0d 	mov.w	lr, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005b6e:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005b70:	1e4a      	subs	r2, r1, #1
 8005b72:	fb0e f202 	mul.w	r2, lr, r2
	dir[LDIR_Type] = 0;
 8005b76:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b78:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8005b7a:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005b7c:	9201      	str	r2, [sp, #4]
	s = wc = 0;
 8005b7e:	4686      	mov	lr, r0
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005b80:	4548      	cmp	r0, r9
 8005b82:	bf1f      	itttt	ne
 8005b84:	9a01      	ldrne	r2, [sp, #4]
 8005b86:	f83c 0012 	ldrhne.w	r0, [ip, r2, lsl #1]
 8005b8a:	3201      	addne	r2, #1
 8005b8c:	9201      	strne	r2, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005b8e:	4a21      	ldr	r2, [pc, #132]	; (8005c14 <dir_register+0x264>)
 8005b90:	f81e a002 	ldrb.w	sl, [lr, r2]
	} while (++s < 13);
 8005b94:	f10e 0e01 	add.w	lr, lr, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005b98:	eb03 0b0a 	add.w	fp, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8005b9c:	f803 000a 	strb.w	r0, [r3, sl]
 8005ba0:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	bf08      	it	eq
 8005ba8:	4648      	moveq	r0, r9
	} while (++s < 13);
 8005baa:	f1be 0f0d 	cmp.w	lr, #13
	*ptr++ = (BYTE)val;
 8005bae:	f88b a001 	strb.w	sl, [fp, #1]
	} while (++s < 13);
 8005bb2:	d1e5      	bne.n	8005b80 <dir_register+0x1d0>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005bb4:	4548      	cmp	r0, r9
 8005bb6:	d003      	beq.n	8005bc0 <dir_register+0x210>
 8005bb8:	9a01      	ldr	r2, [sp, #4]
 8005bba:	f83c 2012 	ldrh.w	r2, [ip, r2, lsl #1]
 8005bbe:	b90a      	cbnz	r2, 8005bc4 <dir_register+0x214>
 8005bc0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005bc4:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f7ff fd92 	bl	80056f6 <dir_next>
			} while (res == FR_OK && --nent);
 8005bd2:	4682      	mov	sl, r0
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	f47f af4d 	bne.w	8005a74 <dir_register+0xc4>
 8005bda:	3c01      	subs	r4, #1
 8005bdc:	d1b7      	bne.n	8005b4e <dir_register+0x19e>
		res = move_window(fs, dp->sect);
 8005bde:	69e9      	ldr	r1, [r5, #28]
 8005be0:	4630      	mov	r0, r6
 8005be2:	f7ff f9da 	bl	8004f9a <move_window>
		if (res == FR_OK) {
 8005be6:	4682      	mov	sl, r0
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f47f af43 	bne.w	8005a74 <dir_register+0xc4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005bee:	2220      	movs	r2, #32
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	6a28      	ldr	r0, [r5, #32]
 8005bf4:	f7ff f852 	bl	8004c9c <mem_set>
 8005bf8:	220b      	movs	r2, #11
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	6a28      	ldr	r0, [r5, #32]
 8005bfe:	f7ff f936 	bl	8004e6e <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005c02:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8005c06:	6a2a      	ldr	r2, [r5, #32]
 8005c08:	f003 0318 	and.w	r3, r3, #24
 8005c0c:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	70f3      	strb	r3, [r6, #3]
 8005c12:	e72f      	b.n	8005a74 <dir_register+0xc4>
 8005c14:	08008388 	.word	0x08008388
 8005c18:	00011021 	.word	0x00011021

08005c1c <dir_read.constprop.9>:
FRESULT dir_read (
 8005c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8005c20:	25ff      	movs	r5, #255	; 0xff
	FATFS *fs = dp->obj.fs;
 8005c22:	6806      	ldr	r6, [r0, #0]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005c24:	4f45      	ldr	r7, [pc, #276]	; (8005d3c <dir_read.constprop.9+0x120>)
FRESULT dir_read (
 8005c26:	4681      	mov	r9, r0
	BYTE ord = 0xFF, sum = 0xFF;
 8005c28:	462c      	mov	r4, r5
	FRESULT res = FR_NO_FILE;
 8005c2a:	f04f 0a04 	mov.w	sl, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005c2e:	f64f 78ff 	movw	r8, #65535	; 0xffff
	while (dp->sect) {
 8005c32:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8005c36:	b919      	cbnz	r1, 8005c40 <dir_read.constprop.9+0x24>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005c38:	f1ba 0f00 	cmp.w	sl, #0
 8005c3c:	d071      	beq.n	8005d22 <dir_read.constprop.9+0x106>
 8005c3e:	e064      	b.n	8005d0a <dir_read.constprop.9+0xee>
		res = move_window(fs, dp->sect);
 8005c40:	4630      	mov	r0, r6
 8005c42:	f7ff f9aa 	bl	8004f9a <move_window>
		if (res != FR_OK) break;
 8005c46:	4682      	mov	sl, r0
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d15e      	bne.n	8005d0a <dir_read.constprop.9+0xee>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005c4c:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8005c50:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d06f      	beq.n	8005d36 <dir_read.constprop.9+0x11a>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005c56:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005c58:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005c5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005c5e:	f889 2006 	strb.w	r2, [r9, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005c62:	d04a      	beq.n	8005cfa <dir_read.constprop.9+0xde>
 8005c64:	2b2e      	cmp	r3, #46	; 0x2e
 8005c66:	d048      	beq.n	8005cfa <dir_read.constprop.9+0xde>
 8005c68:	f022 0120 	bic.w	r1, r2, #32
 8005c6c:	2908      	cmp	r1, #8
 8005c6e:	d044      	beq.n	8005cfa <dir_read.constprop.9+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005c70:	2a0f      	cmp	r2, #15
 8005c72:	d151      	bne.n	8005d18 <dir_read.constprop.9+0xfc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005c74:	065a      	lsls	r2, r3, #25
 8005c76:	d53e      	bpl.n	8005cf6 <dir_read.constprop.9+0xda>
						c &= (BYTE)~LLEF; ord = c;
 8005c78:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8005c7c:	f8d9 3014 	ldr.w	r3, [r9, #20]
						sum = dp->dir[LDIR_Chksum];
 8005c80:	7b45      	ldrb	r5, [r0, #13]
						dp->blk_ofs = dp->dptr;
 8005c82:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c86:	7b43      	ldrb	r3, [r0, #13]
 8005c88:	42ab      	cmp	r3, r5
 8005c8a:	d136      	bne.n	8005cfa <dir_read.constprop.9+0xde>
	rv = rv << 8 | ptr[0];
 8005c8c:	7ec2      	ldrb	r2, [r0, #27]
 8005c8e:	7e83      	ldrb	r3, [r0, #26]
 8005c90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005c94:	b21b      	sxth	r3, r3
 8005c96:	bb83      	cbnz	r3, 8005cfa <dir_read.constprop.9+0xde>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005c98:	7802      	ldrb	r2, [r0, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c9a:	6931      	ldr	r1, [r6, #16]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca0:	3a01      	subs	r2, #1
 8005ca2:	f04f 0e0d 	mov.w	lr, #13
 8005ca6:	fb0e fe02 	mul.w	lr, lr, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005caa:	f04f 0c01 	mov.w	ip, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005cae:	f813 a007 	ldrb.w	sl, [r3, r7]
 8005cb2:	eb00 020a 	add.w	r2, r0, sl
	rv = rv << 8 | ptr[0];
 8005cb6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8005cba:	f810 200a 	ldrb.w	r2, [r0, sl]
 8005cbe:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc) {
 8005cc2:	f1bc 0f00 	cmp.w	ip, #0
 8005cc6:	d024      	beq.n	8005d12 <dir_read.constprop.9+0xf6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005cc8:	f1be 0ffe 	cmp.w	lr, #254	; 0xfe
 8005ccc:	d815      	bhi.n	8005cfa <dir_read.constprop.9+0xde>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005cce:	f821 201e 	strh.w	r2, [r1, lr, lsl #1]
	rv = rv << 8 | ptr[0];
 8005cd2:	4694      	mov	ip, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005cd4:	f10e 0e01 	add.w	lr, lr, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005cd8:	3301      	adds	r3, #1
 8005cda:	2b0d      	cmp	r3, #13
 8005cdc:	d1e7      	bne.n	8005cae <dir_read.constprop.9+0x92>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005cde:	7803      	ldrb	r3, [r0, #0]
 8005ce0:	065b      	lsls	r3, r3, #25
 8005ce2:	d505      	bpl.n	8005cf0 <dir_read.constprop.9+0xd4>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8005ce4:	f1be 0ffe 	cmp.w	lr, #254	; 0xfe
 8005ce8:	d807      	bhi.n	8005cfa <dir_read.constprop.9+0xde>
		lfnbuf[i] = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f821 301e 	strh.w	r3, [r1, lr, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005cf0:	3c01      	subs	r4, #1
 8005cf2:	b2e4      	uxtb	r4, r4
 8005cf4:	e002      	b.n	8005cfc <dir_read.constprop.9+0xe0>
 8005cf6:	42a3      	cmp	r3, r4
 8005cf8:	d0c5      	beq.n	8005c86 <dir_read.constprop.9+0x6a>
 8005cfa:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4648      	mov	r0, r9
 8005d00:	f7ff fcf9 	bl	80056f6 <dir_next>
		if (res != FR_OK) break;
 8005d04:	4682      	mov	sl, r0
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d093      	beq.n	8005c32 <dir_read.constprop.9+0x16>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f8c9 301c 	str.w	r3, [r9, #28]
 8005d10:	e009      	b.n	8005d26 <dir_read.constprop.9+0x10a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005d12:	4542      	cmp	r2, r8
 8005d14:	d0e0      	beq.n	8005cd8 <dir_read.constprop.9+0xbc>
 8005d16:	e7f0      	b.n	8005cfa <dir_read.constprop.9+0xde>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005d18:	b944      	cbnz	r4, 8005d2c <dir_read.constprop.9+0x110>
 8005d1a:	f7ff f866 	bl	8004dea <sum_sfn>
 8005d1e:	42a8      	cmp	r0, r5
 8005d20:	d104      	bne.n	8005d2c <dir_read.constprop.9+0x110>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005d22:	f04f 0a00 	mov.w	sl, #0
}
 8005d26:	4650      	mov	r0, sl
 8005d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d30:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8005d34:	e7f7      	b.n	8005d26 <dir_read.constprop.9+0x10a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005d36:	f04f 0a04 	mov.w	sl, #4
 8005d3a:	e7e6      	b.n	8005d0a <dir_read.constprop.9+0xee>
 8005d3c:	08008388 	.word	0x08008388

08005d40 <follow_path>:
{
 8005d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8005d44:	6803      	ldr	r3, [r0, #0]
 8005d46:	9300      	str	r3, [sp, #0]
{
 8005d48:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005d4a:	780b      	ldrb	r3, [r1, #0]
 8005d4c:	2b2f      	cmp	r3, #47	; 0x2f
 8005d4e:	4688      	mov	r8, r1
 8005d50:	f101 0101 	add.w	r1, r1, #1
 8005d54:	d0f9      	beq.n	8005d4a <follow_path+0xa>
 8005d56:	2b5c      	cmp	r3, #92	; 0x5c
 8005d58:	d0f7      	beq.n	8005d4a <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005d5e:	f898 3000 	ldrb.w	r3, [r8]
 8005d62:	2b1f      	cmp	r3, #31
 8005d64:	d87b      	bhi.n	8005e5e <follow_path+0x11e>
		dp->fn[NSFLAG] = NS_NONAME;
 8005d66:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8005d68:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8005d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8005d6e:	b003      	add	sp, #12
 8005d70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8005d74:	f7ff bbec 	b.w	8005550 <dir_sdi>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005d78:	285c      	cmp	r0, #92	; 0x5c
 8005d7a:	f000 8081 	beq.w	8005e80 <follow_path+0x140>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005d7e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8005d82:	d00b      	beq.n	8005d9c <follow_path+0x5c>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005d84:	2101      	movs	r1, #1
 8005d86:	f000 fd95 	bl	80068b4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005d8a:	b138      	cbz	r0, 8005d9c <follow_path+0x5c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005d8c:	287f      	cmp	r0, #127	; 0x7f
 8005d8e:	d807      	bhi.n	8005da0 <follow_path+0x60>
 8005d90:	4987      	ldr	r1, [pc, #540]	; (8005fb0 <follow_path+0x270>)
	while (*str && *str != chr) str++;
 8005d92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005d96:	b11a      	cbz	r2, 8005da0 <follow_path+0x60>
 8005d98:	4290      	cmp	r0, r2
 8005d9a:	d1fa      	bne.n	8005d92 <follow_path+0x52>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005d9c:	2006      	movs	r0, #6
 8005d9e:	e0f6      	b.n	8005f8e <follow_path+0x24e>
		lfn[di++] = w;					/* Store the Unicode character */
 8005da0:	f825 0f02 	strh.w	r0, [r5, #2]!
 8005da4:	4626      	mov	r6, r4
 8005da6:	e062      	b.n	8005e6e <follow_path+0x12e>
		w = lfn[di - 1];
 8005da8:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8005dac:	2920      	cmp	r1, #32
 8005dae:	d001      	beq.n	8005db4 <follow_path+0x74>
 8005db0:	292e      	cmp	r1, #46	; 0x2e
 8005db2:	d178      	bne.n	8005ea6 <follow_path+0x166>
		di--;
 8005db4:	3e01      	subs	r6, #1
 8005db6:	e074      	b.n	8005ea2 <follow_path+0x162>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005db8:	3101      	adds	r1, #1
 8005dba:	e084      	b.n	8005ec6 <follow_path+0x186>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005dbc:	45d1      	cmp	r9, sl
 8005dbe:	f080 80ac 	bcs.w	8005f1a <follow_path+0x1da>
 8005dc2:	42b2      	cmp	r2, r6
 8005dc4:	d111      	bne.n	8005dea <follow_path+0xaa>
			if (ni == 11) {				/* Long extension */
 8005dc6:	f1ba 0f0b 	cmp.w	sl, #11
 8005dca:	d106      	bne.n	8005dda <follow_path+0x9a>
 8005dcc:	e0a9      	b.n	8005f22 <follow_path+0x1e2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005dce:	42b2      	cmp	r2, r6
 8005dd0:	d003      	beq.n	8005dda <follow_path+0x9a>
 8005dd2:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8005dd6:	f200 80a8 	bhi.w	8005f2a <follow_path+0x1ea>
			b <<= 2; continue;
 8005dda:	00ad      	lsls	r5, r5, #2
 8005ddc:	b2ed      	uxtb	r5, r5
 8005dde:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005de0:	f04f 0a0b 	mov.w	sl, #11
 8005de4:	f04f 0908 	mov.w	r9, #8
 8005de8:	e090      	b.n	8005f0c <follow_path+0x1cc>
		if (w >= 0x80) {				/* Non ASCII character */
 8005dea:	287f      	cmp	r0, #127	; 0x7f
 8005dec:	d90d      	bls.n	8005e0a <follow_path+0xca>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005dee:	2100      	movs	r1, #0
 8005df0:	9201      	str	r2, [sp, #4]
 8005df2:	f000 fd5f 	bl	80068b4 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005df6:	9a01      	ldr	r2, [sp, #4]
 8005df8:	b118      	cbz	r0, 8005e02 <follow_path+0xc2>
 8005dfa:	4b6e      	ldr	r3, [pc, #440]	; (8005fb4 <follow_path+0x274>)
 8005dfc:	4418      	add	r0, r3
 8005dfe:	f810 0c80 	ldrb.w	r0, [r0, #-128]
 8005e02:	b280      	uxth	r0, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 8005e04:	f044 0402 	orr.w	r4, r4, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005e08:	b138      	cbz	r0, 8005e1a <follow_path+0xda>
 8005e0a:	4b6b      	ldr	r3, [pc, #428]	; (8005fb8 <follow_path+0x278>)
	while (*str && *str != chr) str++;
 8005e0c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8005e10:	2900      	cmp	r1, #0
 8005e12:	f000 80bf 	beq.w	8005f94 <follow_path+0x254>
 8005e16:	4281      	cmp	r1, r0
 8005e18:	d1f8      	bne.n	8005e0c <follow_path+0xcc>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005e1a:	f044 0403 	orr.w	r4, r4, #3
 8005e1e:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8005e20:	eb07 0109 	add.w	r1, r7, r9
 8005e24:	f109 0901 	add.w	r9, r9, #1
 8005e28:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8005e2c:	e06e      	b.n	8005f0c <follow_path+0x1cc>
					b |= 2;
 8005e2e:	f045 0502 	orr.w	r5, r5, #2
 8005e32:	e7f5      	b.n	8005e20 <follow_path+0xe0>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e34:	075a      	lsls	r2, r3, #29
 8005e36:	f100 80aa 	bmi.w	8005f8e <follow_path+0x24e>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005e3a:	79bb      	ldrb	r3, [r7, #6]
 8005e3c:	06db      	lsls	r3, r3, #27
 8005e3e:	d567      	bpl.n	8005f10 <follow_path+0x1d0>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005e40:	9b00      	ldr	r3, [sp, #0]
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	899a      	ldrh	r2, [r3, #12]
 8005e46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e4a:	fbb0 f3f2 	udiv	r3, r0, r2
 8005e4e:	fb02 0313 	mls	r3, r2, r3, r0
 8005e52:	4419      	add	r1, r3
 8005e54:	9b00      	ldr	r3, [sp, #0]
 8005e56:	7818      	ldrb	r0, [r3, #0]
 8005e58:	f7ff f812 	bl	8004e80 <ld_clust.isra.1>
 8005e5c:	60b8      	str	r0, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8005e64:	f108 39ff 	add.w	r9, r8, #4294967295
 8005e68:	f1ab 0502 	sub.w	r5, fp, #2
 8005e6c:	2600      	movs	r6, #0
		w = p[si++];					/* Get a character */
 8005e6e:	f819 0f01 	ldrb.w	r0, [r9, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8005e72:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 8005e74:	f106 0401 	add.w	r4, r6, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8005e78:	d90c      	bls.n	8005e94 <follow_path+0x154>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005e7a:	282f      	cmp	r0, #47	; 0x2f
 8005e7c:	f47f af7c 	bne.w	8005d78 <follow_path+0x38>
 8005e80:	eb08 0204 	add.w	r2, r8, r4
 8005e84:	eba2 0408 	sub.w	r4, r2, r8
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005e88:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005e8c:	292f      	cmp	r1, #47	; 0x2f
 8005e8e:	d0f9      	beq.n	8005e84 <follow_path+0x144>
 8005e90:	295c      	cmp	r1, #92	; 0x5c
 8005e92:	d0f7      	beq.n	8005e84 <follow_path+0x144>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005e94:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 8005e96:	44a0      	add	r8, r4
 8005e98:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005e9c:	bf34      	ite	cc
 8005e9e:	2404      	movcc	r4, #4
 8005ea0:	2400      	movcs	r4, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005ea2:	2e00      	cmp	r6, #0
 8005ea4:	d180      	bne.n	8005da8 <follow_path+0x68>
	lfn[di] = 0;						/* LFN is created */
 8005ea6:	f04f 0900 	mov.w	r9, #0
 8005eaa:	eb0b 0546 	add.w	r5, fp, r6, lsl #1
 8005eae:	f82b 9016 	strh.w	r9, [fp, r6, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005eb2:	2e00      	cmp	r6, #0
 8005eb4:	f43f af72 	beq.w	8005d9c <follow_path+0x5c>
	mem_set(dp->fn, ' ', 11);
 8005eb8:	2120      	movs	r1, #32
 8005eba:	220b      	movs	r2, #11
 8005ebc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ec0:	f7fe feec 	bl	8004c9c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 8005eca:	2a20      	cmp	r2, #32
 8005ecc:	f43f af74 	beq.w	8005db8 <follow_path+0x78>
 8005ed0:	2a2e      	cmp	r2, #46	; 0x2e
 8005ed2:	f43f af71 	beq.w	8005db8 <follow_path+0x78>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005ed6:	b109      	cbz	r1, 8005edc <follow_path+0x19c>
 8005ed8:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005edc:	f835 2d02 	ldrh.w	r2, [r5, #-2]!
 8005ee0:	2a2e      	cmp	r2, #46	; 0x2e
 8005ee2:	d001      	beq.n	8005ee8 <follow_path+0x1a8>
 8005ee4:	3e01      	subs	r6, #1
 8005ee6:	d1f9      	bne.n	8005edc <follow_path+0x19c>
		dp->fn[i++] = (BYTE)w;
 8005ee8:	f04f 0900 	mov.w	r9, #0
 8005eec:	f04f 0a08 	mov.w	sl, #8
 8005ef0:	464d      	mov	r5, r9
		w = lfn[si++];					/* Get an LFN character */
 8005ef2:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 8005ef6:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8005ef8:	b1b8      	cbz	r0, 8005f2a <follow_path+0x1ea>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005efa:	2820      	cmp	r0, #32
 8005efc:	d004      	beq.n	8005f08 <follow_path+0x1c8>
 8005efe:	282e      	cmp	r0, #46	; 0x2e
 8005f00:	f47f af5c 	bne.w	8005dbc <follow_path+0x7c>
 8005f04:	42b2      	cmp	r2, r6
 8005f06:	d005      	beq.n	8005f14 <follow_path+0x1d4>
			cf |= NS_LOSS | NS_LFN; continue;
 8005f08:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	e7f0      	b.n	8005ef2 <follow_path+0x1b2>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f10:	2005      	movs	r0, #5
	return res;
 8005f12:	e03c      	b.n	8005f8e <follow_path+0x24e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005f14:	45d1      	cmp	r9, sl
 8005f16:	f4ff af56 	bcc.w	8005dc6 <follow_path+0x86>
			if (ni == 11) {				/* Long extension */
 8005f1a:	f1ba 0f0b 	cmp.w	sl, #11
 8005f1e:	f47f af56 	bne.w	8005dce <follow_path+0x8e>
				cf |= NS_LOSS | NS_LFN; break;
 8005f22:	f044 0403 	orr.w	r4, r4, #3
 8005f26:	f04f 0a0b 	mov.w	sl, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f2e:	2be5      	cmp	r3, #229	; 0xe5
 8005f30:	bf04      	itt	eq
 8005f32:	2305      	moveq	r3, #5
 8005f34:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8005f38:	f1ba 0f08 	cmp.w	sl, #8
 8005f3c:	bf04      	itt	eq
 8005f3e:	00ad      	lsleq	r5, r5, #2
 8005f40:	b2ed      	uxtbeq	r5, r5
 8005f42:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d003      	beq.n	8005f52 <follow_path+0x212>
 8005f4a:	f005 0203 	and.w	r2, r5, #3
 8005f4e:	2a03      	cmp	r2, #3
 8005f50:	d101      	bne.n	8005f56 <follow_path+0x216>
 8005f52:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005f56:	07a1      	lsls	r1, r4, #30
 8005f58:	d409      	bmi.n	8005f6e <follow_path+0x22e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005f5a:	f005 0503 	and.w	r5, r5, #3
 8005f5e:	2d01      	cmp	r5, #1
 8005f60:	bf08      	it	eq
 8005f62:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	bf08      	it	eq
 8005f6a:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005f6e:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f72:	4638      	mov	r0, r7
 8005f74:	f7ff fc66 	bl	8005844 <dir_find>
			ns = dp->fn[NSFLAG];
 8005f78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f43f af59 	beq.w	8005e34 <follow_path+0xf4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f82:	2804      	cmp	r0, #4
 8005f84:	d103      	bne.n	8005f8e <follow_path+0x24e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f86:	f013 0f04 	tst.w	r3, #4
 8005f8a:	bf08      	it	eq
 8005f8c:	2005      	moveq	r0, #5
}
 8005f8e:	b003      	add	sp, #12
 8005f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (IsUpper(w)) {		/* ASCII large capital */
 8005f94:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8005f98:	2919      	cmp	r1, #25
 8005f9a:	f67f af48 	bls.w	8005e2e <follow_path+0xee>
					if (IsLower(w)) {	/* ASCII small capital */
 8005f9e:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8005fa2:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8005fa4:	bf9e      	ittt	ls
 8005fa6:	3820      	subls	r0, #32
 8005fa8:	f045 0501 	orrls.w	r5, r5, #1
 8005fac:	b280      	uxthls	r0, r0
 8005fae:	e737      	b.n	8005e20 <follow_path+0xe0>
 8005fb0:	08008394 	.word	0x08008394
 8005fb4:	08008308 	.word	0x08008308
 8005fb8:	0800839d 	.word	0x0800839d

08005fbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005fbe:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005fc0:	a804      	add	r0, sp, #16
{
 8005fc2:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8005fc4:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8005fc8:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005fca:	f7fe ff1d 	bl	8004e08 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fce:	1e05      	subs	r5, r0, #0
 8005fd0:	db1f      	blt.n	8006012 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005fd2:	4912      	ldr	r1, [pc, #72]	; (800601c <f_mount+0x60>)
 8005fd4:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8005fd8:	b15c      	cbz	r4, 8005ff2 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005fda:	4b11      	ldr	r3, [pc, #68]	; (8006020 <f_mount+0x64>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4294      	cmp	r4, r2
 8005fe0:	bf04      	itt	eq
 8005fe2:	2200      	moveq	r2, #0
 8005fe4:	601a      	streq	r2, [r3, #0]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	2000      	movs	r0, #0
 8005fea:	4294      	cmp	r4, r2
 8005fec:	bf08      	it	eq
 8005fee:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ff0:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8005ff2:	9801      	ldr	r0, [sp, #4]
 8005ff4:	b108      	cbz	r0, 8005ffa <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ffa:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ffe:	b130      	cbz	r0, 800600e <f_mount+0x52>
 8006000:	2e01      	cmp	r6, #1
 8006002:	d108      	bne.n	8006016 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006004:	2200      	movs	r2, #0
 8006006:	a901      	add	r1, sp, #4
 8006008:	4668      	mov	r0, sp
 800600a:	f7ff f821 	bl	8005050 <find_volume>
	LEAVE_FF(fs, res);
}
 800600e:	b004      	add	sp, #16
 8006010:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8006012:	200b      	movs	r0, #11
 8006014:	e7fb      	b.n	800600e <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006016:	2000      	movs	r0, #0
 8006018:	e7f9      	b.n	800600e <f_mount+0x52>
 800601a:	bf00      	nop
 800601c:	20000104 	.word	0x20000104
 8006020:	20000108 	.word	0x20000108

08006024 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006028:	b091      	sub	sp, #68	; 0x44
 800602a:	4690      	mov	r8, r2
 800602c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800602e:	4605      	mov	r5, r0
 8006030:	2800      	cmp	r0, #0
 8006032:	f000 80f0 	beq.w	8006216 <f_open+0x1f2>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006036:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800603a:	4632      	mov	r2, r6
 800603c:	a902      	add	r1, sp, #8
 800603e:	a801      	add	r0, sp, #4
 8006040:	f7ff f806 	bl	8005050 <find_volume>
	if (res == FR_OK) {
 8006044:	2800      	cmp	r0, #0
 8006046:	f040 80e4 	bne.w	8006212 <f_open+0x1ee>
		dj.obj.fs = fs;
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
 800604e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006052:	f000 fc8f 	bl	8006974 <ff_memalloc>
 8006056:	4607      	mov	r7, r0
 8006058:	2800      	cmp	r0, #0
 800605a:	f000 80de 	beq.w	800621a <f_open+0x1f6>
 800605e:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006060:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8006062:	6118      	str	r0, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006064:	a803      	add	r0, sp, #12
 8006066:	f7ff fe6b 	bl	8005d40 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800606a:	4604      	mov	r4, r0
 800606c:	b960      	cbnz	r0, 8006088 <f_open+0x64>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800606e:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8006072:	2b00      	cmp	r3, #0
 8006074:	db66      	blt.n	8006144 <f_open+0x120>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006076:	f016 0f3e 	tst.w	r6, #62	; 0x3e
 800607a:	bf14      	ite	ne
 800607c:	2101      	movne	r1, #1
 800607e:	2100      	moveq	r1, #0
 8006080:	a803      	add	r0, sp, #12
 8006082:	f7fe fe11 	bl	8004ca8 <chk_lock>
 8006086:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006088:	f018 0f1c 	tst.w	r8, #28
 800608c:	d066      	beq.n	800615c <f_open+0x138>
			if (res != FR_OK) {					/* No file, create new */
 800608e:	2c00      	cmp	r4, #0
 8006090:	d05a      	beq.n	8006148 <f_open+0x124>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006092:	2c04      	cmp	r4, #4
 8006094:	f040 80e8 	bne.w	8006268 <f_open+0x244>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006098:	4b75      	ldr	r3, [pc, #468]	; (8006270 <f_open+0x24c>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	b11a      	cbz	r2, 80060a6 <f_open+0x82>
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f040 80e0 	bne.w	8006266 <f_open+0x242>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80060a6:	a803      	add	r0, sp, #12
 80060a8:	f7ff fc82 	bl	80059b0 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80060ac:	4604      	mov	r4, r0
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d13e      	bne.n	8006130 <f_open+0x10c>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80060b2:	f046 0608 	orr.w	r6, r6, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80060b6:	0730      	lsls	r0, r6, #28
 80060b8:	d55b      	bpl.n	8006172 <f_open+0x14e>
				dw = GET_FATTIME();
 80060ba:	f000 fdd5 	bl	8006c68 <get_fattime>
 80060be:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80060c0:	4601      	mov	r1, r0
 80060c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80060c4:	300e      	adds	r0, #14
 80060c6:	f7fe fde1 	bl	8004c8c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80060ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80060cc:	4611      	mov	r1, r2
 80060ce:	3016      	adds	r0, #22
 80060d0:	f7fe fddc 	bl	8004c8c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80060d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80060d6:	9c02      	ldr	r4, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80060d8:	2220      	movs	r2, #32
 80060da:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80060dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80060e0:	7820      	ldrb	r0, [r4, #0]
 80060e2:	4649      	mov	r1, r9
 80060e4:	f7fe fecc 	bl	8004e80 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80060e8:	2200      	movs	r2, #0
 80060ea:	4649      	mov	r1, r9
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80060ec:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80060ee:	4620      	mov	r0, r4
 80060f0:	f7fe fed4 	bl	8004e9c <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 80060f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 80060f6:	2200      	movs	r2, #0
 80060f8:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80060fa:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80060fc:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80060fe:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8006100:	9b02      	ldr	r3, [sp, #8]
 8006102:	2101      	movs	r1, #1
 8006104:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006106:	f1b8 0f00 	cmp.w	r8, #0
 800610a:	d032      	beq.n	8006172 <f_open+0x14e>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800610c:	4641      	mov	r1, r8
 800610e:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8006110:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8006114:	f7ff fab9 	bl	800568a <remove_chain>
						if (res == FR_OK) {
 8006118:	4604      	mov	r4, r0
 800611a:	b948      	cbnz	r0, 8006130 <f_open+0x10c>
							res = move_window(fs, dw);
 800611c:	4649      	mov	r1, r9
 800611e:	9802      	ldr	r0, [sp, #8]
 8006120:	f7fe ff3b 	bl	8004f9a <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006124:	9b02      	ldr	r3, [sp, #8]
 8006126:	f108 31ff 	add.w	r1, r8, #4294967295
 800612a:	6159      	str	r1, [r3, #20]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800612c:	4604      	mov	r4, r0
 800612e:	b300      	cbz	r0, 8006172 <f_open+0x14e>
				}
			}
#endif
		}

		FREE_NAMBUF();
 8006130:	4638      	mov	r0, r7
 8006132:	f000 fc21 	bl	8006978 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006136:	b10c      	cbz	r4, 800613c <f_open+0x118>
 8006138:	2300      	movs	r3, #0
 800613a:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 800613c:	4620      	mov	r0, r4
 800613e:	b011      	add	sp, #68	; 0x44
 8006140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = FR_INVALID_NAME;
 8006144:	2406      	movs	r4, #6
 8006146:	e79f      	b.n	8006088 <f_open+0x64>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006148:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800614c:	f013 0f11 	tst.w	r3, #17
 8006150:	d15d      	bne.n	800620e <f_open+0x1ea>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006152:	f018 0f04 	tst.w	r8, #4
 8006156:	d0ae      	beq.n	80060b6 <f_open+0x92>
 8006158:	2408      	movs	r4, #8
 800615a:	e7e9      	b.n	8006130 <f_open+0x10c>
			if (res == FR_OK) {					/* Following succeeded */
 800615c:	2c00      	cmp	r4, #0
 800615e:	d1e7      	bne.n	8006130 <f_open+0x10c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006160:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006164:	06da      	lsls	r2, r3, #27
 8006166:	d450      	bmi.n	800620a <f_open+0x1e6>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006168:	f018 0f02 	tst.w	r8, #2
 800616c:	d001      	beq.n	8006172 <f_open+0x14e>
 800616e:	07dc      	lsls	r4, r3, #31
 8006170:	d44d      	bmi.n	800620e <f_open+0x1ea>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006172:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006174:	0730      	lsls	r0, r6, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006178:	626b      	str	r3, [r5, #36]	; 0x24
				mode |= FA_MODIFIED;
 800617a:	bf48      	it	mi
 800617c:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006180:	f016 0ffe 	tst.w	r6, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8006184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006186:	62ab      	str	r3, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006188:	bf14      	ite	ne
 800618a:	2101      	movne	r1, #1
 800618c:	2100      	moveq	r1, #0
 800618e:	a803      	add	r0, sp, #12
 8006190:	f7fe fdb8 	bl	8004d04 <inc_lock>
 8006194:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006196:	2800      	cmp	r0, #0
 8006198:	d141      	bne.n	800621e <f_open+0x1fa>
 800619a:	2402      	movs	r4, #2
 800619c:	e7c8      	b.n	8006130 <f_open+0x10c>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800619e:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80061a0:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80061a2:	895a      	ldrh	r2, [r3, #10]
 80061a4:	f8b3 900c 	ldrh.w	r9, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80061a8:	61ae      	str	r6, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80061aa:	fb09 f902 	mul.w	r9, r9, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061ae:	45b1      	cmp	r9, r6
 80061b0:	d301      	bcc.n	80061b6 <f_open+0x192>
 80061b2:	2400      	movs	r4, #0
 80061b4:	e00c      	b.n	80061d0 <f_open+0x1ac>
					clst = get_fat(&fp->obj, clst);
 80061b6:	6828      	ldr	r0, [r5, #0]
 80061b8:	f7ff f95a 	bl	8005470 <get_fat.isra.7>
					if (clst <= 1) res = FR_INT_ERR;
 80061bc:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80061be:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80061c0:	d921      	bls.n	8006206 <f_open+0x1e2>
 80061c2:	1c42      	adds	r2, r0, #1
 80061c4:	4254      	negs	r4, r2
 80061c6:	4154      	adcs	r4, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061c8:	eba6 0609 	sub.w	r6, r6, r9
 80061cc:	2c00      	cmp	r4, #0
 80061ce:	d0ee      	beq.n	80061ae <f_open+0x18a>
				fp->clust = clst;
 80061d0:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	d1ac      	bne.n	8006130 <f_open+0x10c>
 80061d6:	9c02      	ldr	r4, [sp, #8]
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	fbb6 f2f3 	udiv	r2, r6, r3
 80061de:	fb03 6612 	mls	r6, r3, r2, r6
 80061e2:	2e00      	cmp	r6, #0
 80061e4:	d03d      	beq.n	8006262 <f_open+0x23e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7fe fde0 	bl	8004dac <clust2sect>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d0d4      	beq.n	800619a <f_open+0x176>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80061f0:	4402      	add	r2, r0
 80061f2:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80061f4:	7860      	ldrb	r0, [r4, #1]
 80061f6:	2301      	movs	r3, #1
 80061f8:	4641      	mov	r1, r8
 80061fa:	f7fe fd15 	bl	8004c28 <disk_read>
					res = FR_DENIED;
 80061fe:	1c04      	adds	r4, r0, #0
 8006200:	bf18      	it	ne
 8006202:	2401      	movne	r4, #1
 8006204:	e794      	b.n	8006130 <f_open+0x10c>
					if (clst <= 1) res = FR_INT_ERR;
 8006206:	2402      	movs	r4, #2
 8006208:	e7de      	b.n	80061c8 <f_open+0x1a4>
					res = FR_NO_FILE;
 800620a:	2404      	movs	r4, #4
 800620c:	e790      	b.n	8006130 <f_open+0x10c>
					res = FR_DENIED;
 800620e:	2407      	movs	r4, #7
 8006210:	e78e      	b.n	8006130 <f_open+0x10c>
 8006212:	4604      	mov	r4, r0
 8006214:	e790      	b.n	8006138 <f_open+0x114>
	if (!fp) return FR_INVALID_OBJECT;
 8006216:	2409      	movs	r4, #9
 8006218:	e790      	b.n	800613c <f_open+0x118>
		INIT_NAMBUF(fs);
 800621a:	2411      	movs	r4, #17
 800621c:	e78e      	b.n	800613c <f_open+0x118>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800621e:	9c02      	ldr	r4, [sp, #8]
 8006220:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8006224:	7820      	ldrb	r0, [r4, #0]
 8006226:	4641      	mov	r1, r8
 8006228:	f7fe fe2a 	bl	8004e80 <ld_clust.isra.1>
 800622c:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800622e:	f108 001c 	add.w	r0, r8, #28
 8006232:	f7fe fd23 	bl	8004c7c <ld_dword>
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006236:	f105 0830 	add.w	r8, r5, #48	; 0x30
			fp->obj.id = fs->id;
 800623a:	88e3      	ldrh	r3, [r4, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800623c:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800623e:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 8006240:	80ab      	strh	r3, [r5, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006242:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006244:	602c      	str	r4, [r5, #0]
			fp->flag = mode;		/* Set file access mode */
 8006246:	752e      	strb	r6, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 8006248:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800624a:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800624c:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800624e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006252:	4640      	mov	r0, r8
 8006254:	f7fe fd22 	bl	8004c9c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006258:	06b3      	lsls	r3, r6, #26
 800625a:	d502      	bpl.n	8006262 <f_open+0x23e>
 800625c:	68ee      	ldr	r6, [r5, #12]
 800625e:	2e00      	cmp	r6, #0
 8006260:	d19d      	bne.n	800619e <f_open+0x17a>
					res = FR_DENIED;
 8006262:	2400      	movs	r4, #0
 8006264:	e764      	b.n	8006130 <f_open+0x10c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006266:	2412      	movs	r4, #18
		FREE_NAMBUF();
 8006268:	4638      	mov	r0, r7
 800626a:	f000 fb85 	bl	8006978 <ff_memfree>
 800626e:	e763      	b.n	8006138 <f_open+0x114>
 8006270:	20000108 	.word	0x20000108

08006274 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006278:	469b      	mov	fp, r3
 800627a:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800627c:	2300      	movs	r3, #0
{
 800627e:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8006280:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006284:	a903      	add	r1, sp, #12
{
 8006286:	4604      	mov	r4, r0
 8006288:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800628a:	f7fe fdd5 	bl	8004e38 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800628e:	4605      	mov	r5, r0
 8006290:	bb18      	cbnz	r0, 80062da <f_read+0x66>
 8006292:	7d65      	ldrb	r5, [r4, #21]
 8006294:	bb0d      	cbnz	r5, 80062da <f_read+0x66>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006296:	7d23      	ldrb	r3, [r4, #20]
 8006298:	07da      	lsls	r2, r3, #31
 800629a:	f140 80a8 	bpl.w	80063ee <f_read+0x17a>
	remain = fp->obj.objsize - fp->fptr;
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	69a6      	ldr	r6, [r4, #24]
 80062a2:	1b9e      	subs	r6, r3, r6
 80062a4:	42be      	cmp	r6, r7
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80062a6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80062aa:	bf28      	it	cs
 80062ac:	463e      	movcs	r6, r7
 80062ae:	9300      	str	r3, [sp, #0]
	for ( ;  btr;								/* Repeat until all data read */
 80062b0:	b19e      	cbz	r6, 80062da <f_read+0x66>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80062b2:	9803      	ldr	r0, [sp, #12]
 80062b4:	69a1      	ldr	r1, [r4, #24]
 80062b6:	8983      	ldrh	r3, [r0, #12]
 80062b8:	fbb1 f2f3 	udiv	r2, r1, r3
 80062bc:	fb03 1312 	mls	r3, r3, r2, r1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d17d      	bne.n	80063c0 <f_read+0x14c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80062c4:	8943      	ldrh	r3, [r0, #10]
 80062c6:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80062c8:	4013      	ands	r3, r2
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	d119      	bne.n	8006302 <f_read+0x8e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80062ce:	b941      	cbnz	r1, 80062e2 <f_read+0x6e>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80062d0:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80062d2:	2801      	cmp	r0, #1
 80062d4:	d810      	bhi.n	80062f8 <f_read+0x84>
 80062d6:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80062d8:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80062da:	4628      	mov	r0, r5
 80062dc:	b005      	add	sp, #20
 80062de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80062e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80062e4:	b11b      	cbz	r3, 80062ee <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80062e6:	4620      	mov	r0, r4
 80062e8:	f7fe fd6b 	bl	8004dc2 <clmt_clust>
 80062ec:	e7f1      	b.n	80062d2 <f_read+0x5e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80062ee:	69e1      	ldr	r1, [r4, #28]
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	f7ff f8bd 	bl	8005470 <get_fat.isra.7>
 80062f6:	e7ec      	b.n	80062d2 <f_read+0x5e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d101      	bne.n	8006300 <f_read+0x8c>
 80062fc:	2501      	movs	r5, #1
 80062fe:	e7eb      	b.n	80062d8 <f_read+0x64>
				fp->clust = clst;				/* Update current cluster */
 8006300:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006302:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006306:	69e1      	ldr	r1, [r4, #28]
 8006308:	4650      	mov	r0, sl
 800630a:	f7fe fd4f 	bl	8004dac <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800630e:	2800      	cmp	r0, #0
 8006310:	d0e1      	beq.n	80062d6 <f_read+0x62>
			sect += csect;
 8006312:	9b01      	ldr	r3, [sp, #4]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006314:	f8ba 800c 	ldrh.w	r8, [sl, #12]
 8006318:	fbb6 f8f8 	udiv	r8, r6, r8
			sect += csect;
 800631c:	181f      	adds	r7, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 800631e:	f1b8 0f00 	cmp.w	r8, #0
 8006322:	d030      	beq.n	8006386 <f_read+0x112>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006324:	9a01      	ldr	r2, [sp, #4]
 8006326:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800632a:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800632e:	4442      	add	r2, r8
 8006330:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8006332:	bf84      	itt	hi
 8006334:	9a01      	ldrhi	r2, [sp, #4]
 8006336:	eba3 0802 	subhi.w	r8, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800633a:	4643      	mov	r3, r8
 800633c:	463a      	mov	r2, r7
 800633e:	4649      	mov	r1, r9
 8006340:	f7fe fc72 	bl	8004c28 <disk_read>
 8006344:	2800      	cmp	r0, #0
 8006346:	d1d9      	bne.n	80062fc <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006348:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	da0b      	bge.n	8006368 <f_read+0xf4>
 8006350:	6a20      	ldr	r0, [r4, #32]
 8006352:	1bc0      	subs	r0, r0, r7
 8006354:	4580      	cmp	r8, r0
 8006356:	d907      	bls.n	8006368 <f_read+0xf4>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 800635c:	b122      	cbz	r2, 8006368 <f_read+0xf4>
 800635e:	9900      	ldr	r1, [sp, #0]
 8006360:	fb02 9000 	mla	r0, r2, r0, r9
 8006364:	f7fe fd83 	bl	8004e6e <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	899f      	ldrh	r7, [r3, #12]
 800636c:	fb08 f707 	mul.w	r7, r8, r7
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006370:	69a3      	ldr	r3, [r4, #24]
 8006372:	443b      	add	r3, r7
 8006374:	61a3      	str	r3, [r4, #24]
 8006376:	f8db 3000 	ldr.w	r3, [fp]
 800637a:	443b      	add	r3, r7
 800637c:	44b9      	add	r9, r7
 800637e:	f8cb 3000 	str.w	r3, [fp]
 8006382:	1bf6      	subs	r6, r6, r7
 8006384:	e794      	b.n	80062b0 <f_read+0x3c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006386:	6a22      	ldr	r2, [r4, #32]
 8006388:	4297      	cmp	r7, r2
 800638a:	d018      	beq.n	80063be <f_read+0x14a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800638c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	da0b      	bge.n	80063ac <f_read+0x138>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006394:	2301      	movs	r3, #1
 8006396:	9900      	ldr	r1, [sp, #0]
 8006398:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800639c:	f7fe fc52 	bl	8004c44 <disk_write>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d1ab      	bne.n	80062fc <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 80063a4:	7d23      	ldrb	r3, [r4, #20]
 80063a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063aa:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80063ac:	9803      	ldr	r0, [sp, #12]
 80063ae:	9900      	ldr	r1, [sp, #0]
 80063b0:	7840      	ldrb	r0, [r0, #1]
 80063b2:	2301      	movs	r3, #1
 80063b4:	463a      	mov	r2, r7
 80063b6:	f7fe fc37 	bl	8004c28 <disk_read>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d19e      	bne.n	80062fc <f_read+0x88>
			fp->sect = sect;
 80063be:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 80063c6:	69a3      	ldr	r3, [r4, #24]
 80063c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80063cc:	fb08 3111 	mls	r1, r8, r1, r3
 80063d0:	eba8 0801 	sub.w	r8, r8, r1
 80063d4:	45b0      	cmp	r8, r6
 80063d6:	4647      	mov	r7, r8
 80063d8:	bf28      	it	cs
 80063da:	4637      	movcs	r7, r6
	if (cnt) {
 80063dc:	2f00      	cmp	r7, #0
 80063de:	d0c7      	beq.n	8006370 <f_read+0xfc>
 80063e0:	9b00      	ldr	r3, [sp, #0]
 80063e2:	463a      	mov	r2, r7
 80063e4:	4419      	add	r1, r3
 80063e6:	4648      	mov	r0, r9
 80063e8:	f7fe fd41 	bl	8004e6e <mem_cpy.part.0>
 80063ec:	e7c0      	b.n	8006370 <f_read+0xfc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80063ee:	2507      	movs	r5, #7
 80063f0:	e773      	b.n	80062da <f_read+0x66>

080063f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80063f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80063f4:	a901      	add	r1, sp, #4
{
 80063f6:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80063f8:	f7fe fd1e 	bl	8004e38 <validate>
	if (res == FR_OK) {
 80063fc:	4605      	mov	r5, r0
 80063fe:	2800      	cmp	r0, #0
 8006400:	d13a      	bne.n	8006478 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006402:	7d23      	ldrb	r3, [r4, #20]
 8006404:	065a      	lsls	r2, r3, #25
 8006406:	d537      	bpl.n	8006478 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006408:	061b      	lsls	r3, r3, #24
 800640a:	d50c      	bpl.n	8006426 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800640c:	9801      	ldr	r0, [sp, #4]
 800640e:	6a22      	ldr	r2, [r4, #32]
 8006410:	7840      	ldrb	r0, [r0, #1]
 8006412:	2301      	movs	r3, #1
 8006414:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006418:	f7fe fc14 	bl	8004c44 <disk_write>
 800641c:	bb78      	cbnz	r0, 800647e <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800641e:	7d23      	ldrb	r3, [r4, #20]
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006426:	f000 fc1f 	bl	8006c68 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800642a:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800642c:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800642e:	9801      	ldr	r0, [sp, #4]
 8006430:	f7fe fdb3 	bl	8004f9a <move_window>
				if (res == FR_OK) {
 8006434:	4605      	mov	r5, r0
 8006436:	b9f8      	cbnz	r0, 8006478 <f_sync+0x86>
					dir = fp->dir_ptr;
 8006438:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800643a:	7af3      	ldrb	r3, [r6, #11]
 800643c:	f043 0320 	orr.w	r3, r3, #32
 8006440:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006442:	68a2      	ldr	r2, [r4, #8]
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	4631      	mov	r1, r6
 8006448:	f7fe fd28 	bl	8004e9c <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800644c:	68e1      	ldr	r1, [r4, #12]
 800644e:	f106 001c 	add.w	r0, r6, #28
 8006452:	f7fe fc1b 	bl	8004c8c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006456:	4639      	mov	r1, r7
 8006458:	f106 0016 	add.w	r0, r6, #22
 800645c:	f7fe fc16 	bl	8004c8c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8006460:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006462:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8006464:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8006466:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8006468:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800646a:	f7fe fd4c 	bl	8004f06 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800646e:	7d23      	ldrb	r3, [r4, #20]
 8006470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8006474:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006476:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8006478:	4628      	mov	r0, r5
 800647a:	b003      	add	sp, #12
 800647c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800647e:	2501      	movs	r5, #1
 8006480:	e7fa      	b.n	8006478 <f_sync+0x86>

08006482 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006482:	b513      	push	{r0, r1, r4, lr}
 8006484:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006486:	f7ff ffb4 	bl	80063f2 <f_sync>
	if (res == FR_OK)
 800648a:	b948      	cbnz	r0, 80064a0 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800648c:	a901      	add	r1, sp, #4
 800648e:	4620      	mov	r0, r4
 8006490:	f7fe fcd2 	bl	8004e38 <validate>
		if (res == FR_OK) {
 8006494:	b920      	cbnz	r0, 80064a0 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006496:	6920      	ldr	r0, [r4, #16]
 8006498:	f7fe fc70 	bl	8004d7c <dec_lock>
			if (res == FR_OK)
 800649c:	b900      	cbnz	r0, 80064a0 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800649e:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80064a0:	b002      	add	sp, #8
 80064a2:	bd10      	pop	{r4, pc}

080064a4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80064a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80064aa:	a901      	add	r1, sp, #4
{
 80064ac:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80064ae:	f7fe fcc3 	bl	8004e38 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80064b2:	4606      	mov	r6, r0
 80064b4:	b9e0      	cbnz	r0, 80064f0 <f_lseek+0x4c>
 80064b6:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80064b8:	b9d6      	cbnz	r6, 80064f0 <f_lseek+0x4c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80064ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d07d      	beq.n	80065bc <f_lseek+0x118>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80064c0:	1c6a      	adds	r2, r5, #1
 80064c2:	d139      	bne.n	8006538 <f_lseek+0x94>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->obj.sclust;		/* Origin of the chain */
 80064c4:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80064c8:	f8d3 b000 	ldr.w	fp, [r3]
 80064cc:	1d1f      	adds	r7, r3, #4
 80064ce:	2502      	movs	r5, #2
			if (cl) {
 80064d0:	f1b8 0f00 	cmp.w	r8, #0
 80064d4:	d028      	beq.n	8006528 <f_lseek+0x84>
 80064d6:	46c1      	mov	r9, r8
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80064d8:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 80064dc:	4649      	mov	r1, r9
 80064de:	6820      	ldr	r0, [r4, #0]
 80064e0:	f7fe ffc6 	bl	8005470 <get_fat.isra.7>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80064e4:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 80064e6:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80064ea:	d807      	bhi.n	80064fc <f_lseek+0x58>
 80064ec:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80064ee:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 80064f0:	4630      	mov	r0, r6
 80064f2:	b003      	add	sp, #12
 80064f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f8:	4680      	mov	r8, r0
 80064fa:	e7ec      	b.n	80064d6 <f_lseek+0x32>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d101      	bne.n	8006504 <f_lseek+0x60>
 8006500:	2601      	movs	r6, #1
 8006502:	e7f4      	b.n	80064ee <f_lseek+0x4a>
					} while (cl == pcl + 1);
 8006504:	f109 0301 	add.w	r3, r9, #1
 8006508:	4298      	cmp	r0, r3
 800650a:	4681      	mov	r9, r0
 800650c:	d0e6      	beq.n	80064dc <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800650e:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006510:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8006512:	bf21      	itttt	cs
 8006514:	463b      	movcs	r3, r7
 8006516:	f843 ab08 	strcs.w	sl, [r3], #8
 800651a:	f8c7 8004 	strcs.w	r8, [r7, #4]
 800651e:	461f      	movcs	r7, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006520:	9b01      	ldr	r3, [sp, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	4298      	cmp	r0, r3
 8006526:	d3e7      	bcc.n	80064f8 <f_lseek+0x54>
			*fp->cltbl = ulen;	/* Number of items used */
 8006528:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 800652a:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800652c:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 800652e:	f200 80e0 	bhi.w	80066f2 <f_lseek+0x24e>
				*tbl = 0;		/* Terminate table */
 8006532:	2300      	movs	r3, #0
 8006534:	603b      	str	r3, [r7, #0]
 8006536:	e7db      	b.n	80064f0 <f_lseek+0x4c>
 8006538:	68e3      	ldr	r3, [r4, #12]
 800653a:	429d      	cmp	r5, r3
 800653c:	bf28      	it	cs
 800653e:	461d      	movcs	r5, r3
			fp->fptr = ofs;				/* Set file pointer */
 8006540:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8006542:	2d00      	cmp	r5, #0
 8006544:	d0d4      	beq.n	80064f0 <f_lseek+0x4c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006546:	f105 38ff 	add.w	r8, r5, #4294967295
 800654a:	4641      	mov	r1, r8
 800654c:	4620      	mov	r0, r4
 800654e:	f7fe fc38 	bl	8004dc2 <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 8006552:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 8006554:	61e0      	str	r0, [r4, #28]
 8006556:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 8006558:	4638      	mov	r0, r7
 800655a:	f7fe fc27 	bl	8004dac <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800655e:	2800      	cmp	r0, #0
 8006560:	d0c4      	beq.n	80064ec <f_lseek+0x48>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006562:	89bb      	ldrh	r3, [r7, #12]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006564:	fbb5 f2f3 	udiv	r2, r5, r3
 8006568:	fb03 5512 	mls	r5, r3, r2, r5
 800656c:	2d00      	cmp	r5, #0
 800656e:	d0bf      	beq.n	80064f0 <f_lseek+0x4c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006570:	fbb8 f8f3 	udiv	r8, r8, r3
 8006574:	897d      	ldrh	r5, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006576:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006578:	3d01      	subs	r5, #1
 800657a:	ea05 0508 	and.w	r5, r5, r8
 800657e:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006580:	4295      	cmp	r5, r2
 8006582:	d0b5      	beq.n	80064f0 <f_lseek+0x4c>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006584:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800658e:	da0a      	bge.n	80065a6 <f_lseek+0x102>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006590:	2301      	movs	r3, #1
 8006592:	4641      	mov	r1, r8
 8006594:	7878      	ldrb	r0, [r7, #1]
 8006596:	f7fe fb55 	bl	8004c44 <disk_write>
 800659a:	2800      	cmp	r0, #0
 800659c:	d1b0      	bne.n	8006500 <f_lseek+0x5c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800659e:	7d23      	ldrb	r3, [r4, #20]
 80065a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a4:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80065a6:	9801      	ldr	r0, [sp, #4]
 80065a8:	2301      	movs	r3, #1
 80065aa:	462a      	mov	r2, r5
 80065ac:	4641      	mov	r1, r8
 80065ae:	7840      	ldrb	r0, [r0, #1]
 80065b0:	f7fe fb3a 	bl	8004c28 <disk_read>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d1a3      	bne.n	8006500 <f_lseek+0x5c>
					fp->sect = dsc;
 80065b8:	6225      	str	r5, [r4, #32]
 80065ba:	e799      	b.n	80064f0 <f_lseek+0x4c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80065bc:	68e3      	ldr	r3, [r4, #12]
 80065be:	429d      	cmp	r5, r3
 80065c0:	d904      	bls.n	80065cc <f_lseek+0x128>
 80065c2:	7d22      	ldrb	r2, [r4, #20]
 80065c4:	f012 0f02 	tst.w	r2, #2
 80065c8:	bf08      	it	eq
 80065ca:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 80065cc:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 80065ce:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 80065d0:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	d136      	bne.n	8006644 <f_lseek+0x1a0>
		fp->fptr = nsect = 0;
 80065d6:	462f      	mov	r7, r5
 80065d8:	e009      	b.n	80065ee <f_lseek+0x14a>
 80065da:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80065dc:	68e3      	ldr	r3, [r4, #12]
 80065de:	69a5      	ldr	r5, [r4, #24]
 80065e0:	429d      	cmp	r5, r3
			fp->flag |= FA_MODIFIED;
 80065e2:	bf81      	itttt	hi
 80065e4:	7d23      	ldrbhi	r3, [r4, #20]
			fp->obj.objsize = fp->fptr;
 80065e6:	60e5      	strhi	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 80065e8:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 80065ec:	7523      	strbhi	r3, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80065ee:	9801      	ldr	r0, [sp, #4]
 80065f0:	8982      	ldrh	r2, [r0, #12]
 80065f2:	fbb5 f3f2 	udiv	r3, r5, r2
 80065f6:	fb02 5513 	mls	r5, r2, r3, r5
 80065fa:	2d00      	cmp	r5, #0
 80065fc:	f43f af78 	beq.w	80064f0 <f_lseek+0x4c>
 8006600:	6a22      	ldr	r2, [r4, #32]
 8006602:	4297      	cmp	r7, r2
 8006604:	f43f af74 	beq.w	80064f0 <f_lseek+0x4c>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006608:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8006612:	da0b      	bge.n	800662c <f_lseek+0x188>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006614:	2301      	movs	r3, #1
 8006616:	4629      	mov	r1, r5
 8006618:	7840      	ldrb	r0, [r0, #1]
 800661a:	f7fe fb13 	bl	8004c44 <disk_write>
 800661e:	2800      	cmp	r0, #0
 8006620:	f47f af6e 	bne.w	8006500 <f_lseek+0x5c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006624:	7d23      	ldrb	r3, [r4, #20]
 8006626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662a:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800662c:	9801      	ldr	r0, [sp, #4]
 800662e:	2301      	movs	r3, #1
 8006630:	463a      	mov	r2, r7
 8006632:	4629      	mov	r1, r5
 8006634:	7840      	ldrb	r0, [r0, #1]
 8006636:	f7fe faf7 	bl	8004c28 <disk_read>
 800663a:	2800      	cmp	r0, #0
 800663c:	f47f af60 	bne.w	8006500 <f_lseek+0x5c>
			fp->sect = nsect;
 8006640:	6227      	str	r7, [r4, #32]
 8006642:	e755      	b.n	80064f0 <f_lseek+0x4c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006644:	9a01      	ldr	r2, [sp, #4]
 8006646:	8951      	ldrh	r1, [r2, #10]
 8006648:	8997      	ldrh	r7, [r2, #12]
 800664a:	434f      	muls	r7, r1
			if (ifptr > 0 &&
 800664c:	b313      	cbz	r3, 8006694 <f_lseek+0x1f0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800664e:	3b01      	subs	r3, #1
 8006650:	1e6a      	subs	r2, r5, #1
 8006652:	fbb3 f1f7 	udiv	r1, r3, r7
 8006656:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800665a:	428a      	cmp	r2, r1
 800665c:	d31a      	bcc.n	8006694 <f_lseek+0x1f0>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800665e:	427a      	negs	r2, r7
 8006660:	4013      	ands	r3, r2
				clst = fp->clust;
 8006662:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006664:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 8006666:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8006668:	2900      	cmp	r1, #0
 800666a:	d0b6      	beq.n	80065da <f_lseek+0x136>
				while (ofs > bcs) {						/* Cluster following loop */
 800666c:	42bd      	cmp	r5, r7
 800666e:	d820      	bhi.n	80066b2 <f_lseek+0x20e>
				fp->fptr += ofs;
 8006670:	69a3      	ldr	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8006672:	9801      	ldr	r0, [sp, #4]
				fp->fptr += ofs;
 8006674:	442b      	add	r3, r5
 8006676:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8006678:	8983      	ldrh	r3, [r0, #12]
 800667a:	fbb5 f7f3 	udiv	r7, r5, r3
 800667e:	fb03 5517 	mls	r5, r3, r7, r5
 8006682:	2d00      	cmp	r5, #0
 8006684:	d0a9      	beq.n	80065da <f_lseek+0x136>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006686:	f7fe fb91 	bl	8004dac <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800668a:	2800      	cmp	r0, #0
 800668c:	f43f af2e 	beq.w	80064ec <f_lseek+0x48>
					nsect += (DWORD)(ofs / SS(fs));
 8006690:	4407      	add	r7, r0
 8006692:	e7a3      	b.n	80065dc <f_lseek+0x138>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006694:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006696:	b951      	cbnz	r1, 80066ae <f_lseek+0x20a>
					clst = create_chain(&fp->obj, 0);
 8006698:	4620      	mov	r0, r4
 800669a:	f7fe ff9e 	bl	80055da <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800669e:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 80066a0:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80066a2:	f43f af23 	beq.w	80064ec <f_lseek+0x48>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f af2a 	beq.w	8006500 <f_lseek+0x5c>
					fp->obj.sclust = clst;
 80066ac:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 80066ae:	61e1      	str	r1, [r4, #28]
 80066b0:	e7da      	b.n	8006668 <f_lseek+0x1c4>
					ofs -= bcs; fp->fptr += bcs;
 80066b2:	69a3      	ldr	r3, [r4, #24]
 80066b4:	443b      	add	r3, r7
 80066b6:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80066b8:	7d23      	ldrb	r3, [r4, #20]
 80066ba:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 80066bc:	eba5 0507 	sub.w	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80066c0:	d506      	bpl.n	80066d0 <f_lseek+0x22c>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7fe ff89 	bl	80055da <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80066c8:	4601      	mov	r1, r0
 80066ca:	b928      	cbnz	r0, 80066d8 <f_lseek+0x234>
							ofs = 0; break;
 80066cc:	4605      	mov	r5, r0
 80066ce:	e7cf      	b.n	8006670 <f_lseek+0x1cc>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	f7fe fecd 	bl	8005470 <get_fat.isra.7>
 80066d6:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80066d8:	1c4b      	adds	r3, r1, #1
 80066da:	f43f af11 	beq.w	8006500 <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80066de:	2901      	cmp	r1, #1
 80066e0:	f67f af04 	bls.w	80064ec <f_lseek+0x48>
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	4299      	cmp	r1, r3
 80066ea:	f4bf aeff 	bcs.w	80064ec <f_lseek+0x48>
					fp->clust = clst;
 80066ee:	61e1      	str	r1, [r4, #28]
 80066f0:	e7bc      	b.n	800666c <f_lseek+0x1c8>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80066f2:	2611      	movs	r6, #17
 80066f4:	e6fc      	b.n	80064f0 <f_lseek+0x4c>

080066f6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80066f6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80066f8:	4605      	mov	r5, r0
{
 80066fa:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d049      	beq.n	8006794 <f_opendir+0x9e>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8006700:	2200      	movs	r2, #0
 8006702:	a903      	add	r1, sp, #12
 8006704:	a801      	add	r0, sp, #4
 8006706:	f7fe fca3 	bl	8005050 <find_volume>
	if (res == FR_OK) {
 800670a:	4604      	mov	r4, r0
 800670c:	2800      	cmp	r0, #0
 800670e:	d136      	bne.n	800677e <f_opendir+0x88>
		obj->fs = fs;
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 8006714:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006718:	f000 f92c 	bl	8006974 <ff_memalloc>
 800671c:	4606      	mov	r6, r0
 800671e:	2800      	cmp	r0, #0
 8006720:	d03a      	beq.n	8006798 <f_opendir+0xa2>
 8006722:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006724:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8006726:	6118      	str	r0, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006728:	4628      	mov	r0, r5
 800672a:	f7ff fb09 	bl	8005d40 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800672e:	4604      	mov	r4, r0
 8006730:	b9f8      	cbnz	r0, 8006772 <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006732:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8006736:	2b00      	cmp	r3, #0
 8006738:	db08      	blt.n	800674c <f_opendir+0x56>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800673a:	79ab      	ldrb	r3, [r5, #6]
 800673c:	06db      	lsls	r3, r3, #27
 800673e:	d525      	bpl.n	800678c <f_opendir+0x96>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8006740:	9b03      	ldr	r3, [sp, #12]
 8006742:	6a29      	ldr	r1, [r5, #32]
 8006744:	7818      	ldrb	r0, [r3, #0]
 8006746:	f7fe fb9b 	bl	8004e80 <ld_clust.isra.1>
 800674a:	60a8      	str	r0, [r5, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	88db      	ldrh	r3, [r3, #6]
 8006750:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006752:	2100      	movs	r1, #0
 8006754:	4628      	mov	r0, r5
 8006756:	f7fe fefb 	bl	8005550 <dir_sdi>
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800675a:	4604      	mov	r4, r0
 800675c:	b948      	cbnz	r0, 8006772 <f_opendir+0x7c>
					if (obj->sclust) {
 800675e:	68ab      	ldr	r3, [r5, #8]
 8006760:	b193      	cbz	r3, 8006788 <f_opendir+0x92>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006762:	4621      	mov	r1, r4
 8006764:	4628      	mov	r0, r5
 8006766:	f7fe facd 	bl	8004d04 <inc_lock>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800676a:	2800      	cmp	r0, #0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800676c:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800676e:	bf08      	it	eq
 8006770:	2412      	moveq	r4, #18
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8006772:	4630      	mov	r0, r6
 8006774:	f000 f900 	bl	8006978 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006778:	2c04      	cmp	r4, #4
 800677a:	d009      	beq.n	8006790 <f_opendir+0x9a>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800677c:	b10c      	cbz	r4, 8006782 <f_opendir+0x8c>
 800677e:	2300      	movs	r3, #0
 8006780:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8006782:	4620      	mov	r0, r4
 8006784:	b004      	add	sp, #16
 8006786:	bd70      	pop	{r4, r5, r6, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 8006788:	612c      	str	r4, [r5, #16]
 800678a:	e7f2      	b.n	8006772 <f_opendir+0x7c>
					res = FR_NO_PATH;
 800678c:	2405      	movs	r4, #5
 800678e:	e7f0      	b.n	8006772 <f_opendir+0x7c>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006790:	2405      	movs	r4, #5
 8006792:	e7f4      	b.n	800677e <f_opendir+0x88>
	if (!dp) return FR_INVALID_OBJECT;
 8006794:	2409      	movs	r4, #9
 8006796:	e7f4      	b.n	8006782 <f_opendir+0x8c>
		INIT_NAMBUF(fs);
 8006798:	2411      	movs	r4, #17
 800679a:	e7f2      	b.n	8006782 <f_opendir+0x8c>

0800679c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a0:	b09e      	sub	sp, #120	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80067a2:	2202      	movs	r2, #2
{
 80067a4:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 80067a6:	a903      	add	r1, sp, #12
 80067a8:	a801      	add	r0, sp, #4
 80067aa:	f7fe fc51 	bl	8005050 <find_volume>
	dj.obj.fs = fs;
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
 80067b2:	4604      	mov	r4, r0
 80067b4:	bb00      	cbnz	r0, 80067f8 <f_unlink+0x5c>
		INIT_NAMBUF(fs);
 80067b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80067ba:	f000 f8db 	bl	8006974 <ff_memalloc>
 80067be:	4605      	mov	r5, r0
 80067c0:	b348      	cbz	r0, 8006816 <f_unlink+0x7a>
 80067c2:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 80067c4:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 80067c6:	6118      	str	r0, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 80067c8:	a804      	add	r0, sp, #16
 80067ca:	f7ff fab9 	bl	8005d40 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80067ce:	4604      	mov	r4, r0
 80067d0:	b978      	cbnz	r0, 80067f2 <f_unlink+0x56>
 80067d2:	2102      	movs	r1, #2
 80067d4:	a804      	add	r0, sp, #16
 80067d6:	f7fe fa67 	bl	8004ca8 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80067da:	4604      	mov	r4, r0
 80067dc:	b948      	cbnz	r0, 80067f2 <f_unlink+0x56>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80067de:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	db15      	blt.n	8006812 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
 80067e6:	f89d 8016 	ldrb.w	r8, [sp, #22]
 80067ea:	f018 0f01 	tst.w	r8, #1
 80067ee:	d014      	beq.n	800681a <f_unlink+0x7e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80067f0:	2407      	movs	r4, #7
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 f8c0 	bl	8006978 <ff_memfree>
	}

	LEAVE_FF(fs, res);
}
 80067f8:	4620      	mov	r0, r4
 80067fa:	b01e      	add	sp, #120	; 0x78
 80067fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					res = remove_chain(&dj.obj, dclst, 0);
 8006800:	4602      	mov	r2, r0
 8006802:	4631      	mov	r1, r6
 8006804:	a804      	add	r0, sp, #16
 8006806:	f7fe ff40 	bl	800568a <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 800680a:	4604      	mov	r4, r0
 800680c:	2800      	cmp	r0, #0
 800680e:	d1f0      	bne.n	80067f2 <f_unlink+0x56>
 8006810:	e025      	b.n	800685e <f_unlink+0xc2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006812:	2406      	movs	r4, #6
 8006814:	e7ed      	b.n	80067f2 <f_unlink+0x56>
		INIT_NAMBUF(fs);
 8006816:	2411      	movs	r4, #17
 8006818:	e7ee      	b.n	80067f8 <f_unlink+0x5c>
					dclst = ld_clust(fs, dj.dir);
 800681a:	9f03      	ldr	r7, [sp, #12]
 800681c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800681e:	7838      	ldrb	r0, [r7, #0]
 8006820:	f7fe fb2e 	bl	8004e80 <ld_clust.isra.1>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8006824:	f018 0f10 	tst.w	r8, #16
					dclst = ld_clust(fs, dj.dir);
 8006828:	4606      	mov	r6, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800682a:	d010      	beq.n	800684e <f_unlink+0xb2>
						res = dir_sdi(&sdj, 0);
 800682c:	4621      	mov	r1, r4
 800682e:	a811      	add	r0, sp, #68	; 0x44
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8006830:	9711      	str	r7, [sp, #68]	; 0x44
						sdj.obj.sclust = dclst;
 8006832:	9613      	str	r6, [sp, #76]	; 0x4c
						res = dir_sdi(&sdj, 0);
 8006834:	f7fe fe8c 	bl	8005550 <dir_sdi>
						if (res == FR_OK) {
 8006838:	4604      	mov	r4, r0
 800683a:	2800      	cmp	r0, #0
 800683c:	d1d9      	bne.n	80067f2 <f_unlink+0x56>
							res = dir_read(&sdj, 0);			/* Read an item */
 800683e:	a811      	add	r0, sp, #68	; 0x44
 8006840:	f7ff f9ec 	bl	8005c1c <dir_read.constprop.9>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006844:	4604      	mov	r4, r0
 8006846:	2800      	cmp	r0, #0
 8006848:	d0d2      	beq.n	80067f0 <f_unlink+0x54>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800684a:	2804      	cmp	r0, #4
 800684c:	d1d1      	bne.n	80067f2 <f_unlink+0x56>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800684e:	a804      	add	r0, sp, #16
 8006850:	f7fe ffd1 	bl	80057f6 <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8006854:	4604      	mov	r4, r0
 8006856:	2800      	cmp	r0, #0
 8006858:	d1cb      	bne.n	80067f2 <f_unlink+0x56>
 800685a:	2e00      	cmp	r6, #0
 800685c:	d1d0      	bne.n	8006800 <f_unlink+0x64>
				if (res == FR_OK) res = sync_fs(fs);
 800685e:	9803      	ldr	r0, [sp, #12]
 8006860:	f7fe fb51 	bl	8004f06 <sync_fs>
 8006864:	4604      	mov	r4, r0
 8006866:	e7c4      	b.n	80067f2 <f_unlink+0x56>

08006868 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006868:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <FATFS_LinkDriverEx+0x40>)
 800686c:	7a5d      	ldrb	r5, [r3, #9]
 800686e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8006872:	b9b5      	cbnz	r5, 80068a2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006874:	7a5d      	ldrb	r5, [r3, #9]
 8006876:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8006878:	7a5d      	ldrb	r5, [r3, #9]
 800687a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800687e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8006880:	7a58      	ldrb	r0, [r3, #9]
 8006882:	4418      	add	r0, r3
 8006884:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8006886:	7a5a      	ldrb	r2, [r3, #9]
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	1c50      	adds	r0, r2, #1
 800688c:	b2c0      	uxtb	r0, r0
 800688e:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8006890:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006892:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8006894:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006896:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8006898:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800689a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800689c:	70cc      	strb	r4, [r1, #3]
 800689e:	4620      	mov	r0, r4
 80068a0:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80068a2:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 80068a4:	bd30      	pop	{r4, r5, pc}
 80068a6:	bf00      	nop
 80068a8:	2000012c 	.word	0x2000012c

080068ac <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80068ac:	2200      	movs	r2, #0
 80068ae:	f7ff bfdb 	b.w	8006868 <FATFS_LinkDriverEx>
	...

080068b4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80068b4:	287f      	cmp	r0, #127	; 0x7f
{
 80068b6:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 80068b8:	d916      	bls.n	80068e8 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80068ba:	b131      	cbz	r1, 80068ca <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80068bc:	28ff      	cmp	r0, #255	; 0xff
 80068be:	d812      	bhi.n	80068e6 <ff_convert+0x32>
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <ff_convert+0x38>)
 80068c2:	3880      	subs	r0, #128	; 0x80
 80068c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80068c8:	bd10      	pop	{r4, pc}

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 80068ca:	4a08      	ldr	r2, [pc, #32]	; (80068ec <ff_convert+0x38>)
 80068cc:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 80068d0:	4284      	cmp	r4, r0
 80068d2:	b28b      	uxth	r3, r1
 80068d4:	d003      	beq.n	80068de <ff_convert+0x2a>
 80068d6:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 80068d8:	2980      	cmp	r1, #128	; 0x80
 80068da:	d1f7      	bne.n	80068cc <ff_convert+0x18>
 80068dc:	460b      	mov	r3, r1
			}
			c = (c + 0x80) & 0xFF;
 80068de:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80068e2:	b2c0      	uxtb	r0, r0
 80068e4:	bd10      	pop	{r4, pc}
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80068e6:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	bf00      	nop
 80068ec:	080083a6 	.word	0x080083a6

080068f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80068f0:	b570      	push	{r4, r5, r6, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <ff_wtoupper+0x7c>)
 80068f4:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <ff_wtoupper+0x80>)
 80068f6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80068fa:	bf28      	it	cs
 80068fc:	4613      	movcs	r3, r2
 80068fe:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 8006900:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 8006904:	460a      	mov	r2, r1
		if (!bc || chr < bc) break;
 8006906:	b383      	cbz	r3, 800696a <ff_wtoupper+0x7a>
 8006908:	4298      	cmp	r0, r3
 800690a:	d32e      	bcc.n	800696a <ff_wtoupper+0x7a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800690c:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 8006910:	0a25      	lsrs	r5, r4, #8
 8006912:	b2e4      	uxtb	r4, r4
		if (chr < bc + nc) {	/* In the block? */
 8006914:	18e6      	adds	r6, r4, r3
 8006916:	42b0      	cmp	r0, r6
 8006918:	da21      	bge.n	800695e <ff_wtoupper+0x6e>
			switch (cmd) {
 800691a:	2d08      	cmp	r5, #8
 800691c:	d825      	bhi.n	800696a <ff_wtoupper+0x7a>
 800691e:	e8df f005 	tbb	[pc, r5]
 8006922:	0905      	.short	0x0905
 8006924:	1513110f 	.word	0x1513110f
 8006928:	1917      	.short	0x1917
 800692a:	1b          	.byte	0x1b
 800692b:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800692c:	1ac0      	subs	r0, r0, r3
 800692e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 8006932:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006934:	1ac3      	subs	r3, r0, r3
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	1ac0      	subs	r0, r0, r3
			case 3:	chr -= 32; break;				/* Shift -32 */
			case 4:	chr -= 48; break;				/* Shift -48 */
			case 5:	chr -= 26; break;				/* Shift -26 */
			case 6:	chr += 8; break;				/* Shift +8 */
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800693c:	b280      	uxth	r0, r0
 800693e:	bd70      	pop	{r4, r5, r6, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8006940:	3810      	subs	r0, #16
 8006942:	e7fb      	b.n	800693c <ff_wtoupper+0x4c>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006944:	3820      	subs	r0, #32
 8006946:	e7f9      	b.n	800693c <ff_wtoupper+0x4c>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006948:	3830      	subs	r0, #48	; 0x30
 800694a:	e7f7      	b.n	800693c <ff_wtoupper+0x4c>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800694c:	381a      	subs	r0, #26
 800694e:	e7f5      	b.n	800693c <ff_wtoupper+0x4c>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006950:	3008      	adds	r0, #8
 8006952:	e7f3      	b.n	800693c <ff_wtoupper+0x4c>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006954:	3850      	subs	r0, #80	; 0x50
 8006956:	e7f1      	b.n	800693c <ff_wtoupper+0x4c>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006958:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800695c:	e7ee      	b.n	800693c <ff_wtoupper+0x4c>
 800695e:	3104      	adds	r1, #4
			}
			break;
		}
		if (!cmd) p += nc;
 8006960:	2d00      	cmp	r5, #0
 8006962:	d1cd      	bne.n	8006900 <ff_wtoupper+0x10>
 8006964:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 8006968:	e7c9      	b.n	80068fe <ff_wtoupper+0xe>
	}

	return chr;
}
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	08008698 	.word	0x08008698
 8006970:	080084a6 	.word	0x080084a6

08006974 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006974:	f001 bbd2 	b.w	800811c <malloc>

08006978 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8006978:	f001 bbd8 	b.w	800812c <free>

0800697c <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 800697c:	2000      	movs	r0, #0
 800697e:	4770      	bx	lr

08006980 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 8006980:	2000      	movs	r0, #0
 8006982:	4770      	bx	lr

08006984 <cs43l22_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8006984:	2964      	cmp	r1, #100	; 0x64
 8006986:	bf98      	it	ls
 8006988:	ebc1 2101 	rsbls	r1, r1, r1, lsl #8
{
 800698c:	b538      	push	{r3, r4, r5, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800698e:	bf8f      	iteee	hi
 8006990:	22ff      	movhi	r2, #255	; 0xff
 8006992:	2364      	movls	r3, #100	; 0x64
 8006994:	fb91 f1f3 	sdivls	r1, r1, r3
 8006998:	b2ca      	uxtbls	r2, r1
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800699a:	3219      	adds	r2, #25
 800699c:	b2c5      	uxtb	r5, r0
 800699e:	b2d4      	uxtb	r4, r2
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80069a0:	4622      	mov	r2, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	2120      	movs	r1, #32
 80069a6:	f000 fe59 	bl	800765c <AUDIO_IO_Write>
 80069aa:	4628      	mov	r0, r5
 80069ac:	4622      	mov	r2, r4
 80069ae:	2121      	movs	r1, #33	; 0x21
 80069b0:	f000 fe54 	bl	800765c <AUDIO_IO_Write>
}
 80069b4:	2000      	movs	r0, #0
 80069b6:	bd38      	pop	{r3, r4, r5, pc}

080069b8 <cs43l22_Init>:
{
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80069bc:	b2f4      	uxtb	r4, r6
{
 80069be:	460d      	mov	r5, r1
 80069c0:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 80069c2:	f000 fe17 	bl	80075f4 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 80069c6:	2201      	movs	r2, #1
 80069c8:	2102      	movs	r1, #2
 80069ca:	4620      	mov	r0, r4
 80069cc:	f000 fe46 	bl	800765c <AUDIO_IO_Write>
  switch (OutputDevice)
 80069d0:	1e6a      	subs	r2, r5, #1
 80069d2:	4b2a      	ldr	r3, [pc, #168]	; (8006a7c <cs43l22_Init+0xc4>)
 80069d4:	2a03      	cmp	r2, #3
 80069d6:	d84e      	bhi.n	8006a76 <cs43l22_Init+0xbe>
 80069d8:	e8df f002 	tbb	[pc, r2]
 80069dc:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 80069e0:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 80069e2:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80069e4:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 80069e6:	2104      	movs	r1, #4
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fe37 	bl	800765c <AUDIO_IO_Write>
 80069ee:	2281      	movs	r2, #129	; 0x81
 80069f0:	2105      	movs	r1, #5
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 fe32 	bl	800765c <AUDIO_IO_Write>
 80069f8:	2204      	movs	r2, #4
 80069fa:	2106      	movs	r1, #6
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 fe2d 	bl	800765c <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8006a02:	4630      	mov	r0, r6
 8006a04:	4639      	mov	r1, r7
 8006a06:	f7ff ffbd 	bl	8006984 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8006a0a:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8006a0c:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8006a0e:	d00e      	beq.n	8006a2e <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8006a10:	2206      	movs	r2, #6
 8006a12:	210f      	movs	r1, #15
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 fe21 	bl	800765c <AUDIO_IO_Write>
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2124      	movs	r1, #36	; 0x24
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f000 fe1c 	bl	800765c <AUDIO_IO_Write>
 8006a24:	2200      	movs	r2, #0
 8006a26:	2125      	movs	r1, #37	; 0x25
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 fe17 	bl	800765c <AUDIO_IO_Write>
 8006a2e:	4620      	mov	r0, r4
 8006a30:	2200      	movs	r2, #0
 8006a32:	210a      	movs	r1, #10
 8006a34:	f000 fe12 	bl	800765c <AUDIO_IO_Write>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	210e      	movs	r1, #14
 8006a3e:	f000 fe0d 	bl	800765c <AUDIO_IO_Write>
 8006a42:	4620      	mov	r0, r4
 8006a44:	2200      	movs	r2, #0
 8006a46:	2127      	movs	r1, #39	; 0x27
 8006a48:	f000 fe08 	bl	800765c <AUDIO_IO_Write>
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	220f      	movs	r2, #15
 8006a50:	211f      	movs	r1, #31
 8006a52:	f000 fe03 	bl	800765c <AUDIO_IO_Write>
 8006a56:	4620      	mov	r0, r4
 8006a58:	220a      	movs	r2, #10
 8006a5a:	211a      	movs	r1, #26
 8006a5c:	f000 fdfe 	bl	800765c <AUDIO_IO_Write>
 8006a60:	4620      	mov	r0, r4
 8006a62:	220a      	movs	r2, #10
 8006a64:	211b      	movs	r1, #27
 8006a66:	f000 fdf9 	bl	800765c <AUDIO_IO_Write>
}
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 8006a6e:	22af      	movs	r2, #175	; 0xaf
 8006a70:	e7b7      	b.n	80069e2 <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 8006a72:	22aa      	movs	r2, #170	; 0xaa
 8006a74:	e7b5      	b.n	80069e2 <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 8006a76:	2205      	movs	r2, #5
 8006a78:	e7b3      	b.n	80069e2 <cs43l22_Init+0x2a>
 8006a7a:	bf00      	nop
 8006a7c:	20000138 	.word	0x20000138

08006a80 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 8006a80:	f000 bdea 	b.w	8007658 <AUDIO_IO_DeInit>

08006a84 <cs43l22_ReadID>:
{
 8006a84:	b510      	push	{r4, lr}
 8006a86:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 8006a88:	f000 fdb4 	bl	80075f4 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	b2e0      	uxtb	r0, r4
 8006a90:	f000 fe00 	bl	8007694 <AUDIO_IO_Read>
}
 8006a94:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8006a98:	bd10      	pop	{r4, pc}

08006a9a <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 8006a9a:	b510      	push	{r4, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8006a9c:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	22ff      	movs	r2, #255	; 0xff
 8006aa2:	2104      	movs	r1, #4
 8006aa4:	f000 fdda 	bl	800765c <AUDIO_IO_Write>
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	2201      	movs	r2, #1
 8006aac:	2122      	movs	r1, #34	; 0x22
 8006aae:	f000 fdd5 	bl	800765c <AUDIO_IO_Write>
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	2123      	movs	r1, #35	; 0x23
}
 8006ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AUDIO_IO_Write(Addr, Reg, Value);
 8006abc:	f000 bdce 	b.w	800765c <AUDIO_IO_Write>

08006ac0 <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 8006ac0:	2901      	cmp	r1, #1
{
 8006ac2:	b510      	push	{r4, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8006ac4:	d103      	bne.n	8006ace <cs43l22_SetMute+0xe>
 8006ac6:	f7ff ffe8 	bl	8006a9a <cs43l22_SetMute.part.0>
}
 8006aca:	2000      	movs	r0, #0
 8006acc:	bd10      	pop	{r4, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8006ace:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2122      	movs	r1, #34	; 0x22
 8006ad6:	f000 fdc1 	bl	800765c <AUDIO_IO_Write>
 8006ada:	4620      	mov	r0, r4
 8006adc:	2200      	movs	r2, #0
 8006ade:	2123      	movs	r1, #35	; 0x23
 8006ae0:	f000 fdbc 	bl	800765c <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8006ae4:	4b03      	ldr	r3, [pc, #12]	; (8006af4 <cs43l22_SetMute+0x34>)
  AUDIO_IO_Write(Addr, Reg, Value);
 8006ae6:	2104      	movs	r1, #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8006ae8:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 fdb6 	bl	800765c <AUDIO_IO_Write>
 8006af0:	e7eb      	b.n	8006aca <cs43l22_SetMute+0xa>
 8006af2:	bf00      	nop
 8006af4:	20000138 	.word	0x20000138

08006af8 <cs43l22_Resume>:
{
 8006af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 8006afa:	2500      	movs	r5, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006afc:	4629      	mov	r1, r5
{
 8006afe:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 8006b00:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006b02:	f7ff ffdd 	bl	8006ac0 <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8006b06:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006b08:	4606      	mov	r6, r0
  for(index = 0x00; index < 0xFF; index++);
 8006b0a:	9b01      	ldr	r3, [sp, #4]
 8006b0c:	2bfe      	cmp	r3, #254	; 0xfe
 8006b0e:	d90e      	bls.n	8006b2e <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <cs43l22_Resume+0x40>)
 8006b12:	b2e4      	uxtb	r4, r4
 8006b14:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8006b16:	4620      	mov	r0, r4
 8006b18:	2104      	movs	r1, #4
 8006b1a:	f000 fd9f 	bl	800765c <AUDIO_IO_Write>
 8006b1e:	4620      	mov	r0, r4
 8006b20:	229e      	movs	r2, #158	; 0x9e
 8006b22:	2102      	movs	r1, #2
 8006b24:	f000 fd9a 	bl	800765c <AUDIO_IO_Write>
}
 8006b28:	4630      	mov	r0, r6
 8006b2a:	b002      	add	sp, #8
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 8006b2e:	9b01      	ldr	r3, [sp, #4]
 8006b30:	3301      	adds	r3, #1
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	e7e9      	b.n	8006b0a <cs43l22_Resume+0x12>
 8006b36:	bf00      	nop
 8006b38:	20000138 	.word	0x20000138

08006b3c <cs43l22_Stop>:
{
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8006b40:	b2e4      	uxtb	r4, r4
 8006b42:	f7ff ffaa 	bl	8006a9a <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8006b46:	4620      	mov	r0, r4
 8006b48:	2204      	movs	r2, #4
 8006b4a:	210e      	movs	r1, #14
 8006b4c:	f000 fd86 	bl	800765c <AUDIO_IO_Write>
 8006b50:	4620      	mov	r0, r4
 8006b52:	229f      	movs	r2, #159	; 0x9f
 8006b54:	2102      	movs	r1, #2
 8006b56:	f000 fd81 	bl	800765c <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 8006b5a:	4b02      	ldr	r3, [pc, #8]	; (8006b64 <cs43l22_Stop+0x28>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
}
 8006b60:	2000      	movs	r0, #0
 8006b62:	bd10      	pop	{r4, pc}
 8006b64:	20000028 	.word	0x20000028

08006b68 <cs43l22_Pause>:
{  
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	f7ff ff95 	bl	8006a9a <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8006b70:	b2e0      	uxtb	r0, r4
 8006b72:	2201      	movs	r2, #1
 8006b74:	2102      	movs	r1, #2
 8006b76:	f000 fd71 	bl	800765c <AUDIO_IO_Write>
}
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	bd10      	pop	{r4, pc}
	...

08006b80 <cs43l22_Play>:
{
 8006b80:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 8006b82:	4d0d      	ldr	r5, [pc, #52]	; (8006bb8 <cs43l22_Play+0x38>)
 8006b84:	782b      	ldrb	r3, [r5, #0]
 8006b86:	2b01      	cmp	r3, #1
{
 8006b88:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 8006b8a:	d113      	bne.n	8006bb4 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8006b8c:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8006b8e:	2206      	movs	r2, #6
 8006b90:	210e      	movs	r1, #14
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 fd62 	bl	800765c <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7ff ff90 	bl	8006ac0 <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 8006ba0:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006ba2:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8006ba4:	2102      	movs	r1, #2
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f000 fd58 	bl	800765c <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	702b      	strb	r3, [r5, #0]
}
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8006bb4:	2400      	movs	r4, #0
  return counter;  
 8006bb6:	e7fb      	b.n	8006bb0 <cs43l22_Play+0x30>
 8006bb8:	20000028 	.word	0x20000028

08006bbc <cs43l22_SetOutputMode>:
  switch (Output) 
 8006bbc:	3901      	subs	r1, #1
{
 8006bbe:	b510      	push	{r4, lr}
 8006bc0:	b2c0      	uxtb	r0, r0
 8006bc2:	4c10      	ldr	r4, [pc, #64]	; (8006c04 <cs43l22_SetOutputMode+0x48>)
  switch (Output) 
 8006bc4:	2903      	cmp	r1, #3
 8006bc6:	d817      	bhi.n	8006bf8 <cs43l22_SetOutputMode+0x3c>
 8006bc8:	e8df f001 	tbb	[pc, r1]
 8006bcc:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 8006bd0:	22fa      	movs	r2, #250	; 0xfa
 8006bd2:	2104      	movs	r1, #4
 8006bd4:	f000 fd42 	bl	800765c <AUDIO_IO_Write>
      OutputDev = 0xFA;
 8006bd8:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 8006bda:	7023      	strb	r3, [r4, #0]
}
 8006bdc:	2000      	movs	r0, #0
 8006bde:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8006be0:	22af      	movs	r2, #175	; 0xaf
 8006be2:	2104      	movs	r1, #4
 8006be4:	f000 fd3a 	bl	800765c <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8006be8:	23af      	movs	r3, #175	; 0xaf
 8006bea:	e7f6      	b.n	8006bda <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8006bec:	22aa      	movs	r2, #170	; 0xaa
 8006bee:	2104      	movs	r1, #4
 8006bf0:	f000 fd34 	bl	800765c <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8006bf4:	23aa      	movs	r3, #170	; 0xaa
 8006bf6:	e7f0      	b.n	8006bda <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8006bf8:	2205      	movs	r2, #5
 8006bfa:	2104      	movs	r1, #4
 8006bfc:	f000 fd2e 	bl	800765c <AUDIO_IO_Write>
      OutputDev = 0x05;
 8006c00:	2305      	movs	r3, #5
 8006c02:	e7ea      	b.n	8006bda <cs43l22_SetOutputMode+0x1e>
 8006c04:	20000138 	.word	0x20000138

08006c08 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006c08:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <MX_DMA_Init+0x40>)
 8006c0c:	2400      	movs	r4, #0
 8006c0e:	9401      	str	r4, [sp, #4]
 8006c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c12:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006c1e:	4622      	mov	r2, r4
 8006c20:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006c22:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006c24:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006c26:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006c28:	f7f9 fccc 	bl	80005c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006c2c:	200f      	movs	r0, #15
 8006c2e:	f7f9 fcfd 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8006c32:	4622      	mov	r2, r4
 8006c34:	4621      	mov	r1, r4
 8006c36:	202f      	movs	r0, #47	; 0x2f
 8006c38:	f7f9 fcc4 	bl	80005c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8006c3c:	202f      	movs	r0, #47	; 0x2f
 8006c3e:	f7f9 fcf5 	bl	800062c <HAL_NVIC_EnableIRQ>

}
 8006c42:	b002      	add	sp, #8
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	bf00      	nop
 8006c48:	40023800 	.word	0x40023800

08006c4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006c4c:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006c4e:	4903      	ldr	r1, [pc, #12]	; (8006c5c <MX_FATFS_Init+0x10>)
 8006c50:	4803      	ldr	r0, [pc, #12]	; (8006c60 <MX_FATFS_Init+0x14>)
 8006c52:	f7ff fe2b 	bl	80068ac <FATFS_LinkDriver>
 8006c56:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <MX_FATFS_Init+0x18>)
 8006c58:	7018      	strb	r0, [r3, #0]
 8006c5a:	bd08      	pop	{r3, pc}
 8006c5c:	2000062c 	.word	0x2000062c
 8006c60:	08009394 	.word	0x08009394
 8006c64:	20002698 	.word	0x20002698

08006c68 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8006c68:	2000      	movs	r0, #0
 8006c6a:	4770      	bx	lr

08006c6c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8006c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c70:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c72:	2400      	movs	r4, #0
 8006c74:	4b5f      	ldr	r3, [pc, #380]	; (8006df4 <MX_GPIO_Init+0x188>)
 8006c76:	9401      	str	r4, [sp, #4]
 8006c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8006c7a:	4f5f      	ldr	r7, [pc, #380]	; (8006df8 <MX_GPIO_Init+0x18c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8006c7c:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8006e04 <MX_GPIO_Init+0x198>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ssd1306_RST_Pin|ssd1306_DC_Pin|LD4_Pin|LD3_Pin 
 8006c80:	4e5e      	ldr	r6, [pc, #376]	; (8006dfc <MX_GPIO_Init+0x190>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006c82:	f8df a184 	ldr.w	sl, [pc, #388]	; 8006e08 <MX_GPIO_Init+0x19c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c86:	f042 0210 	orr.w	r2, r2, #16
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8e:	f002 0210 	and.w	r2, r2, #16
 8006c92:	9201      	str	r2, [sp, #4]
 8006c94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c96:	9402      	str	r4, [sp, #8]
 8006c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9a:	f042 0204 	orr.w	r2, r2, #4
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca2:	f002 0204 	and.w	r2, r2, #4
 8006ca6:	9202      	str	r2, [sp, #8]
 8006ca8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006caa:	9403      	str	r4, [sp, #12]
 8006cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006cba:	9203      	str	r2, [sp, #12]
 8006cbc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cbe:	9404      	str	r4, [sp, #16]
 8006cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8006cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cca:	f002 0201 	and.w	r2, r2, #1
 8006cce:	9204      	str	r2, [sp, #16]
 8006cd0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cd2:	9405      	str	r4, [sp, #20]
 8006cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd6:	f042 0202 	orr.w	r2, r2, #2
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
 8006cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cde:	f002 0202 	and.w	r2, r2, #2
 8006ce2:	9205      	str	r2, [sp, #20]
 8006ce4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ce6:	9406      	str	r4, [sp, #24]
 8006ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cea:	f042 0208 	orr.w	r2, r2, #8
 8006cee:	631a      	str	r2, [r3, #48]	; 0x30
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006cfe:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8006d00:	f7fa f846 	bl	8000d90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8006d04:	2201      	movs	r2, #1
 8006d06:	4611      	mov	r1, r2
 8006d08:	4648      	mov	r0, r9
 8006d0a:	f7fa f841 	bl	8000d90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ssd1306_RST_Pin|ssd1306_DC_Pin|LD4_Pin|LD3_Pin 
 8006d0e:	4622      	mov	r2, r4
 8006d10:	4630      	mov	r0, r6
 8006d12:	f64f 2110 	movw	r1, #64016	; 0xfa10
 8006d16:	f7fa f83b 	bl	8000d90 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d1a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8006d1c:	f04f 0808 	mov.w	r8, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8006d20:	a907      	add	r1, sp, #28
 8006d22:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8006d24:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d28:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d2c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8006d2e:	f7f9 feb7 	bl	8000aa0 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006d32:	a907      	add	r1, sp, #28
 8006d34:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006d36:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8006d3a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d3c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d40:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006d42:	f7f9 fead 	bl	8000aa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8006d46:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006d4a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d4c:	f04f 0802 	mov.w	r8, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006d50:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d52:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006d56:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006e0c <MX_GPIO_Init+0x1a0>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d5c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006d5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006d62:	f7f9 fe9d 	bl	8000aa0 <HAL_GPIO_Init>
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 8006d66:	a907      	add	r1, sp, #28
 8006d68:	4825      	ldr	r0, [pc, #148]	; (8006e00 <MX_GPIO_Init+0x194>)
  GPIO_InitStruct.Pin = UserButton_Pin;
 8006d6a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006d6c:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d70:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 8006d72:	f7f9 fe95 	bl	8000aa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006d76:	2304      	movs	r3, #4
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006d78:	a907      	add	r1, sp, #28
 8006d7a:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006d7c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d7e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d80:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006d82:	f7f9 fe8d 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8006d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8006d8a:	a907      	add	r1, sp, #28
 8006d8c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8006d8e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d90:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d94:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d96:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006d98:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8006d9c:	f7f9 fe80 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = ssd1306_RST_Pin|ssd1306_DC_Pin;
 8006da0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006da4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006da6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006da8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006daa:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dac:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dae:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006db2:	f7f9 fe75 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8006db6:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dba:	a907      	add	r1, sp, #28
 8006dbc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8006dbe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dc0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dc4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dc6:	f7f9 fe6b 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8006dca:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006dcc:	a907      	add	r1, sp, #28
 8006dce:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8006dd0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dd2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006dd6:	f7f9 fe63 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8006dda:	a907      	add	r1, sp, #28
 8006ddc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8006dde:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006de2:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8006de8:	f7f9 fe5a 	bl	8000aa0 <HAL_GPIO_Init>

}
 8006dec:	b00d      	add	sp, #52	; 0x34
 8006dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df2:	bf00      	nop
 8006df4:	40023800 	.word	0x40023800
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40020c00 	.word	0x40020c00
 8006e00:	40020000 	.word	0x40020000
 8006e04:	40020800 	.word	0x40020800
 8006e08:	40020400 	.word	0x40020400
 8006e0c:	10120000 	.word	0x10120000

08006e10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006e10:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8006e12:	480d      	ldr	r0, [pc, #52]	; (8006e48 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 100000;
 8006e14:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <MX_I2C1_Init+0x3c>)
 8006e16:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006e54 <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8006e1e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006e22:	2300      	movs	r3, #0
 8006e24:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006e26:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e28:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e2a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006e2c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e2e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e30:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006e32:	f7fa fdc5 	bl	80019c0 <HAL_I2C_Init>
 8006e36:	b128      	cbz	r0, 8006e44 <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006e38:	214c      	movs	r1, #76	; 0x4c
 8006e3a:	4805      	ldr	r0, [pc, #20]	; (8006e50 <MX_I2C1_Init+0x40>)
  }

}
 8006e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8006e40:	f000 b92c 	b.w	800709c <_Error_Handler>
 8006e44:	bd08      	pop	{r3, pc}
 8006e46:	bf00      	nop
 8006e48:	2000269c 	.word	0x2000269c
 8006e4c:	40005400 	.word	0x40005400
 8006e50:	08008754 	.word	0x08008754
 8006e54:	000186a0 	.word	0x000186a0

08006e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006e58:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8006e5a:	6802      	ldr	r2, [r0, #0]
 8006e5c:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <HAL_I2C_MspInit+0x48>)
 8006e5e:	429a      	cmp	r2, r3
{
 8006e60:	b086      	sub	sp, #24
  if(i2cHandle->Instance==I2C1)
 8006e62:	d11a      	bne.n	8006e9a <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8006e64:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006e68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e6a:	2312      	movs	r3, #18
 8006e6c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e72:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e74:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e76:	eb0d 0103 	add.w	r1, sp, r3
 8006e7a:	480a      	ldr	r0, [pc, #40]	; (8006ea4 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e7e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e80:	f7f9 fe0e 	bl	8000aa0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e84:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <HAL_I2C_MspInit+0x50>)
 8006e86:	9400      	str	r4, [sp, #0]
 8006e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e8a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006e9a:	b006      	add	sp, #24
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40005400 	.word	0x40005400
 8006ea4:	40020400 	.word	0x40020400
 8006ea8:	40023800 	.word	0x40023800

08006eac <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8006eac:	6802      	ldr	r2, [r0, #0]
 8006eae:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <HAL_I2C_MspDeInit+0x20>)
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d109      	bne.n	8006ec8 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006eb4:	4a06      	ldr	r2, [pc, #24]	; (8006ed0 <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, Audio_SCL_Pin|Audio_SDA_Pin);
 8006eb6:	4807      	ldr	r0, [pc, #28]	; (8006ed4 <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006eb8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ebe:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, Audio_SCL_Pin|Audio_SDA_Pin);
 8006ec0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ec4:	f7f9 becc 	b.w	8000c60 <HAL_GPIO_DeInit>
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	40005400 	.word	0x40005400
 8006ed0:	40023800 	.word	0x40023800
 8006ed4:	40020400 	.word	0x40020400

08006ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ed8:	b530      	push	{r4, r5, lr}
 8006eda:	b099      	sub	sp, #100	; 0x64
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006edc:	4b2d      	ldr	r3, [pc, #180]	; (8006f94 <SystemClock_Config+0xbc>)
 8006ede:	2100      	movs	r1, #0
 8006ee0:	9101      	str	r1, [sp, #4]
 8006ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ee4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006ee8:	641a      	str	r2, [r3, #64]	; 0x40
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ef4:	4b28      	ldr	r3, [pc, #160]	; (8006f98 <SystemClock_Config+0xc0>)
 8006ef6:	9102      	str	r1, [sp, #8]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f06:	9302      	str	r3, [sp, #8]
 8006f08:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f0e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006f10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f14:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006f16:	2308      	movs	r3, #8
 8006f18:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006f1a:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f1e:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006f20:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006f22:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f24:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006f26:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006f28:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f2a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006f2c:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006f2e:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f30:	f7fb fa94 	bl	800245c <HAL_RCC_OscConfig>
 8006f34:	b100      	cbz	r0, 8006f38 <SystemClock_Config+0x60>
 8006f36:	e7fe      	b.n	8006f36 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f38:	230f      	movs	r3, #15
 8006f3a:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006f3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f40:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006f42:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006f44:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006f4a:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f4c:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006f4e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006f50:	f7fb fc34 	bl	80027bc <HAL_RCC_ClockConfig>
 8006f54:	b100      	cbz	r0, 8006f58 <SystemClock_Config+0x80>
 8006f56:	e7fe      	b.n	8006f56 <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8006f58:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f5a:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8006f5c:	9405      	str	r4, [sp, #20]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8006f5e:	9503      	str	r5, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8006f60:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f62:	f7fb fcdb 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 8006f66:	4604      	mov	r4, r0
 8006f68:	b100      	cbz	r0, 8006f6c <SystemClock_Config+0x94>
 8006f6a:	e7fe      	b.n	8006f6a <SystemClock_Config+0x92>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006f6c:	f7fb fcc0 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8006f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f74:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f78:	f7f9 fb64 	bl	8000644 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8006f7c:	2004      	movs	r0, #4
 8006f7e:	f7f9 fb77 	bl	8000670 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006f82:	4622      	mov	r2, r4
 8006f84:	4621      	mov	r1, r4
 8006f86:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8a:	f7f9 fb1b 	bl	80005c4 <HAL_NVIC_SetPriority>
}
 8006f8e:	b019      	add	sp, #100	; 0x64
 8006f90:	bd30      	pop	{r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40007000 	.word	0x40007000

08006f9c <USB_UserInit>:

/* USER CODE BEGIN 4 */
void USB_UserInit()
{
 8006f9c:	b538      	push	{r3, r4, r5, lr}
  while (1)
  {
      MX_USB_HOST_Process();

      if(f_mount(&myFatFS, USBHPath, 0) == FR_OK)
 8006f9e:	4c0d      	ldr	r4, [pc, #52]	; (8006fd4 <USB_UserInit+0x38>)
 8006fa0:	4d0d      	ldr	r5, [pc, #52]	; (8006fd8 <USB_UserInit+0x3c>)
      MX_USB_HOST_Process();
 8006fa2:	f000 fdd5 	bl	8007b50 <MX_USB_HOST_Process>
      if(f_mount(&myFatFS, USBHPath, 0) == FR_OK)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f7ff f806 	bl	8005fbc <f_mount>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d1f6      	bne.n	8006fa2 <USB_UserInit+0x6>
      {
      	if (f_open(&myFile, "temp.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8006fb4:	220a      	movs	r2, #10
 8006fb6:	4909      	ldr	r1, [pc, #36]	; (8006fdc <USB_UserInit+0x40>)
 8006fb8:	4809      	ldr	r0, [pc, #36]	; (8006fe0 <USB_UserInit+0x44>)
 8006fba:	f7ff f833 	bl	8006024 <f_open>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d1ef      	bne.n	8006fa2 <USB_UserInit+0x6>
	    	{
	    		break;
	    	}
      }
  }
  f_close(&myFile);
 8006fc2:	4807      	ldr	r0, [pc, #28]	; (8006fe0 <USB_UserInit+0x44>)
 8006fc4:	f7ff fa5d 	bl	8006482 <f_close>
  f_unlink("temp.txt");
 8006fc8:	4804      	ldr	r0, [pc, #16]	; (8006fdc <USB_UserInit+0x40>)
}
 8006fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  f_unlink("temp.txt");
 8006fce:	f7ff bbe5 	b.w	800679c <f_unlink>
 8006fd2:	bf00      	nop
 8006fd4:	2000062c 	.word	0x2000062c
 8006fd8:	20003724 	.word	0x20003724
 8006fdc:	08008761 	.word	0x08008761
 8006fe0:	200026f0 	.word	0x200026f0

08006fe4 <main>:
{
 8006fe4:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8006fe6:	f7f9 fa9b 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8006fea:	f7ff ff75 	bl	8006ed8 <SystemClock_Config>
  MX_GPIO_Init();
 8006fee:	f7ff fe3d 	bl	8006c6c <MX_GPIO_Init>
  MX_DMA_Init();
 8006ff2:	f7ff fe09 	bl	8006c08 <MX_DMA_Init>
  MX_I2C1_Init();
 8006ff6:	f7ff ff0b 	bl	8006e10 <MX_I2C1_Init>
  MX_SPI1_Init();
 8006ffa:	f000 f851 	bl	80070a0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8006ffe:	f000 fd91 	bl	8007b24 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8007002:	f7ff fe23 	bl	8006c4c <MX_FATFS_Init>
  MX_SPI2_Init();
 8007006:	f000 f871 	bl	80070ec <MX_SPI2_Init>
  USB_UserInit();
 800700a:	f7ff ffc7 	bl	8006f9c <USB_UserInit>
  ssd1306_Init();
 800700e:	f000 f965 	bl	80072dc <ssd1306_Init>
  ssd1306_Fill(Black);
 8007012:	2000      	movs	r0, #0
 8007014:	f000 f952 	bl	80072bc <ssd1306_Fill>
  ssd1306_DrawBitmap(0, 0, 128, 64, title);
 8007018:	2100      	movs	r1, #0
 800701a:	4b1b      	ldr	r3, [pc, #108]	; (8007088 <main+0xa4>)
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	2340      	movs	r3, #64	; 0x40
 8007022:	4608      	mov	r0, r1
 8007024:	f000 fa5e 	bl	80074e4 <ssd1306_DrawBitmap>
  ssd1306_UpdateScreen();
 8007028:	f000 f92e 	bl	8007288 <ssd1306_UpdateScreen>
  HAL_Delay(3000);
 800702c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007030:	f7f9 faa2 	bl	8000578 <HAL_Delay>
  ssd1306_WriteString("Jason", Font_7x10, White);
 8007034:	4c15      	ldr	r4, [pc, #84]	; (800708c <main+0xa8>)
  ssd1306_Fill(Black);
 8007036:	2000      	movs	r0, #0
 8007038:	f000 f940 	bl	80072bc <ssd1306_Fill>
  ssd1306_SetCursor(40,1);
 800703c:	2101      	movs	r1, #1
 800703e:	2028      	movs	r0, #40	; 0x28
 8007040:	f000 fa4a 	bl	80074d8 <ssd1306_SetCursor>
  ssd1306_WriteString("Jason", Font_7x10, White);
 8007044:	e894 0006 	ldmia.w	r4, {r1, r2}
 8007048:	2301      	movs	r3, #1
 800704a:	4811      	ldr	r0, [pc, #68]	; (8007090 <main+0xac>)
 800704c:	f000 fa2e 	bl	80074ac <ssd1306_WriteString>
  ssd1306_SetCursor(20,13);
 8007050:	210d      	movs	r1, #13
 8007052:	2014      	movs	r0, #20
 8007054:	f000 fa40 	bl	80074d8 <ssd1306_SetCursor>
  ssd1306_WriteString("Music Player", Font_7x10, White);
 8007058:	e894 0006 	ldmia.w	r4, {r1, r2}
 800705c:	2301      	movs	r3, #1
 800705e:	480d      	ldr	r0, [pc, #52]	; (8007094 <main+0xb0>)
 8007060:	f000 fa24 	bl	80074ac <ssd1306_WriteString>
  ssd1306_SetCursor(35,25);
 8007064:	2119      	movs	r1, #25
 8007066:	2023      	movs	r0, #35	; 0x23
 8007068:	f000 fa36 	bl	80074d8 <ssd1306_SetCursor>
  ssd1306_WriteString("Ver 0.1", Font_7x10, White);
 800706c:	2301      	movs	r3, #1
 800706e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8007072:	4809      	ldr	r0, [pc, #36]	; (8007098 <main+0xb4>)
 8007074:	f000 fa1a 	bl	80074ac <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8007078:	f000 f906 	bl	8007288 <ssd1306_UpdateScreen>
    MX_USB_HOST_Process();
 800707c:	f000 fd68 	bl	8007b50 <MX_USB_HOST_Process>
    WavePlayerStart();
 8007080:	f000 ff94 	bl	8007fac <WavePlayerStart>
 8007084:	e7fa      	b.n	800707c <main+0x98>
 8007086:	bf00      	nop
 8007088:	08008785 	.word	0x08008785
 800708c:	2000005c 	.word	0x2000005c
 8007090:	0800876a 	.word	0x0800876a
 8007094:	08008770 	.word	0x08008770
 8007098:	0800877d 	.word	0x0800877d

0800709c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800709c:	e7fe      	b.n	800709c <_Error_Handler>
	...

080070a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80070a0:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 80070a2:	480f      	ldr	r0, [pc, #60]	; (80070e0 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80070a4:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <MX_SPI1_Init+0x44>)
 80070a6:	f44f 7e82 	mov.w	lr, #260	; 0x104
 80070aa:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80070ae:	2300      	movs	r3, #0
 80070b0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80070b2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80070b4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80070b6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80070b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070bc:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070be:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80070c0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80070c4:	230a      	movs	r3, #10
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80070c6:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80070c8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80070ca:	f7fb fd5c 	bl	8002b86 <HAL_SPI_Init>
 80070ce:	b128      	cbz	r0, 80070dc <MX_SPI1_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80070d0:	2152      	movs	r1, #82	; 0x52
 80070d2:	4805      	ldr	r0, [pc, #20]	; (80070e8 <MX_SPI1_Init+0x48>)
  }

}
 80070d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80070d8:	f7ff bfe0 	b.w	800709c <_Error_Handler>
 80070dc:	bd08      	pop	{r3, pc}
 80070de:	bf00      	nop
 80070e0:	200047b4 	.word	0x200047b4
 80070e4:	40013000 	.word	0x40013000
 80070e8:	08008b85 	.word	0x08008b85

080070ec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80070ec:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 80070ee:	480f      	ldr	r0, [pc, #60]	; (800712c <MX_SPI2_Init+0x40>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80070f0:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <MX_SPI2_Init+0x44>)
 80070f2:	f44f 7e82 	mov.w	lr, #260	; 0x104
 80070f6:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80070fa:	2300      	movs	r3, #0
 80070fc:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80070fe:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007100:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007102:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007104:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007108:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800710a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800710c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800710e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007110:	230a      	movs	r3, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007112:	6182      	str	r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8007114:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007116:	f7fb fd36 	bl	8002b86 <HAL_SPI_Init>
 800711a:	b128      	cbz	r0, 8007128 <MX_SPI2_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800711c:	2168      	movs	r1, #104	; 0x68
 800711e:	4805      	ldr	r0, [pc, #20]	; (8007134 <MX_SPI2_Init+0x48>)
  }

}
 8007120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8007124:	f7ff bfba 	b.w	800709c <_Error_Handler>
 8007128:	bd08      	pop	{r3, pc}
 800712a:	bf00      	nop
 800712c:	2000475c 	.word	0x2000475c
 8007130:	40003800 	.word	0x40003800
 8007134:	08008b85 	.word	0x08008b85

08007138 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007138:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800713a:	6803      	ldr	r3, [r0, #0]
 800713c:	4a34      	ldr	r2, [pc, #208]	; (8007210 <HAL_SPI_MspInit+0xd8>)
 800713e:	4293      	cmp	r3, r2
{
 8007140:	b088      	sub	sp, #32
 8007142:	4606      	mov	r6, r0
  if(spiHandle->Instance==SPI1)
 8007144:	d125      	bne.n	8007192 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007146:	2400      	movs	r4, #0
 8007148:	4b32      	ldr	r3, [pc, #200]	; (8007214 <HAL_SPI_MspInit+0xdc>)
 800714a:	9401      	str	r4, [sp, #4]
 800714c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800714e:	4832      	ldr	r0, [pc, #200]	; (8007218 <HAL_SPI_MspInit+0xe0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007150:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007154:	645a      	str	r2, [r3, #68]	; 0x44
 8007156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007158:	9405      	str	r4, [sp, #20]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800715a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800715e:	9301      	str	r3, [sp, #4]
 8007160:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007162:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007164:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007166:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007168:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800716a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800716c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800716e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007170:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007172:	f7f9 fc95 	bl	8000aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800717a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800717c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800717e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007180:	4825      	ldr	r0, [pc, #148]	; (8007218 <HAL_SPI_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007182:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007184:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007186:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007188:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800718a:	f7f9 fc89 	bl	8000aa0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800718e:	b008      	add	sp, #32
 8007190:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
 8007192:	4a22      	ldr	r2, [pc, #136]	; (800721c <HAL_SPI_MspInit+0xe4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d1fa      	bne.n	800718e <HAL_SPI_MspInit+0x56>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007198:	2500      	movs	r5, #0
 800719a:	4b1e      	ldr	r3, [pc, #120]	; (8007214 <HAL_SPI_MspInit+0xdc>)
 800719c:	9502      	str	r5, [sp, #8]
 800719e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071a0:	481f      	ldr	r0, [pc, #124]	; (8007220 <HAL_SPI_MspInit+0xe8>)
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80071a2:	4c20      	ldr	r4, [pc, #128]	; (8007224 <HAL_SPI_MspInit+0xec>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80071a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ac:	9505      	str	r5, [sp, #20]
    __HAL_RCC_SPI2_CLK_ENABLE();
 80071ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b2:	9302      	str	r3, [sp, #8]
 80071b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80071b6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80071ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071bc:	2302      	movs	r3, #2
 80071be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071c0:	2303      	movs	r3, #3
 80071c2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071c4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80071c6:	2305      	movs	r3, #5
 80071c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ca:	f7f9 fc69 	bl	8000aa0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80071ce:	4b16      	ldr	r3, [pc, #88]	; (8007228 <HAL_SPI_MspInit+0xf0>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071d0:	60e5      	str	r5, [r4, #12]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80071d2:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80071d6:	2340      	movs	r3, #64	; 0x40
 80071d8:	60a3      	str	r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80071da:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80071dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071e0:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80071e2:	6165      	str	r5, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80071e4:	61a5      	str	r5, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80071e6:	61e5      	str	r5, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80071e8:	6225      	str	r5, [r4, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071ea:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80071ec:	f7f9 fa68 	bl	80006c0 <HAL_DMA_Init>
 80071f0:	b118      	cbz	r0, 80071fa <HAL_SPI_MspInit+0xc2>
      _Error_Handler(__FILE__, __LINE__);
 80071f2:	21b2      	movs	r1, #178	; 0xb2
 80071f4:	480d      	ldr	r0, [pc, #52]	; (800722c <HAL_SPI_MspInit+0xf4>)
 80071f6:	f7ff ff51 	bl	800709c <_Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80071fa:	2200      	movs	r2, #0
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80071fc:	64b4      	str	r4, [r6, #72]	; 0x48
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80071fe:	4611      	mov	r1, r2
 8007200:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007202:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007204:	f7f9 f9de 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007208:	2024      	movs	r0, #36	; 0x24
 800720a:	f7f9 fa0f 	bl	800062c <HAL_NVIC_EnableIRQ>
}
 800720e:	e7be      	b.n	800718e <HAL_SPI_MspInit+0x56>
 8007210:	40013000 	.word	0x40013000
 8007214:	40023800 	.word	0x40023800
 8007218:	40020000 	.word	0x40020000
 800721c:	40003800 	.word	0x40003800
 8007220:	40020400 	.word	0x40020400
 8007224:	2000480c 	.word	0x2000480c
 8007228:	40026070 	.word	0x40026070
 800722c:	08008b85 	.word	0x08008b85

08007230 <ssd1306_WriteCommand>:
extern SPI_HandleTypeDef hspi2;
static uint8_t ssd1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];   // Screenbuffer
static SSD1306_t ssd1306;          // Screen object

void ssd1306_WriteCommand(uint8_t byte)         // Send a byte to the command register
{
 8007230:	b513      	push	{r0, r1, r4, lr}
 8007232:	ac02      	add	r4, sp, #8
    HAL_GPIO_WritePin(ssd1306_DC_GPIO_Port, ssd1306_DC_Pin, GPIO_PIN_RESET); // command
 8007234:	2200      	movs	r2, #0
{
 8007236:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ssd1306_DC_GPIO_Port, ssd1306_DC_Pin, GPIO_PIN_RESET); // command
 800723a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800723e:	4805      	ldr	r0, [pc, #20]	; (8007254 <ssd1306_WriteCommand+0x24>)
 8007240:	f7f9 fda6 	bl	8000d90 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, (uint8_t *) &byte, 1, 1);
 8007244:	2301      	movs	r3, #1
 8007246:	461a      	mov	r2, r3
 8007248:	4621      	mov	r1, r4
 800724a:	4803      	ldr	r0, [pc, #12]	; (8007258 <ssd1306_WriteCommand+0x28>)
 800724c:	f7fb fcd8 	bl	8002c00 <HAL_SPI_Transmit>
}
 8007250:	b002      	add	sp, #8
 8007252:	bd10      	pop	{r4, pc}
 8007254:	40020c00 	.word	0x40020c00
 8007258:	2000475c 	.word	0x2000475c

0800725c <ssd1306_WriteData>:

void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)    // Send data
{
 800725c:	b570      	push	{r4, r5, r6, lr}
    HAL_GPIO_WritePin(ssd1306_DC_GPIO_Port, ssd1306_DC_Pin, GPIO_PIN_SET); // data
 800725e:	2201      	movs	r2, #1
{
 8007260:	4604      	mov	r4, r0
 8007262:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ssd1306_DC_GPIO_Port, ssd1306_DC_Pin, GPIO_PIN_SET); // data
 8007264:	4806      	ldr	r0, [pc, #24]	; (8007280 <ssd1306_WriteData+0x24>)
 8007266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800726a:	f7f9 fd91 	bl	8000d90 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, buffer, buff_size, 1);
 800726e:	b2aa      	uxth	r2, r5
 8007270:	4621      	mov	r1, r4
 8007272:	2301      	movs	r3, #1
 8007274:	4803      	ldr	r0, [pc, #12]	; (8007284 <ssd1306_WriteData+0x28>)
}
 8007276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&hspi2, buffer, buff_size, 1);
 800727a:	f7fb bcc1 	b.w	8002c00 <HAL_SPI_Transmit>
 800727e:	bf00      	nop
 8007280:	40020c00 	.word	0x40020c00
 8007284:	2000475c 	.word	0x2000475c

08007288 <ssd1306_UpdateScreen>:
  ssd1306_UpdateScreen();
}

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void)
{
 8007288:	b538      	push	{r3, r4, r5, lr}
    for(i = 0; i < 8; i++)
    {
        ssd1306_WriteCommand(0xB0 + i);
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&ssd1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800728a:	4d0b      	ldr	r5, [pc, #44]	; (80072b8 <ssd1306_UpdateScreen+0x30>)
{
 800728c:	2400      	movs	r4, #0
        ssd1306_WriteCommand(0xB0 + i);
 800728e:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8007292:	b2c0      	uxtb	r0, r0
 8007294:	f7ff ffcc 	bl	8007230 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8007298:	2000      	movs	r0, #0
 800729a:	f7ff ffc9 	bl	8007230 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800729e:	2010      	movs	r0, #16
 80072a0:	f7ff ffc6 	bl	8007230 <ssd1306_WriteCommand>
        ssd1306_WriteData(&ssd1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80072a4:	2182      	movs	r1, #130	; 0x82
 80072a6:	fb01 5004 	mla	r0, r1, r4, r5
 80072aa:	3401      	adds	r4, #1
 80072ac:	f7ff ffd6 	bl	800725c <ssd1306_WriteData>
    for(i = 0; i < 8; i++)
 80072b0:	2c08      	cmp	r4, #8
 80072b2:	d1ec      	bne.n	800728e <ssd1306_UpdateScreen+0x6>
    }
}
 80072b4:	bd38      	pop	{r3, r4, r5, pc}
 80072b6:	bf00      	nop
 80072b8:	20000140 	.word	0x20000140

080072bc <ssd1306_Fill>:
    ssd1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80072bc:	4906      	ldr	r1, [pc, #24]	; (80072d8 <ssd1306_Fill+0x1c>)
  for(i = 0; i < sizeof(ssd1306_Buffer); i++)
 80072be:	2300      	movs	r3, #0
    ssd1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80072c0:	1c02      	adds	r2, r0, #0
 80072c2:	bf18      	it	ne
 80072c4:	2201      	movne	r2, #1
 80072c6:	4252      	negs	r2, r2
 80072c8:	545a      	strb	r2, [r3, r1]
  for(i = 0; i < sizeof(ssd1306_Buffer); i++)
 80072ca:	3301      	adds	r3, #1
 80072cc:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80072d0:	d1f6      	bne.n	80072c0 <ssd1306_Fill+0x4>
  ssd1306_UpdateScreen();
 80072d2:	f7ff bfd9 	b.w	8007288 <ssd1306_UpdateScreen>
 80072d6:	bf00      	nop
 80072d8:	20000140 	.word	0x20000140

080072dc <ssd1306_Init>:
{
 80072dc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(ssd1306_RST_GPIO_Port, ssd1306_RST_Pin, GPIO_PIN_RESET);
 80072de:	4c38      	ldr	r4, [pc, #224]	; (80073c0 <ssd1306_Init+0xe4>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072e6:	4620      	mov	r0, r4
 80072e8:	f7f9 fd52 	bl	8000d90 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80072ec:	200a      	movs	r0, #10
 80072ee:	f7f9 f943 	bl	8000578 <HAL_Delay>
	HAL_GPIO_WritePin(ssd1306_RST_GPIO_Port, ssd1306_RST_Pin, GPIO_PIN_SET);
 80072f2:	2201      	movs	r2, #1
 80072f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7f9 fd49 	bl	8000d90 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80072fe:	200a      	movs	r0, #10
 8007300:	f7f9 f93a 	bl	8000578 <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8007304:	20ae      	movs	r0, #174	; 0xae
 8007306:	f7ff ff93 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800730a:	2020      	movs	r0, #32
 800730c:	f7ff ff90 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x02); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8007310:	2002      	movs	r0, #2
 8007312:	f7ff ff8d 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007316:	20b0      	movs	r0, #176	; 0xb0
 8007318:	f7ff ff8a 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction         should be C0
 800731c:	20c8      	movs	r0, #200	; 0xc8
 800731e:	f7ff ff87 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8007322:	2000      	movs	r0, #0
 8007324:	f7ff ff84 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8007328:	2010      	movs	r0, #16
 800732a:	f7ff ff81 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800732e:	2040      	movs	r0, #64	; 0x40
 8007330:	f7ff ff7e 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8007334:	2081      	movs	r0, #129	; 0x81
 8007336:	f7ff ff7b 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800733a:	20ff      	movs	r0, #255	; 0xff
 800733c:	f7ff ff78 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127         should be A0
 8007340:	20a1      	movs	r0, #161	; 0xa1
 8007342:	f7ff ff75 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8007346:	20a6      	movs	r0, #166	; 0xa6
 8007348:	f7ff ff72 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800734c:	20a8      	movs	r0, #168	; 0xa8
 800734e:	f7ff ff6f 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8007352:	203f      	movs	r0, #63	; 0x3f
 8007354:	f7ff ff6c 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007358:	20a4      	movs	r0, #164	; 0xa4
 800735a:	f7ff ff69 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 800735e:	20d3      	movs	r0, #211	; 0xd3
 8007360:	f7ff ff66 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8007364:	2000      	movs	r0, #0
 8007366:	f7ff ff63 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800736a:	20d5      	movs	r0, #213	; 0xd5
 800736c:	f7ff ff60 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8007370:	20f0      	movs	r0, #240	; 0xf0
 8007372:	f7ff ff5d 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8007376:	20d9      	movs	r0, #217	; 0xd9
 8007378:	f7ff ff5a 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800737c:	2022      	movs	r0, #34	; 0x22
 800737e:	f7ff ff57 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8007382:	20da      	movs	r0, #218	; 0xda
 8007384:	f7ff ff54 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8007388:	2012      	movs	r0, #18
 800738a:	f7ff ff51 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800738e:	20db      	movs	r0, #219	; 0xdb
 8007390:	f7ff ff4e 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8007394:	2020      	movs	r0, #32
 8007396:	f7ff ff4b 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800739a:	208d      	movs	r0, #141	; 0x8d
 800739c:	f7ff ff48 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80073a0:	2014      	movs	r0, #20
 80073a2:	f7ff ff45 	bl	8007230 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on ssd1306 panel
 80073a6:	20af      	movs	r0, #175	; 0xaf
 80073a8:	f7ff ff42 	bl	8007230 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 80073ac:	2000      	movs	r0, #0
 80073ae:	f7ff ff85 	bl	80072bc <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80073b2:	f7ff ff69 	bl	8007288 <ssd1306_UpdateScreen>
    ssd1306.Initialized = 1;
 80073b6:	4b03      	ldr	r3, [pc, #12]	; (80073c4 <ssd1306_Init+0xe8>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	715a      	strb	r2, [r3, #5]
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	bf00      	nop
 80073c0:	40020c00 	.word	0x40020c00
 80073c4:	2000013a 	.word	0x2000013a

080073c8 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80073c8:	2881      	cmp	r0, #129	; 0x81
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80073ca:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80073cc:	d81b      	bhi.n	8007406 <ssd1306_DrawPixel+0x3e>
 80073ce:	293f      	cmp	r1, #63	; 0x3f
 80073d0:	d819      	bhi.n	8007406 <ssd1306_DrawPixel+0x3e>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(ssd1306.Inverted) {
 80073d2:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <ssd1306_DrawPixel+0x40>)
 80073d4:	791b      	ldrb	r3, [r3, #4]
 80073d6:	b113      	cbz	r3, 80073de <ssd1306_DrawPixel+0x16>
        color = (SSD1306_COLOR)!color;
 80073d8:	fab2 f282 	clz	r2, r2
 80073dc:	0952      	lsrs	r2, r2, #5
 80073de:	08cb      	lsrs	r3, r1, #3
 80073e0:	2582      	movs	r5, #130	; 0x82
    }
    
    // Draw in the right color
    if(color == White) {
 80073e2:	2a01      	cmp	r2, #1
 80073e4:	4c09      	ldr	r4, [pc, #36]	; (800740c <ssd1306_DrawPixel+0x44>)
 80073e6:	f001 0107 	and.w	r1, r1, #7
        ssd1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80073ea:	fb05 0003 	mla	r0, r5, r3, r0
    if(color == White) {
 80073ee:	d104      	bne.n	80073fa <ssd1306_DrawPixel+0x32>
        ssd1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80073f0:	408a      	lsls	r2, r1
 80073f2:	5c21      	ldrb	r1, [r4, r0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	5422      	strb	r2, [r4, r0]
 80073f8:	bd30      	pop	{r4, r5, pc}
    } else { 
        ssd1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80073fa:	2201      	movs	r2, #1
 80073fc:	408a      	lsls	r2, r1
 80073fe:	5c21      	ldrb	r1, [r4, r0]
 8007400:	ea21 0102 	bic.w	r1, r1, r2
 8007404:	5421      	strb	r1, [r4, r0]
 8007406:	bd30      	pop	{r4, r5, pc}
 8007408:	2000013a 	.word	0x2000013a
 800740c:	20000140 	.word	0x20000140

08007410 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	b087      	sub	sp, #28
 8007416:	4607      	mov	r7, r0
 8007418:	a806      	add	r0, sp, #24
 800741a:	e900 0006 	stmdb	r0, {r1, r2}
 800741e:	469b      	mov	fp, r3
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (ssd1306.CurrentX + Font.FontWidth) ||
 8007420:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <ssd1306_WriteChar+0x98>)
 8007422:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8007426:	881c      	ldrh	r4, [r3, #0]
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	eb04 0209 	add.w	r2, r4, r9
 800742e:	2a81      	cmp	r2, #129	; 0x81
 8007430:	dc37      	bgt.n	80074a2 <ssd1306_WriteChar+0x92>
        SSD1306_HEIGHT <= (ssd1306.CurrentY + Font.FontHeight))
 8007432:	885b      	ldrh	r3, [r3, #2]
 8007434:	f89d a011 	ldrb.w	sl, [sp, #17]
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	eb03 020a 	add.w	r2, r3, sl
    if (SSD1306_WIDTH <= (ssd1306.CurrentX + Font.FontWidth) ||
 800743e:	2a3f      	cmp	r2, #63	; 0x3f
 8007440:	dc2f      	bgt.n	80074a2 <ssd1306_WriteChar+0x92>
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007442:	f1a7 0220 	sub.w	r2, r7, #32
 8007446:	fb0a f302 	mul.w	r3, sl, r2
 800744a:	9303      	str	r3, [sp, #12]
 800744c:	2600      	movs	r6, #0
    for(i = 0; i < Font.FontHeight; i++) {
 800744e:	4556      	cmp	r6, sl
 8007450:	d306      	bcc.n	8007460 <ssd1306_WriteChar+0x50>
            }
        }
    }
    
    // The current space is now taken
    ssd1306.CurrentX += Font.FontWidth;
 8007452:	9b01      	ldr	r3, [sp, #4]
 8007454:	444c      	add	r4, r9
 8007456:	801c      	strh	r4, [r3, #0]
    
    // Return written char for validation
    return ch;
}
 8007458:	4638      	mov	r0, r7
 800745a:	b007      	add	sp, #28
 800745c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007460:	9b03      	ldr	r3, [sp, #12]
 8007462:	9905      	ldr	r1, [sp, #20]
 8007464:	18f2      	adds	r2, r6, r3
        for(j = 0; j < Font.FontWidth; j++) {
 8007466:	2500      	movs	r5, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007468:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800746c:	9302      	str	r3, [sp, #8]
 800746e:	9b00      	ldr	r3, [sp, #0]
 8007470:	eb03 0806 	add.w	r8, r3, r6
                ssd1306_DrawPixel(ssd1306.CurrentX + j, (ssd1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007474:	fa5f f888 	uxtb.w	r8, r8
        for(j = 0; j < Font.FontWidth; j++) {
 8007478:	454d      	cmp	r5, r9
 800747a:	d301      	bcc.n	8007480 <ssd1306_WriteChar+0x70>
    for(i = 0; i < Font.FontHeight; i++) {
 800747c:	3601      	adds	r6, #1
 800747e:	e7e6      	b.n	800744e <ssd1306_WriteChar+0x3e>
            if((b << j) & 0x8000)  {
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	fa03 f205 	lsl.w	r2, r3, r5
 8007486:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(ssd1306.CurrentX + j, (ssd1306.CurrentY + i), (SSD1306_COLOR) color);
 8007488:	eb05 0004 	add.w	r0, r5, r4
                ssd1306_DrawPixel(ssd1306.CurrentX + j, (ssd1306.CurrentY + i), (SSD1306_COLOR)!color);
 800748c:	bf56      	itet	pl
 800748e:	fabb f28b 	clzpl	r2, fp
                ssd1306_DrawPixel(ssd1306.CurrentX + j, (ssd1306.CurrentY + i), (SSD1306_COLOR) color);
 8007492:	465a      	movmi	r2, fp
                ssd1306_DrawPixel(ssd1306.CurrentX + j, (ssd1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007494:	0952      	lsrpl	r2, r2, #5
 8007496:	4641      	mov	r1, r8
 8007498:	b2c0      	uxtb	r0, r0
 800749a:	f7ff ff95 	bl	80073c8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800749e:	3501      	adds	r5, #1
 80074a0:	e7ea      	b.n	8007478 <ssd1306_WriteChar+0x68>
        return 0;
 80074a2:	2700      	movs	r7, #0
 80074a4:	e7d8      	b.n	8007458 <ssd1306_WriteChar+0x48>
 80074a6:	bf00      	nop
 80074a8:	2000013a 	.word	0x2000013a

080074ac <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80074ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ae:	e88d 0006 	stmia.w	sp, {r1, r2}
 80074b2:	466d      	mov	r5, sp
 80074b4:	461f      	mov	r7, r3
 80074b6:	1e46      	subs	r6, r0, #1
    // Write until null-byte
    while (*str) {
 80074b8:	7874      	ldrb	r4, [r6, #1]
 80074ba:	b14c      	cbz	r4, 80074d0 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80074bc:	4620      	mov	r0, r4
 80074be:	463b      	mov	r3, r7
 80074c0:	e895 0006 	ldmia.w	r5, {r1, r2}
 80074c4:	f7ff ffa4 	bl	8007410 <ssd1306_WriteChar>
 80074c8:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80074cc:	42a0      	cmp	r0, r4
 80074ce:	d0f3      	beq.n	80074b8 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 80074d0:	4620      	mov	r0, r4
 80074d2:	b003      	add	sp, #12
 80074d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080074d8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    ssd1306.CurrentX = x;
 80074d8:	4b01      	ldr	r3, [pc, #4]	; (80074e0 <ssd1306_SetCursor+0x8>)
 80074da:	8018      	strh	r0, [r3, #0]
    ssd1306.CurrentY = y;
 80074dc:	8059      	strh	r1, [r3, #2]
 80074de:	4770      	bx	lr
 80074e0:	2000013a 	.word	0x2000013a

080074e4 <ssd1306_DrawBitmap>:
}

void ssd1306_DrawBitmap(uint8_t X, uint8_t Y, uint8_t W, uint8_t H, const uint8_t* pBMP)
{
 80074e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	4680      	mov	r8, r0
 80074ea:	4693      	mov	fp, r2
    uint8_t pX;
    uint8_t pY;
    uint8_t tmpCh;
    uint8_t bL;

    pY = Y;
 80074ec:	460d      	mov	r5, r1
    while (pY < Y + H)
 80074ee:	eb01 0903 	add.w	r9, r1, r3
 80074f2:	454d      	cmp	r5, r9
 80074f4:	da1e      	bge.n	8007534 <ssd1306_DrawBitmap+0x50>
 80074f6:	4644      	mov	r4, r8
    {
	pX = X;
	while (pX < X + W)
 80074f8:	eb08 0a0b 	add.w	sl, r8, fp
 80074fc:	e012      	b.n	8007524 <ssd1306_DrawBitmap+0x40>
	{
	    bL = 0;
	    tmpCh = *pBMP++;
 80074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007500:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007504:	930a      	str	r3, [sp, #40]	; 0x28
	    if (tmpCh)
 8007506:	b196      	cbz	r6, 800752e <ssd1306_DrawBitmap+0x4a>
 8007508:	2700      	movs	r7, #0
	    {
		while (bL < 8)
		{
		    if (tmpCh & 0x01) ssd1306_DrawPixel(pX, pY+bL, White); // LCD_PixelMode
 800750a:	07f3      	lsls	r3, r6, #31
 800750c:	d505      	bpl.n	800751a <ssd1306_DrawBitmap+0x36>
 800750e:	19e9      	adds	r1, r5, r7
 8007510:	2201      	movs	r2, #1
 8007512:	b2c9      	uxtb	r1, r1
 8007514:	4620      	mov	r0, r4
 8007516:	f7ff ff57 	bl	80073c8 <ssd1306_DrawPixel>
		    tmpCh >>= 1;
		    if (tmpCh) 	bL++;
 800751a:	0876      	lsrs	r6, r6, #1
 800751c:	d007      	beq.n	800752e <ssd1306_DrawBitmap+0x4a>
 800751e:	3701      	adds	r7, #1
		while (bL < 8)
 8007520:	2f08      	cmp	r7, #8
 8007522:	d1f2      	bne.n	800750a <ssd1306_DrawBitmap+0x26>
	while (pX < X + W)
 8007524:	4554      	cmp	r4, sl
 8007526:	dbea      	blt.n	80074fe <ssd1306_DrawBitmap+0x1a>
		    }
		}
	    }
	    else pX++;
	 }
	 pY += 8;
 8007528:	3508      	adds	r5, #8
 800752a:	b2ed      	uxtb	r5, r5
 800752c:	e7e1      	b.n	80074f2 <ssd1306_DrawBitmap+0xe>
	    else pX++;
 800752e:	3401      	adds	r4, #1
 8007530:	b2e4      	uxtb	r4, r4
 8007532:	e7f7      	b.n	8007524 <ssd1306_DrawBitmap+0x40>
 8007534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007538 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8007538:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800753a:	4e29      	ldr	r6, [pc, #164]	; (80075e0 <I2Cx_Init+0xa8>)
{
 800753c:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800753e:	4630      	mov	r0, r6
 8007540:	f7fa fc6c 	bl	8001e1c <HAL_I2C_GetState>
 8007544:	4605      	mov	r5, r0
 8007546:	2800      	cmp	r0, #0
 8007548:	d147      	bne.n	80075da <I2Cx_Init+0xa2>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 800754a:	4b26      	ldr	r3, [pc, #152]	; (80075e4 <I2Cx_Init+0xac>)
 800754c:	6073      	str	r3, [r6, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1 = 0x33;
 800754e:	2333      	movs	r3, #51	; 0x33
static void I2Cx_MspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007550:	4c25      	ldr	r4, [pc, #148]	; (80075e8 <I2Cx_Init+0xb0>)
    I2cHandle.Init.OwnAddress1 = 0x33;
 8007552:	60f3      	str	r3, [r6, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007558:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800755a:	60b0      	str	r0, [r6, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800755c:	6133      	str	r3, [r6, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800755e:	4b23      	ldr	r3, [pc, #140]	; (80075ec <I2Cx_Init+0xb4>)
 8007560:	6033      	str	r3, [r6, #0]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007562:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007564:	f043 0302 	orr.w	r3, r3, #2
 8007568:	6323      	str	r3, [r4, #48]	; 0x30
 800756a:	6b23      	ldr	r3, [r4, #48]	; 0x30

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800756c:	9005      	str	r0, [sp, #20]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8007576:	481e      	ldr	r0, [pc, #120]	; (80075f0 <I2Cx_Init+0xb8>)
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8007578:	f44f 7310 	mov.w	r3, #576	; 0x240
 800757c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800757e:	2312      	movs	r3, #18
 8007580:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007582:	2302      	movs	r3, #2
 8007584:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8007586:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007588:	2304      	movs	r3, #4
 800758a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 800758c:	f7f9 fa88 	bl	8000aa0 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8007590:	9502      	str	r5, [sp, #8]
 8007592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007598:	6423      	str	r3, [r4, #64]	; 0x40
 800759a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800759c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075a0:	9302      	str	r3, [sp, #8]
 80075a2:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80075a4:	6a23      	ldr	r3, [r4, #32]
 80075a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075aa:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80075ac:	6a23      	ldr	r3, [r4, #32]
 80075ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075b2:	6223      	str	r3, [r4, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 80075b4:	462a      	mov	r2, r5
 80075b6:	4629      	mov	r1, r5
 80075b8:	201f      	movs	r0, #31
 80075ba:	f7f9 f803 	bl	80005c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80075be:	201f      	movs	r0, #31
 80075c0:	f7f9 f834 	bl	800062c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 80075c4:	462a      	mov	r2, r5
 80075c6:	4629      	mov	r1, r5
 80075c8:	2020      	movs	r0, #32
 80075ca:	f7f8 fffb 	bl	80005c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80075ce:	2020      	movs	r0, #32
 80075d0:	f7f9 f82c 	bl	800062c <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80075d4:	4630      	mov	r0, r6
 80075d6:	f7fa f9f3 	bl	80019c0 <HAL_I2C_Init>
}
 80075da:	b008      	add	sp, #32
 80075dc:	bd70      	pop	{r4, r5, r6, pc}
 80075de:	bf00      	nop
 80075e0:	20000550 	.word	0x20000550
 80075e4:	000186a0 	.word	0x000186a0
 80075e8:	40023800 	.word	0x40023800
 80075ec:	40005400 	.word	0x40005400
 80075f0:	40020400 	.word	0x40020400

080075f4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80075f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f6:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80075f8:	2600      	movs	r6, #0
 80075fa:	4b15      	ldr	r3, [pc, #84]	; (8007650 <AUDIO_IO_Init+0x5c>)
 80075fc:	9600      	str	r6, [sp, #0]
 80075fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8007600:	4c14      	ldr	r4, [pc, #80]	; (8007654 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8007602:	f042 0208 	orr.w	r2, r2, #8
 8007606:	631a      	str	r2, [r3, #48]	; 0x30
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800760a:	9603      	str	r6, [sp, #12]
  AUDIO_RESET_GPIO_CLK_ENABLE();
 800760c:	f003 0308 	and.w	r3, r3, #8
 8007610:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8007612:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8007614:	a901      	add	r1, sp, #4
 8007616:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8007618:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 800761a:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800761c:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800761e:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007620:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007622:	9702      	str	r7, [sp, #8]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8007624:	f7f9 fa3c 	bl	8000aa0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8007628:	f7ff ff86 	bl	8007538 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800762c:	4632      	mov	r2, r6
 800762e:	4629      	mov	r1, r5
 8007630:	4620      	mov	r0, r4
 8007632:	f7f9 fbad 	bl	8000d90 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8007636:	2005      	movs	r0, #5
 8007638:	f7f8 ff9e 	bl	8000578 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 800763c:	463a      	mov	r2, r7
 800763e:	4629      	mov	r1, r5
 8007640:	4620      	mov	r0, r4
 8007642:	f7f9 fba5 	bl	8000d90 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8007646:	2005      	movs	r0, #5
 8007648:	f7f8 ff96 	bl	8000578 <HAL_Delay>
}
 800764c:	b007      	add	sp, #28
 800764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007650:	40023800 	.word	0x40023800
 8007654:	40020c00 	.word	0x40020c00

08007658 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 8007658:	4770      	bx	lr
	...

0800765c <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800765c:	b510      	push	{r4, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <AUDIO_IO_Write+0x30>)
 8007664:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	9302      	str	r3, [sp, #8]
 800766c:	2301      	movs	r3, #1
 800766e:	460a      	mov	r2, r1
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	4601      	mov	r1, r0
 8007674:	9400      	str	r4, [sp, #0]
 8007676:	4806      	ldr	r0, [pc, #24]	; (8007690 <AUDIO_IO_Write+0x34>)
 8007678:	f7fa fa2a 	bl	8001ad0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800767c:	b120      	cbz	r0, 8007688 <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800767e:	4804      	ldr	r0, [pc, #16]	; (8007690 <AUDIO_IO_Write+0x34>)
 8007680:	f7fa fa0c 	bl	8001a9c <HAL_I2C_DeInit>
  I2Cx_Init();
 8007684:	f7ff ff58 	bl	8007538 <I2Cx_Init>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8007688:	b006      	add	sp, #24
 800768a:	bd10      	pop	{r4, pc}
 800768c:	20000064 	.word	0x20000064
 8007690:	20000550 	.word	0x20000550

08007694 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8007694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8007696:	aa06      	add	r2, sp, #24
 8007698:	2300      	movs	r3, #0
 800769a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 800769e:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <AUDIO_IO_Read+0x38>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	2301      	movs	r3, #1
 80076a6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80076aa:	460a      	mov	r2, r1
 80076ac:	4601      	mov	r1, r0
 80076ae:	4808      	ldr	r0, [pc, #32]	; (80076d0 <AUDIO_IO_Read+0x3c>)
 80076b0:	f7fa faa4 	bl	8001bfc <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80076b4:	b120      	cbz	r0, 80076c0 <AUDIO_IO_Read+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 80076b6:	4806      	ldr	r0, [pc, #24]	; (80076d0 <AUDIO_IO_Read+0x3c>)
 80076b8:	f7fa f9f0 	bl	8001a9c <HAL_I2C_DeInit>
  I2Cx_Init();
 80076bc:	f7ff ff3c 	bl	8007538 <I2Cx_Init>
  return I2Cx_ReadData(Addr, Reg);
}
 80076c0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80076c4:	b007      	add	sp, #28
 80076c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80076ca:	bf00      	nop
 80076cc:	20000064 	.word	0x20000064
 80076d0:	20000550 	.word	0x20000550

080076d4 <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80076d4:	4a0d      	ldr	r2, [pc, #52]	; (800770c <I2S3_Init+0x38>)

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80076d6:	69d1      	ldr	r1, [r2, #28]
 80076d8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
{
 80076dc:	b508      	push	{r3, lr}
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80076de:	0409      	lsls	r1, r1, #16
  hAudioOutI2s.Instance         = I2S3;
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <I2S3_Init+0x3c>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80076e2:	0c09      	lsrs	r1, r1, #16
  hAudioOutI2s.Instance         = I2S3;
 80076e4:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80076e6:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80076e8:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80076ea:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80076ee:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80076f0:	4618      	mov	r0, r3
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80076f2:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80076f4:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80076f6:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80076f8:	6119      	str	r1, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 80076fa:	6059      	str	r1, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80076fc:	609a      	str	r2, [r3, #8]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80076fe:	f7fa fc53 	bl	8001fa8 <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 8007702:	3000      	adds	r0, #0
 8007704:	bf18      	it	ne
 8007706:	2001      	movne	r0, #1
 8007708:	bd08      	pop	{r3, pc}
 800770a:	bf00      	nop
 800770c:	40003c00 	.word	0x40003c00
 8007710:	20004910 	.word	0x20004910

08007714 <BSP_AUDIO_OUT_Play>:
{
 8007714:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8007716:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <BSP_AUDIO_OUT_Play+0x34>)
 8007718:	681b      	ldr	r3, [r3, #0]
{
 800771a:	4605      	mov	r5, r0
 800771c:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800771e:	b28a      	uxth	r2, r1
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	4601      	mov	r1, r0
 8007724:	2094      	movs	r0, #148	; 0x94
 8007726:	4798      	blx	r3
 8007728:	b960      	cbnz	r0, 8007744 <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 800772a:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 800772e:	bf34      	ite	cc
 8007730:	0862      	lsrcc	r2, r4, #1
 8007732:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8007736:	b292      	uxth	r2, r2
 8007738:	4629      	mov	r1, r5
 800773a:	4804      	ldr	r0, [pc, #16]	; (800774c <BSP_AUDIO_OUT_Play+0x38>)
 800773c:	f7fa fb72 	bl	8001e24 <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8007740:	2000      	movs	r0, #0
 8007742:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8007744:	2001      	movs	r0, #1
}
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	20000604 	.word	0x20000604
 800774c:	20004910 	.word	0x20004910

08007750 <BSP_AUDIO_OUT_Stop>:
{
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8007754:	480c      	ldr	r0, [pc, #48]	; (8007788 <BSP_AUDIO_OUT_Stop+0x38>)
 8007756:	f7fa fbb7 	bl	8001ec8 <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800775a:	4b0c      	ldr	r3, [pc, #48]	; (800778c <BSP_AUDIO_OUT_Stop+0x3c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4629      	mov	r1, r5
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	2094      	movs	r0, #148	; 0x94
 8007764:	4798      	blx	r3
 8007766:	4604      	mov	r4, r0
 8007768:	b958      	cbnz	r0, 8007782 <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 800776a:	2d01      	cmp	r5, #1
 800776c:	d107      	bne.n	800777e <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 800776e:	4628      	mov	r0, r5
 8007770:	f7f8 ff02 	bl	8000578 <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8007774:	4622      	mov	r2, r4
 8007776:	2110      	movs	r1, #16
 8007778:	4805      	ldr	r0, [pc, #20]	; (8007790 <BSP_AUDIO_OUT_Stop+0x40>)
 800777a:	f7f9 fb09 	bl	8000d90 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 800777e:	4620      	mov	r0, r4
}
 8007780:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8007782:	2001      	movs	r0, #1
 8007784:	bd38      	pop	{r3, r4, r5, pc}
 8007786:	bf00      	nop
 8007788:	20004910 	.word	0x20004910
 800778c:	20000604 	.word	0x20000604
 8007790:	40020c00 	.word	0x40020c00

08007794 <BSP_AUDIO_OUT_ChangeBuffer>:
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8007794:	460a      	mov	r2, r1
 8007796:	4601      	mov	r1, r0
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 800779a:	f7fa bb43 	b.w	8001e24 <HAL_I2S_Transmit_DMA>
 800779e:	bf00      	nop
 80077a0:	20004910 	.word	0x20004910

080077a4 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 80077a4:	b530      	push	{r4, r5, lr}
    if(I2SFreq[index] == AudioFreq)
 80077a6:	4d13      	ldr	r5, [pc, #76]	; (80077f4 <BSP_AUDIO_OUT_ClockConfig+0x50>)
{ 
 80077a8:	b085      	sub	sp, #20
 80077aa:	2300      	movs	r3, #0
  uint8_t index = 0, freqindex = 0xFF;
 80077ac:	24ff      	movs	r4, #255	; 0xff
    if(I2SFreq[index] == AudioFreq)
 80077ae:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	3301      	adds	r3, #1
 80077b6:	4288      	cmp	r0, r1
 80077b8:	bf08      	it	eq
 80077ba:	4614      	moveq	r4, r2
  for(index = 0; index < 8; index++)
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d1f6      	bne.n	80077ae <BSP_AUDIO_OUT_ClockConfig+0xa>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80077c0:	4668      	mov	r0, sp
 80077c2:	f7fb f943 	bl	8002a4c <HAL_RCCEx_GetPeriphCLKConfig>
 80077c6:	2301      	movs	r3, #1
  if ((freqindex & 0x7) == 0)
 80077c8:	f014 0f07 	tst.w	r4, #7
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80077cc:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80077ce:	bf01      	itttt	eq
 80077d0:	4b09      	ldreq	r3, [pc, #36]	; (80077f8 <BSP_AUDIO_OUT_ClockConfig+0x54>)
 80077d2:	f853 3024 	ldreq.w	r3, [r3, r4, lsl #2]
 80077d6:	9301      	streq	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80077d8:	4b08      	ldreq	r3, [pc, #32]	; (80077fc <BSP_AUDIO_OUT_ClockConfig+0x58>)
    rccclkinit.PLLI2S.PLLI2SN = 192;        // default : 258 is not suitable for 96KHz wav file
 80077da:	bf16      	itet	ne
 80077dc:	23c0      	movne	r3, #192	; 0xc0
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80077de:	f853 3024 	ldreq.w	r3, [r3, r4, lsl #2]
    rccclkinit.PLLI2S.PLLI2SN = 192;        // default : 258 is not suitable for 96KHz wav file
 80077e2:	9301      	strne	r3, [sp, #4]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80077e4:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 2;          // default : 3 is not suitable for 96KHz wav file
 80077e6:	bf18      	it	ne
 80077e8:	2302      	movne	r3, #2
 80077ea:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80077ec:	f7fb f896 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
}
 80077f0:	b005      	add	sp, #20
 80077f2:	bd30      	pop	{r4, r5, pc}
 80077f4:	08009300 	.word	0x08009300
 80077f8:	08009320 	.word	0x08009320
 80077fc:	08009340 	.word	0x08009340

08007800 <BSP_AUDIO_OUT_MspInit>:
{
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 8007804:	4c3e      	ldr	r4, [pc, #248]	; (8007900 <BSP_AUDIO_OUT_MspInit+0x100>)
 8007806:	2500      	movs	r5, #0
 8007808:	9500      	str	r5, [sp, #0]
 800780a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800780c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007810:	6423      	str	r3, [r4, #64]	; 0x40
 8007812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 800781c:	9501      	str	r5, [sp, #4]
 800781e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007820:	f043 0304 	orr.w	r3, r3, #4
 8007824:	6323      	str	r3, [r4, #48]	; 0x30
 8007826:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8007830:	9502      	str	r5, [sp, #8]
 8007832:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007834:	f043 0301 	orr.w	r3, r3, #1
 8007838:	6323      	str	r3, [r4, #48]	; 0x30
 800783a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 800783c:	9507      	str	r5, [sp, #28]
  I2S3_WS_CLK_ENABLE();
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	9302      	str	r3, [sp, #8]
 8007844:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8007846:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800784a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 800784c:	2302      	movs	r3, #2
{
 800784e:	4606      	mov	r6, r0
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8007850:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8007852:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8007854:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8007856:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8007858:	482a      	ldr	r0, [pc, #168]	; (8007904 <BSP_AUDIO_OUT_MspInit+0x104>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800785a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 800785c:	f7f9 f920 	bl	8000aa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8007860:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8007862:	a905      	add	r1, sp, #20
 8007864:	4828      	ldr	r0, [pc, #160]	; (8007908 <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8007866:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8007868:	f7f9 f91a 	bl	8000aa0 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 800786c:	9503      	str	r5, [sp, #12]
 800786e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8007870:	4824      	ldr	r0, [pc, #144]	; (8007904 <BSP_AUDIO_OUT_MspInit+0x104>)
  I2S3_MCK_CLK_ENABLE();
 8007872:	f043 0304 	orr.w	r3, r3, #4
 8007876:	6323      	str	r3, [r4, #48]	; 0x30
 8007878:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8007882:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8007884:	2380      	movs	r3, #128	; 0x80
 8007886:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8007888:	f7f9 f90a 	bl	8000aa0 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 800788c:	9504      	str	r5, [sp, #16]
 800788e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 8007890:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 8007892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007896:	6323      	str	r3, [r4, #48]	; 0x30
 8007898:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800789a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 80078a2:	4b1a      	ldr	r3, [pc, #104]	; (800790c <BSP_AUDIO_OUT_MspInit+0x10c>)
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d121      	bne.n	80078ec <BSP_AUDIO_OUT_MspInit+0xec>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80078a8:	4c19      	ldr	r4, [pc, #100]	; (8007910 <BSP_AUDIO_OUT_MspInit+0x110>)
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80078aa:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80078ac:	2340      	movs	r3, #64	; 0x40
 80078ae:	60a3      	str	r3, [r4, #8]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 80078b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b4:	6123      	str	r3, [r4, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80078b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078ba:	6163      	str	r3, [r4, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80078bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078c0:	61a3      	str	r3, [r4, #24]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80078c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078c6:	6223      	str	r3, [r4, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80078c8:	2304      	movs	r3, #4
 80078ca:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80078cc:	2303      	movs	r3, #3
 80078ce:	62a3      	str	r3, [r4, #40]	; 0x28
    HAL_DMA_DeInit(&hdma_i2sTx);
 80078d0:	4620      	mov	r0, r4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80078d2:	4b10      	ldr	r3, [pc, #64]	; (8007914 <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80078d4:	6065      	str	r5, [r4, #4]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80078d6:	60e5      	str	r5, [r4, #12]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80078d8:	61e5      	str	r5, [r4, #28]
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80078da:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80078dc:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80078de:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80078e0:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 80078e2:	f7f8 ff6b 	bl	80007bc <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7f8 feea 	bl	80006c0 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80078ec:	2200      	movs	r2, #0
 80078ee:	210e      	movs	r1, #14
 80078f0:	202f      	movs	r0, #47	; 0x2f
 80078f2:	f7f8 fe67 	bl	80005c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 80078f6:	202f      	movs	r0, #47	; 0x2f
 80078f8:	f7f8 fe98 	bl	800062c <HAL_NVIC_EnableIRQ>
}
 80078fc:	b00a      	add	sp, #40	; 0x28
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	40023800 	.word	0x40023800
 8007904:	40020800 	.word	0x40020800
 8007908:	40020000 	.word	0x40020000
 800790c:	40003c00 	.word	0x40003c00
 8007910:	200005a4 	.word	0x200005a4
 8007914:	400260b8 	.word	0x400260b8

08007918 <BSP_AUDIO_OUT_Init>:
{    
 8007918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 800791c:	4c16      	ldr	r4, [pc, #88]	; (8007978 <BSP_AUDIO_OUT_Init+0x60>)
{    
 800791e:	4615      	mov	r5, r2
 8007920:	4607      	mov	r7, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8007922:	2200      	movs	r2, #0
 8007924:	4620      	mov	r0, r4
{    
 8007926:	4688      	mov	r8, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8007928:	4629      	mov	r1, r5
 800792a:	f7ff ff3b 	bl	80077a4 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 800792e:	4b13      	ldr	r3, [pc, #76]	; (800797c <BSP_AUDIO_OUT_Init+0x64>)
 8007930:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8007932:	4620      	mov	r0, r4
 8007934:	f7fa fc61 	bl	80021fa <HAL_I2S_GetState>
 8007938:	4601      	mov	r1, r0
 800793a:	b910      	cbnz	r0, 8007942 <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 800793c:	4620      	mov	r0, r4
 800793e:	f7ff ff5f 	bl	8007800 <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8007942:	4628      	mov	r0, r5
 8007944:	f7ff fec6 	bl	80076d4 <I2S3_Init>
 8007948:	4604      	mov	r4, r0
 800794a:	b118      	cbz	r0, 8007954 <BSP_AUDIO_OUT_Init+0x3c>
{    
 800794c:	2401      	movs	r4, #1
}
 800794e:	4620      	mov	r0, r4
 8007950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8007954:	4e0a      	ldr	r6, [pc, #40]	; (8007980 <BSP_AUDIO_OUT_Init+0x68>)
 8007956:	2094      	movs	r0, #148	; 0x94
 8007958:	68b3      	ldr	r3, [r6, #8]
 800795a:	4798      	blx	r3
 800795c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8007960:	28e0      	cmp	r0, #224	; 0xe0
 8007962:	d1f3      	bne.n	800794c <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <BSP_AUDIO_OUT_Init+0x6c>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8007966:	4642      	mov	r2, r8
      pAudioDrv = &cs43l22_drv; 
 8007968:	601e      	str	r6, [r3, #0]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800796a:	4639      	mov	r1, r7
 800796c:	6836      	ldr	r6, [r6, #0]
 800796e:	462b      	mov	r3, r5
 8007970:	2094      	movs	r0, #148	; 0x94
 8007972:	47b0      	blx	r6
  return ret;
 8007974:	e7eb      	b.n	800794e <BSP_AUDIO_OUT_Init+0x36>
 8007976:	bf00      	nop
 8007978:	20004910 	.word	0x20004910
 800797c:	40003c00 	.word	0x40003c00
 8007980:	2000002c 	.word	0x2000002c
 8007984:	20000604 	.word	0x20000604

08007988 <HAL_I2S_TxCpltCallback>:
{
 8007988:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 800798a:	6802      	ldr	r2, [r0, #0]
 800798c:	4b02      	ldr	r3, [pc, #8]	; (8007998 <HAL_I2S_TxCpltCallback+0x10>)
 800798e:	429a      	cmp	r2, r3
 8007990:	d101      	bne.n	8007996 <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8007992:	f000 fb67 	bl	8008064 <BSP_AUDIO_OUT_TransferComplete_CallBack>
 8007996:	bd08      	pop	{r3, pc}
 8007998:	40003c00 	.word	0x40003c00

0800799c <HAL_I2S_TxHalfCpltCallback>:
{
 800799c:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 800799e:	6802      	ldr	r2, [r0, #0]
 80079a0:	4b02      	ldr	r3, [pc, #8]	; (80079ac <HAL_I2S_TxHalfCpltCallback+0x10>)
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d101      	bne.n	80079aa <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80079a6:	f000 fb57 	bl	8008058 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
 80079aa:	bd08      	pop	{r3, pc}
 80079ac:	40003c00 	.word	0x40003c00

080079b0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
 80079b0:	4770      	bx	lr

080079b2 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80079b2:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80079b4:	f7ff fffc 	bl	80079b0 <BSP_AUDIO_IN_TransferComplete_CallBack>
 80079b8:	bd08      	pop	{r3, pc}

080079ba <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 80079ba:	4770      	bx	lr

080079bc <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 80079bc:	6802      	ldr	r2, [r0, #0]
 80079be:	4b07      	ldr	r3, [pc, #28]	; (80079dc <HAL_I2S_ErrorCallback+0x20>)
 80079c0:	429a      	cmp	r2, r3
{
 80079c2:	b510      	push	{r4, lr}
 80079c4:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 80079c6:	d101      	bne.n	80079cc <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80079c8:	f000 fb58 	bl	800807c <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 80079cc:	6822      	ldr	r2, [r4, #0]
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <HAL_I2S_ErrorCallback+0x24>)
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d101      	bne.n	80079d8 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 80079d4:	f7ff fff1 	bl	80079ba <BSP_AUDIO_IN_Error_Callback>
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	bf00      	nop
 80079dc:	40003c00 	.word	0x40003c00
 80079e0:	40003800 	.word	0x40003800

080079e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079e4:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079e6:	4b22      	ldr	r3, [pc, #136]	; (8007a70 <HAL_MspInit+0x8c>)
 80079e8:	2400      	movs	r4, #0
 80079ea:	9400      	str	r4, [sp, #0]
 80079ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f2:	645a      	str	r2, [r3, #68]	; 0x44
 80079f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80079fa:	9200      	str	r2, [sp, #0]
 80079fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079fe:	9401      	str	r4, [sp, #4]
 8007a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a06:	641a      	str	r2, [r3, #64]	; 0x40
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007a10:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a12:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007a14:	f7f8 fdc4 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8007a18:	4622      	mov	r2, r4
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f06f 000b 	mvn.w	r0, #11
 8007a20:	f7f8 fdd0 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8007a24:	4622      	mov	r2, r4
 8007a26:	4621      	mov	r1, r4
 8007a28:	f06f 000a 	mvn.w	r0, #10
 8007a2c:	f7f8 fdca 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8007a30:	4622      	mov	r2, r4
 8007a32:	4621      	mov	r1, r4
 8007a34:	f06f 0009 	mvn.w	r0, #9
 8007a38:	f7f8 fdc4 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4621      	mov	r1, r4
 8007a40:	f06f 0004 	mvn.w	r0, #4
 8007a44:	f7f8 fdbe 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	f06f 0003 	mvn.w	r0, #3
 8007a50:	f7f8 fdb8 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8007a54:	4622      	mov	r2, r4
 8007a56:	4621      	mov	r1, r4
 8007a58:	f06f 0001 	mvn.w	r0, #1
 8007a5c:	f7f8 fdb2 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007a60:	4622      	mov	r2, r4
 8007a62:	4621      	mov	r1, r4
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	f7f8 fdac 	bl	80005c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a6c:	b002      	add	sp, #8
 8007a6e:	bd10      	pop	{r4, pc}
 8007a70:	40023800 	.word	0x40023800

08007a74 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007a74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a76:	f7f8 fd6d 	bl	8000554 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8007a7e:	f7f8 be04 	b.w	800068a <HAL_SYSTICK_IRQHandler>
	...

08007a84 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007a84:	4801      	ldr	r0, [pc, #4]	; (8007a8c <DMA1_Stream4_IRQHandler+0x8>)
 8007a86:	f7f8 bf51 	b.w	800092c <HAL_DMA_IRQHandler>
 8007a8a:	bf00      	nop
 8007a8c:	2000480c 	.word	0x2000480c

08007a90 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007a90:	4801      	ldr	r0, [pc, #4]	; (8007a98 <SPI2_IRQHandler+0x8>)
 8007a92:	f7fb b95f 	b.w	8002d54 <HAL_SPI_IRQHandler>
 8007a96:	bf00      	nop
 8007a98:	2000475c 	.word	0x2000475c

08007a9c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8007a9c:	4b01      	ldr	r3, [pc, #4]	; (8007aa4 <DMA1_Stream7_IRQHandler+0x8>)
 8007a9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007aa0:	f7f8 bf44 	b.w	800092c <HAL_DMA_IRQHandler>
 8007aa4:	20004910 	.word	0x20004910

08007aa8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007aa8:	4801      	ldr	r0, [pc, #4]	; (8007ab0 <OTG_FS_IRQHandler+0x8>)
 8007aaa:	f7f9 ba75 	b.w	8000f98 <HAL_HCD_IRQHandler>
 8007aae:	bf00      	nop
 8007ab0:	20004d68 	.word	0x20004d68

08007ab4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ab4:	490f      	ldr	r1, [pc, #60]	; (8007af4 <SystemInit+0x40>)
 8007ab6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007aba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <SystemInit+0x44>)
 8007ac4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007ac6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8007ac8:	f042 0201 	orr.w	r2, r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007ace:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007ad6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ada:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007adc:	4a07      	ldr	r2, [pc, #28]	; (8007afc <SystemInit+0x48>)
 8007ade:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ae6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007ae8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007aea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007aee:	608b      	str	r3, [r1, #8]
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	e000ed00 	.word	0xe000ed00
 8007af8:	40023800 	.word	0x40023800
 8007afc:	24003010 	.word	0x24003010

08007b00 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007b00:	2904      	cmp	r1, #4
 8007b02:	d00a      	beq.n	8007b1a <USBH_UserProcess+0x1a>
 8007b04:	2905      	cmp	r1, #5
 8007b06:	d004      	beq.n	8007b12 <USBH_UserProcess+0x12>
 8007b08:	2902      	cmp	r1, #2
 8007b0a:	d105      	bne.n	8007b18 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007b0c:	4b04      	ldr	r3, [pc, #16]	; (8007b20 <USBH_UserProcess+0x20>)
 8007b0e:	7019      	strb	r1, [r3, #0]
  break;
 8007b10:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8007b12:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <USBH_UserProcess+0x20>)
 8007b16:	701a      	strb	r2, [r3, #0]
 8007b18:	4770      	bx	lr
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	e7fa      	b.n	8007b14 <USBH_UserProcess+0x14>
 8007b1e:	bf00      	nop
 8007b20:	20000608 	.word	0x20000608

08007b24 <MX_USB_HOST_Init>:
{
 8007b24:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8007b26:	4c07      	ldr	r4, [pc, #28]	; (8007b44 <MX_USB_HOST_Init+0x20>)
 8007b28:	4907      	ldr	r1, [pc, #28]	; (8007b48 <MX_USB_HOST_Init+0x24>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f7fc fc02 	bl	8004336 <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS);
 8007b32:	4620      	mov	r0, r4
 8007b34:	4905      	ldr	r1, [pc, #20]	; (8007b4c <MX_USB_HOST_Init+0x28>)
 8007b36:	f7fc fc15 	bl	8004364 <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 8007b3a:	4620      	mov	r0, r4
}
 8007b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 8007b40:	f7fc bc43 	b.w	80043ca <USBH_Start>
 8007b44:	200049a0 	.word	0x200049a0
 8007b48:	08007b01 	.word	0x08007b01
 8007b4c:	20000008 	.word	0x20000008

08007b50 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <MX_USB_HOST_Process+0x8>)
 8007b52:	f7fc bc44 	b.w	80043de <USBH_Process>
 8007b56:	bf00      	nop
 8007b58:	200049a0 	.word	0x200049a0

08007b5c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007b5c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8007b5e:	6803      	ldr	r3, [r0, #0]
 8007b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8007b64:	b086      	sub	sp, #24
  if(hcdHandle->Instance==USB_OTG_FS)
 8007b66:	d12d      	bne.n	8007bc4 <HAL_HCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b68:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007b6e:	a901      	add	r1, sp, #4
 8007b70:	4815      	ldr	r0, [pc, #84]	; (8007bc8 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007b72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b74:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b76:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007b78:	f7f8 ff92 	bl	8000aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007b7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007b80:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b82:	2302      	movs	r3, #2
 8007b84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b86:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b88:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b8a:	480f      	ldr	r0, [pc, #60]	; (8007bc8 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b90:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b92:	f7f8 ff85 	bl	8000aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <HAL_HCD_MspInit+0x70>)
 8007b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b9e:	635a      	str	r2, [r3, #52]	; 0x34
 8007ba0:	9400      	str	r4, [sp, #0]
 8007ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ba8:	645a      	str	r2, [r3, #68]	; 0x44
 8007baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb0:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bb2:	2043      	movs	r0, #67	; 0x43
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bb8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bba:	f7f8 fd03 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bbe:	2043      	movs	r0, #67	; 0x43
 8007bc0:	f7f8 fd34 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bc4:	b006      	add	sp, #24
 8007bc6:	bd10      	pop	{r4, pc}
 8007bc8:	40020000 	.word	0x40020000
 8007bcc:	40023800 	.word	0x40023800

08007bd0 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8007bd0:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8007bd4:	f7fc bd20 	b.w	8004618 <USBH_LL_IncTimer>

08007bd8 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8007bd8:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8007bdc:	f7fc bd2a 	b.w	8004634 <USBH_LL_Connect>

08007be0 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8007be0:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8007be4:	f7fc bd39 	b.w	800465a <USBH_LL_Disconnect>

08007be8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007be8:	4770      	bx	lr
	...

08007bec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007bec:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007bee:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8007bf2:	2b01      	cmp	r3, #1
{
 8007bf4:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8007bf6:	d11e      	bne.n	8007c36 <USBH_LL_Init+0x4a>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007bf8:	4810      	ldr	r0, [pc, #64]	; (8007c3c <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;
 8007bfa:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007bfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007c02:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007c04:	2308      	movs	r3, #8
 8007c06:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007c0c:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c0e:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8007c10:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c14:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007c16:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c18:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007c1a:	f7f9 f901 	bl	8000e20 <HAL_HCD_Init>
 8007c1e:	b118      	cbz	r0, 8007c28 <USBH_LL_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007c20:	21e2      	movs	r1, #226	; 0xe2
 8007c22:	4807      	ldr	r0, [pc, #28]	; (8007c40 <USBH_LL_Init+0x54>)
 8007c24:	f7ff fa3a 	bl	800709c <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007c28:	4804      	ldr	r0, [pc, #16]	; (8007c3c <USBH_LL_Init+0x50>)
 8007c2a:	f7f9 fcf9 	bl	8001620 <HAL_HCD_GetCurrentFrame>
 8007c2e:	4601      	mov	r1, r0
 8007c30:	4620      	mov	r0, r4
 8007c32:	f7fc fcee 	bl	8004612 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8007c36:	2000      	movs	r0, #0
 8007c38:	bd10      	pop	{r4, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20004d68 	.word	0x20004d68
 8007c40:	0800937f 	.word	0x0800937f

08007c44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007c44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8007c46:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8007c4a:	f7f9 fcb3 	bl	80015b4 <HAL_HCD_Start>
 8007c4e:	2803      	cmp	r0, #3
 8007c50:	bf9a      	itte	ls
 8007c52:	4b02      	ldrls	r3, [pc, #8]	; (8007c5c <USBH_LL_Start+0x18>)
 8007c54:	5c18      	ldrbls	r0, [r3, r0]
 8007c56:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8007c58:	bd08      	pop	{r3, pc}
 8007c5a:	bf00      	nop
 8007c5c:	0800937b 	.word	0x0800937b

08007c60 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007c60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8007c62:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8007c66:	f7f9 fcbb 	bl	80015e0 <HAL_HCD_Stop>
 8007c6a:	2803      	cmp	r0, #3
 8007c6c:	bf9a      	itte	ls
 8007c6e:	4b02      	ldrls	r3, [pc, #8]	; (8007c78 <USBH_LL_Stop+0x18>)
 8007c70:	5c18      	ldrbls	r0, [r3, r0]
 8007c72:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8007c74:	bd08      	pop	{r3, pc}
 8007c76:	bf00      	nop
 8007c78:	0800937b 	.word	0x0800937b

08007c7c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007c7c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007c7e:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8007c82:	f7f9 fcd0 	bl	8001626 <HAL_HCD_GetCurrentSpeed>
 8007c86:	2802      	cmp	r0, #2
 8007c88:	bf9a      	itte	ls
 8007c8a:	4b02      	ldrls	r3, [pc, #8]	; (8007c94 <USBH_LL_GetSpeed+0x18>)
 8007c8c:	5c18      	ldrbls	r0, [r3, r0]
 8007c8e:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8007c90:	bd08      	pop	{r3, pc}
 8007c92:	bf00      	nop
 8007c94:	08009378 	.word	0x08009378

08007c98 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007c98:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007c9a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8007c9e:	f7f9 fcb1 	bl	8001604 <HAL_HCD_ResetPort>
 8007ca2:	2803      	cmp	r0, #3
 8007ca4:	bf9a      	itte	ls
 8007ca6:	4b02      	ldrls	r3, [pc, #8]	; (8007cb0 <USBH_LL_ResetPort+0x18>)
 8007ca8:	5c18      	ldrbls	r0, [r3, r0]
 8007caa:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8007cac:	bd08      	pop	{r3, pc}
 8007cae:	bf00      	nop
 8007cb0:	0800937b 	.word	0x0800937b

08007cb4 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007cb4:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8007cb8:	f7f9 bcad 	b.w	8001616 <HAL_HCD_HC_GetXferCount>

08007cbc <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007cbe:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007cc2:	9402      	str	r4, [sp, #8]
 8007cc4:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8007cc8:	9401      	str	r4, [sp, #4]
 8007cca:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8007cce:	9400      	str	r4, [sp, #0]
 8007cd0:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8007cd4:	f7f9 f861 	bl	8000d9a <HAL_HCD_HC_Init>
 8007cd8:	2803      	cmp	r0, #3
 8007cda:	bf9a      	itte	ls
 8007cdc:	4b02      	ldrls	r3, [pc, #8]	; (8007ce8 <USBH_LL_OpenPipe+0x2c>)
 8007cde:	5c18      	ldrbls	r0, [r3, r0]
 8007ce0:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8007ce2:	b004      	add	sp, #16
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0800937b 	.word	0x0800937b

08007cec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007cec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007cee:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8007cf2:	f7f9 f883 	bl	8000dfc <HAL_HCD_HC_Halt>
 8007cf6:	2803      	cmp	r0, #3
 8007cf8:	bf9a      	itte	ls
 8007cfa:	4b02      	ldrls	r3, [pc, #8]	; (8007d04 <USBH_LL_ClosePipe+0x18>)
 8007cfc:	5c18      	ldrbls	r0, [r3, r0]
 8007cfe:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8007d00:	bd08      	pop	{r3, pc}
 8007d02:	bf00      	nop
 8007d04:	0800937b 	.word	0x0800937b

08007d08 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007d0a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8007d0e:	9403      	str	r4, [sp, #12]
 8007d10:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007d14:	9402      	str	r4, [sp, #8]
 8007d16:	9c07      	ldr	r4, [sp, #28]
 8007d18:	9401      	str	r4, [sp, #4]
 8007d1a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8007d1e:	9400      	str	r4, [sp, #0]
 8007d20:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8007d24:	f7f9 f8b8 	bl	8000e98 <HAL_HCD_HC_SubmitRequest>
 8007d28:	2803      	cmp	r0, #3
 8007d2a:	bf9a      	itte	ls
 8007d2c:	4b02      	ldrls	r3, [pc, #8]	; (8007d38 <USBH_LL_SubmitURB+0x30>)
 8007d2e:	5c18      	ldrbls	r0, [r3, r0]
 8007d30:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8007d32:	b004      	add	sp, #16
 8007d34:	bd10      	pop	{r4, pc}
 8007d36:	bf00      	nop
 8007d38:	0800937b 	.word	0x0800937b

08007d3c <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007d3c:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8007d40:	f7f9 bc63 	b.w	800160a <HAL_HCD_HC_GetURBState>

08007d44 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007d44:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8007d46:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d102      	bne.n	8007d54 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8007d4e:	4608      	mov	r0, r1
 8007d50:	f000 f8a4 	bl	8007e9c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007d54:	20c8      	movs	r0, #200	; 0xc8
 8007d56:	f7f8 fc0f 	bl	8000578 <HAL_Delay>
  return USBH_OK;
}
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	bd08      	pop	{r3, pc}

08007d5e <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007d5e:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0

  if(pHandle->hc[pipe].ep_is_in)
 8007d62:	2328      	movs	r3, #40	; 0x28
 8007d64:	fb03 0101 	mla	r1, r3, r1, r0
 8007d68:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8007d6c:	b11b      	cbz	r3, 8007d76 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007d6e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8007d72:	2000      	movs	r0, #0
 8007d74:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8007d76:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8007d7a:	e7fa      	b.n	8007d72 <USBH_LL_SetToggle+0x14>

08007d7c <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007d7c:	f8d0 23c0 	ldr.w	r2, [r0, #960]	; 0x3c0

  if(pHandle->hc[pipe].ep_is_in)
 8007d80:	2328      	movs	r3, #40	; 0x28
 8007d82:	fb03 2101 	mla	r1, r3, r1, r2
 8007d86:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8007d8a:	b113      	cbz	r3, 8007d92 <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8007d8c:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 8007d90:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8007d92:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 8007d96:	4770      	bx	lr

08007d98 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8007d98:	f7f8 bbee 	b.w	8000578 <HAL_Delay>

08007d9c <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	4770      	bx	lr

08007da0 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007da0:	4601      	mov	r1, r0
{
 8007da2:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007da4:	4803      	ldr	r0, [pc, #12]	; (8007db4 <USBH_status+0x14>)
 8007da6:	f7fb ff3e 	bl	8003c26 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 8007daa:	fab0 f080 	clz	r0, r0
 8007dae:	0940      	lsrs	r0, r0, #5
 8007db0:	bd08      	pop	{r3, pc}
 8007db2:	bf00      	nop
 8007db4:	200049a0 	.word	0x200049a0

08007db8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007db8:	b510      	push	{r4, lr}
 8007dba:	b090      	sub	sp, #64	; 0x40
 8007dbc:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	480a      	ldr	r0, [pc, #40]	; (8007df0 <USBH_read+0x38>)
 8007dc6:	f7fb ff57 	bl	8003c78 <USBH_MSC_Read>
 8007dca:	b168      	cbz	r0, 8007de8 <USBH_read+0x30>
  {
    res = RES_OK;
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007dcc:	aa03      	add	r2, sp, #12
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4807      	ldr	r0, [pc, #28]	; (8007df0 <USBH_read+0x38>)
 8007dd2:	f7fb ff39 	bl	8003c48 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007dd6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007dda:	2b28      	cmp	r3, #40	; 0x28
 8007ddc:	d006      	beq.n	8007dec <USBH_read+0x34>
 8007dde:	2b3a      	cmp	r3, #58	; 0x3a
 8007de0:	d004      	beq.n	8007dec <USBH_read+0x34>
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d002      	beq.n	8007dec <USBH_read+0x34>
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
      break; 

    default:
      res = RES_ERROR;
 8007de6:	2001      	movs	r0, #1
      break;
    }
  }

  return res;
}
 8007de8:	b010      	add	sp, #64	; 0x40
 8007dea:	bd10      	pop	{r4, pc}
      res = RES_NOTRDY;
 8007dec:	2003      	movs	r0, #3
 8007dee:	e7fb      	b.n	8007de8 <USBH_read+0x30>
 8007df0:	200049a0 	.word	0x200049a0

08007df4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007df4:	b510      	push	{r4, lr}
 8007df6:	4614      	mov	r4, r2
 8007df8:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8007dfa:	2903      	cmp	r1, #3
 8007dfc:	d803      	bhi.n	8007e06 <USBH_ioctl+0x12>
 8007dfe:	e8df f001 	tbb	[pc, r1]
 8007e02:	0525      	.short	0x0525
 8007e04:	1a10      	.short	0x1a10
      res = RES_ERROR;
    }
    break;

  default:
    res = RES_PARERR;
 8007e06:	2004      	movs	r0, #4
  }

  return res;
}
 8007e08:	b00e      	add	sp, #56	; 0x38
 8007e0a:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	aa01      	add	r2, sp, #4
 8007e10:	480f      	ldr	r0, [pc, #60]	; (8007e50 <USBH_ioctl+0x5c>)
 8007e12:	f7fb ff19 	bl	8003c48 <USBH_MSC_GetLUNInfo>
 8007e16:	b108      	cbz	r0, 8007e1c <USBH_ioctl+0x28>
      res = RES_ERROR;
 8007e18:	2001      	movs	r0, #1
 8007e1a:	e7f5      	b.n	8007e08 <USBH_ioctl+0x14>
      *(DWORD*)buff = info.capacity.block_nbr;
 8007e1c:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 8007e1e:	6023      	str	r3, [r4, #0]
 8007e20:	e7f2      	b.n	8007e08 <USBH_ioctl+0x14>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007e22:	4601      	mov	r1, r0
 8007e24:	aa01      	add	r2, sp, #4
 8007e26:	480a      	ldr	r0, [pc, #40]	; (8007e50 <USBH_ioctl+0x5c>)
 8007e28:	f7fb ff0e 	bl	8003c48 <USBH_MSC_GetLUNInfo>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d1f3      	bne.n	8007e18 <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size;
 8007e30:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007e34:	e7f3      	b.n	8007e1e <USBH_ioctl+0x2a>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007e36:	4601      	mov	r1, r0
 8007e38:	aa01      	add	r2, sp, #4
 8007e3a:	4805      	ldr	r0, [pc, #20]	; (8007e50 <USBH_ioctl+0x5c>)
 8007e3c:	f7fb ff04 	bl	8003c48 <USBH_MSC_GetLUNInfo>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d1e9      	bne.n	8007e18 <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007e44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007e48:	0a5b      	lsrs	r3, r3, #9
 8007e4a:	e7e8      	b.n	8007e1e <USBH_ioctl+0x2a>
    res = RES_OK;
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	e7db      	b.n	8007e08 <USBH_ioctl+0x14>
 8007e50:	200049a0 	.word	0x200049a0

08007e54 <USBH_write>:
{
 8007e54:	b510      	push	{r4, lr}
 8007e56:	b090      	sub	sp, #64	; 0x40
 8007e58:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4601      	mov	r1, r0
 8007e60:	480d      	ldr	r0, [pc, #52]	; (8007e98 <USBH_write+0x44>)
 8007e62:	f7fb ff4c 	bl	8003cfe <USBH_MSC_Write>
 8007e66:	b160      	cbz	r0, 8007e82 <USBH_write+0x2e>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007e68:	aa03      	add	r2, sp, #12
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	480a      	ldr	r0, [pc, #40]	; (8007e98 <USBH_write+0x44>)
 8007e6e:	f7fb feeb 	bl	8003c48 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8007e72:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007e76:	2b27      	cmp	r3, #39	; 0x27
 8007e78:	d00b      	beq.n	8007e92 <USBH_write+0x3e>
 8007e7a:	d804      	bhi.n	8007e86 <USBH_write+0x32>
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	d106      	bne.n	8007e8e <USBH_write+0x3a>
      res = RES_NOTRDY;
 8007e80:	2003      	movs	r0, #3
}
 8007e82:	b010      	add	sp, #64	; 0x40
 8007e84:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
 8007e86:	2b28      	cmp	r3, #40	; 0x28
 8007e88:	d0fa      	beq.n	8007e80 <USBH_write+0x2c>
 8007e8a:	2b3a      	cmp	r3, #58	; 0x3a
 8007e8c:	e7f7      	b.n	8007e7e <USBH_write+0x2a>
      res = RES_ERROR;
 8007e8e:	2001      	movs	r0, #1
 8007e90:	e7f7      	b.n	8007e82 <USBH_write+0x2e>
      res = RES_WRPRT;
 8007e92:	2002      	movs	r0, #2
 8007e94:	e7f5      	b.n	8007e82 <USBH_write+0x2e>
 8007e96:	bf00      	nop
 8007e98:	200049a0 	.word	0x200049a0

08007e9c <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007e9c:	fab0 f280 	clz	r2, r0
 8007ea0:	0952      	lsrs	r2, r2, #5
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <MX_DriverVbusFS+0x10>)
 8007ea6:	f7f8 bf73 	b.w	8000d90 <HAL_GPIO_WritePin>
 8007eaa:	bf00      	nop
 8007eac:	40020800 	.word	0x40020800

08007eb0 <WavePlayerStop>:
  * @param  None
  * @retval None
  */
void WavePlayerStop(void)
{ 
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	f7ff bc4d 	b.w	8007750 <BSP_AUDIO_OUT_Stop>
	...

08007eb8 <WavePlayerInit>:
* @brief  Initializes the Wave player.
* @param  AudioFreq: Audio sampling frequency
* @retval None
*/
int WavePlayerInit(uint32_t AudioFreq)
{ 
 8007eb8:	b508      	push	{r3, lr}
  /* MEMS Accelerometer configure to manage PAUSE, RESUME operations */
//  BSP_ACCELERO_Click_ITConfig();

  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
  return(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AudioFreq));  
 8007eba:	4b03      	ldr	r3, [pc, #12]	; (8007ec8 <WavePlayerInit+0x10>)
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	7819      	ldrb	r1, [r3, #0]
 8007ec0:	2004      	movs	r0, #4
 8007ec2:	f7ff fd29 	bl	8007918 <BSP_AUDIO_OUT_Init>
}
 8007ec6:	bd08      	pop	{r3, pc}
 8007ec8:	20000080 	.word	0x20000080

08007ecc <WavePlayBack>:
{ 
 8007ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  UINT bytesread = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9301      	str	r3, [sp, #4]
  if(WavePlayerInit(AudioFreq) != 0)
 8007ed2:	f7ff fff1 	bl	8007eb8 <WavePlayerInit>
 8007ed6:	b118      	cbz	r0, 8007ee0 <WavePlayBack+0x14>
    Error_Handler();
 8007ed8:	21a8      	movs	r1, #168	; 0xa8
 8007eda:	482b      	ldr	r0, [pc, #172]	; (8007f88 <WavePlayBack+0xbc>)
 8007edc:	f7ff f8de 	bl	800709c <_Error_Handler>
  f_lseek(&FileRead, 0);
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	482a      	ldr	r0, [pc, #168]	; (8007f8c <WavePlayBack+0xc0>)
  AudioRemSize = WaveDataLength - bytesread;
 8007ee4:	4c2a      	ldr	r4, [pc, #168]	; (8007f90 <WavePlayBack+0xc4>)
      if(buffer_offset == BUFFER_OFFSET_HALF)
 8007ee6:	4d2b      	ldr	r5, [pc, #172]	; (8007f94 <WavePlayBack+0xc8>)
        f_read(&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 8007ee8:	4f2b      	ldr	r7, [pc, #172]	; (8007f98 <WavePlayBack+0xcc>)
  f_lseek(&FileRead, 0);
 8007eea:	f7fe fadb 	bl	80064a4 <f_lseek>
  f_read (&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE, &bytesread);
 8007eee:	ab01      	add	r3, sp, #4
 8007ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ef4:	4928      	ldr	r1, [pc, #160]	; (8007f98 <WavePlayBack+0xcc>)
 8007ef6:	4825      	ldr	r0, [pc, #148]	; (8007f8c <WavePlayBack+0xc0>)
 8007ef8:	f7fe f9bc 	bl	8006274 <f_read>
  AudioRemSize = WaveDataLength - bytesread;
 8007efc:	4b27      	ldr	r3, [pc, #156]	; (8007f9c <WavePlayBack+0xd0>)
 8007efe:	9a01      	ldr	r2, [sp, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 8007f02:	4825      	ldr	r0, [pc, #148]	; (8007f98 <WavePlayBack+0xcc>)
  AudioRemSize = WaveDataLength - bytesread;
 8007f04:	1a9b      	subs	r3, r3, r2
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 8007f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  AudioRemSize = WaveDataLength - bytesread;
 8007f0a:	6023      	str	r3, [r4, #0]
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 8007f0c:	f7ff fc02 	bl	8007714 <BSP_AUDIO_OUT_Play>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8007f10:	2201      	movs	r2, #1
 8007f12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f16:	4822      	ldr	r0, [pc, #136]	; (8007fa0 <WavePlayBack+0xd4>)
 8007f18:	f7f8 ff3a 	bl	8000d90 <HAL_GPIO_WritePin>
  while((AudioRemSize != 0))
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d02f      	beq.n	8007f82 <WavePlayBack+0xb6>
      if(buffer_offset == BUFFER_OFFSET_HALF)
 8007f22:	782b      	ldrb	r3, [r5, #0]
      bytesread = 0;
 8007f24:	2600      	movs	r6, #0
      if(buffer_offset == BUFFER_OFFSET_HALF)
 8007f26:	2b01      	cmp	r3, #1
      bytesread = 0;
 8007f28:	9601      	str	r6, [sp, #4]
      if(buffer_offset == BUFFER_OFFSET_HALF)
 8007f2a:	d107      	bne.n	8007f3c <WavePlayBack+0x70>
        f_read(&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 8007f2c:	ab01      	add	r3, sp, #4
 8007f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f32:	4639      	mov	r1, r7
 8007f34:	4815      	ldr	r0, [pc, #84]	; (8007f8c <WavePlayBack+0xc0>)
 8007f36:	f7fe f99d 	bl	8006274 <f_read>
        buffer_offset = BUFFER_OFFSET_NONE;
 8007f3a:	702e      	strb	r6, [r5, #0]
      if(buffer_offset == BUFFER_OFFSET_FULL)
 8007f3c:	782b      	ldrb	r3, [r5, #0]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d108      	bne.n	8007f54 <WavePlayBack+0x88>
        f_read(&FileRead, &Audio_Buffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 8007f42:	ab01      	add	r3, sp, #4
 8007f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f48:	4916      	ldr	r1, [pc, #88]	; (8007fa4 <WavePlayBack+0xd8>)
 8007f4a:	4810      	ldr	r0, [pc, #64]	; (8007f8c <WavePlayBack+0xc0>)
 8007f4c:	f7fe f992 	bl	8006274 <f_read>
        buffer_offset = BUFFER_OFFSET_NONE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	702b      	strb	r3, [r5, #0]
      if(AudioRemSize > (AUDIO_BUFFER_SIZE / 2))
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f5a:	d904      	bls.n	8007f66 <WavePlayBack+0x9a>
        AudioRemSize -= bytesread;
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	9a01      	ldr	r2, [sp, #4]
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	e7da      	b.n	8007f1c <WavePlayBack+0x50>
        AudioRemSize = 0;
 8007f66:	2500      	movs	r5, #0
 8007f68:	6025      	str	r5, [r4, #0]
        WavePlayerStop();
 8007f6a:	f7ff ffa1 	bl	8007eb0 <WavePlayerStop>
        f_close(&FileRead);
 8007f6e:	4807      	ldr	r0, [pc, #28]	; (8007f8c <WavePlayBack+0xc0>)
 8007f70:	f7fe fa87 	bl	8006482 <f_close>
        if(MusicIndex++ >= 4) MusicIndex = 0;
 8007f74:	4a0c      	ldr	r2, [pc, #48]	; (8007fa8 <WavePlayBack+0xdc>)
 8007f76:	7813      	ldrb	r3, [r2, #0]
 8007f78:	2b03      	cmp	r3, #3
        else MusicIndex++;
 8007f7a:	bf96      	itet	ls
 8007f7c:	3302      	addls	r3, #2
        if(MusicIndex++ >= 4) MusicIndex = 0;
 8007f7e:	7015      	strbhi	r5, [r2, #0]
        else MusicIndex++;
 8007f80:	7013      	strbls	r3, [r2, #0]
}
 8007f82:	b003      	add	sp, #12
 8007f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f86:	bf00      	nop
 8007f88:	080093a8 	.word	0x080093a8
 8007f8c:	20006038 	.word	0x20006038
 8007f90:	2000060c 	.word	0x2000060c
 8007f94:	20000618 	.word	0x20000618
 8007f98:	20005000 	.word	0x20005000
 8007f9c:	20000614 	.word	0x20000614
 8007fa0:	40020c00 	.word	0x40020c00
 8007fa4:	20005800 	.word	0x20005800
 8007fa8:	20000610 	.word	0x20000610

08007fac <WavePlayerStart>:
{
 8007fac:	b530      	push	{r4, r5, lr}
 8007fae:	b08f      	sub	sp, #60	; 0x3c
  UINT bytesread = 0;
 8007fb0:	2300      	movs	r3, #0
  char path[] = "0:/";
 8007fb2:	a90e      	add	r1, sp, #56	; 0x38
  UINT bytesread = 0;
 8007fb4:	9301      	str	r3, [sp, #4]
  char path[] = "0:/";
 8007fb6:	4b1f      	ldr	r3, [pc, #124]	; (8008034 <WavePlayerStart+0x88>)
 8007fb8:	f841 3d30 	str.w	r3, [r1, #-48]!
   if(f_opendir(&Directory, path) == FR_OK)
 8007fbc:	481e      	ldr	r0, [pc, #120]	; (8008038 <WavePlayerStart+0x8c>)
 8007fbe:	f7fe fb9a 	bl	80066f6 <f_opendir>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d133      	bne.n	800802e <WavePlayerStart+0x82>
        wavefilename = MusicList[MusicIndex];
 8007fc6:	4b1d      	ldr	r3, [pc, #116]	; (800803c <WavePlayerStart+0x90>)
        ssd1306_WriteString(wavefilename, Font_7x10, White);
 8007fc8:	4c1d      	ldr	r4, [pc, #116]	; (8008040 <WavePlayerStart+0x94>)
        wavefilename = MusicList[MusicIndex];
 8007fca:	781a      	ldrb	r2, [r3, #0]
 8007fcc:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <WavePlayerStart+0x98>)
 8007fce:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        ssd1306_SetCursor(10,45);
 8007fd2:	212d      	movs	r1, #45	; 0x2d
 8007fd4:	200a      	movs	r0, #10
 8007fd6:	f7ff fa7f 	bl	80074d8 <ssd1306_SetCursor>
        ssd1306_WriteString(wavefilename, Font_7x10, White);
 8007fda:	e894 0006 	ldmia.w	r4, {r1, r2}
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f7ff fa63 	bl	80074ac <ssd1306_WriteString>
        ssd1306_SetCursor(30,45);
 8007fe6:	212d      	movs	r1, #45	; 0x2d
 8007fe8:	201e      	movs	r0, #30
 8007fea:	f7ff fa75 	bl	80074d8 <ssd1306_SetCursor>
        ssd1306_WriteString(".wav playing", Font_7x10, White);
 8007fee:	e894 0006 	ldmia.w	r4, {r1, r2}
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4814      	ldr	r0, [pc, #80]	; (8008048 <WavePlayerStart+0x9c>)
 8007ff6:	f7ff fa59 	bl	80074ac <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8007ffa:	f7ff f945 	bl	8007288 <ssd1306_UpdateScreen>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8007ffe:	2201      	movs	r2, #1
 8008000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008004:	4811      	ldr	r0, [pc, #68]	; (800804c <WavePlayerStart+0xa0>)
 8008006:	f7f8 fec3 	bl	8000d90 <HAL_GPIO_WritePin>
	if(f_open(&FileRead, wavefilename , FA_READ) == FR_OK)
 800800a:	2201      	movs	r2, #1
 800800c:	4629      	mov	r1, r5
 800800e:	4810      	ldr	r0, [pc, #64]	; (8008050 <WavePlayerStart+0xa4>)
 8008010:	f7fe f808 	bl	8006024 <f_open>
 8008014:	b958      	cbnz	r0, 800802e <WavePlayerStart+0x82>
	  f_read (&FileRead, &waveformat, sizeof(waveformat), &bytesread);
 8008016:	ab01      	add	r3, sp, #4
 8008018:	222c      	movs	r2, #44	; 0x2c
 800801a:	a903      	add	r1, sp, #12
 800801c:	480c      	ldr	r0, [pc, #48]	; (8008050 <WavePlayerStart+0xa4>)
 800801e:	f7fe f929 	bl	8006274 <f_read>
	  WaveDataLength = waveformat.FileSize;
 8008022:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <WavePlayerStart+0xa8>)
 8008024:	9a04      	ldr	r2, [sp, #16]
	  WavePlayBack(waveformat.SampleRate);
 8008026:	9809      	ldr	r0, [sp, #36]	; 0x24
	  WaveDataLength = waveformat.FileSize;
 8008028:	601a      	str	r2, [r3, #0]
	  WavePlayBack(waveformat.SampleRate);
 800802a:	f7ff ff4f 	bl	8007ecc <WavePlayBack>
}
 800802e:	b00f      	add	sp, #60	; 0x3c
 8008030:	bd30      	pop	{r4, r5, pc}
 8008032:	bf00      	nop
 8008034:	002f3a30 	.word	0x002f3a30
 8008038:	20006000 	.word	0x20006000
 800803c:	20000610 	.word	0x20000610
 8008040:	2000005c 	.word	0x2000005c
 8008044:	2000006c 	.word	0x2000006c
 8008048:	080093bc 	.word	0x080093bc
 800804c:	40020c00 	.word	0x40020c00
 8008050:	20006038 	.word	0x20006038
 8008054:	20000614 	.word	0x20000614

08008058 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
  buffer_offset = BUFFER_OFFSET_HALF;
 8008058:	4b01      	ldr	r3, [pc, #4]	; (8008060 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 800805a:	2201      	movs	r2, #1
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	4770      	bx	lr
 8008060:	20000618 	.word	0x20000618

08008064 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  buffer_offset = BUFFER_OFFSET_FULL;
 8008064:	4b03      	ldr	r3, [pc, #12]	; (8008074 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8008066:	4804      	ldr	r0, [pc, #16]	; (8008078 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
  buffer_offset = BUFFER_OFFSET_FULL;
 8008068:	2202      	movs	r2, #2
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 800806a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer_offset = BUFFER_OFFSET_FULL;
 800806e:	701a      	strb	r2, [r3, #0]
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8008070:	f7ff bb90 	b.w	8007794 <BSP_AUDIO_OUT_ChangeBuffer>
 8008074:	20000618 	.word	0x20000618
 8008078:	20005000 	.word	0x20005000

0800807c <BSP_AUDIO_OUT_Error_CallBack>:
* @brief  Manages the DMA FIFO error interrupt.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800807c:	e7fe      	b.n	800807c <BSP_AUDIO_OUT_Error_CallBack>
	...

08008080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80080b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008086:	e003      	b.n	8008090 <LoopCopyDataInit>

08008088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008088:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800808a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800808c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800808e:	3104      	adds	r1, #4

08008090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008090:	480b      	ldr	r0, [pc, #44]	; (80080c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008092:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008098:	d3f6      	bcc.n	8008088 <CopyDataInit>
  ldr  r2, =_sbss
 800809a:	4a0b      	ldr	r2, [pc, #44]	; (80080c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800809c:	e002      	b.n	80080a4 <LoopFillZerobss>

0800809e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800809e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80080a0:	f842 3b04 	str.w	r3, [r2], #4

080080a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80080a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80080a8:	d3f9      	bcc.n	800809e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80080aa:	f7ff fd03 	bl	8007ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80080ae:	f000 f811 	bl	80080d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80080b2:	f7fe ff97 	bl	8006fe4 <main>
  bx  lr    
 80080b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80080b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80080bc:	08009404 	.word	0x08009404
  ldr  r0, =_sdata
 80080c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80080c4:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 80080c8:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 80080cc:	2000706c 	.word	0x2000706c

080080d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80080d0:	e7fe      	b.n	80080d0 <ADC_IRQHandler>
	...

080080d4 <__libc_init_array>:
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	4e0d      	ldr	r6, [pc, #52]	; (800810c <__libc_init_array+0x38>)
 80080d8:	4c0d      	ldr	r4, [pc, #52]	; (8008110 <__libc_init_array+0x3c>)
 80080da:	1ba4      	subs	r4, r4, r6
 80080dc:	10a4      	asrs	r4, r4, #2
 80080de:	2500      	movs	r5, #0
 80080e0:	42a5      	cmp	r5, r4
 80080e2:	d109      	bne.n	80080f8 <__libc_init_array+0x24>
 80080e4:	4e0b      	ldr	r6, [pc, #44]	; (8008114 <__libc_init_array+0x40>)
 80080e6:	4c0c      	ldr	r4, [pc, #48]	; (8008118 <__libc_init_array+0x44>)
 80080e8:	f000 f8fc 	bl	80082e4 <_init>
 80080ec:	1ba4      	subs	r4, r4, r6
 80080ee:	10a4      	asrs	r4, r4, #2
 80080f0:	2500      	movs	r5, #0
 80080f2:	42a5      	cmp	r5, r4
 80080f4:	d105      	bne.n	8008102 <__libc_init_array+0x2e>
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080fc:	4798      	blx	r3
 80080fe:	3501      	adds	r5, #1
 8008100:	e7ee      	b.n	80080e0 <__libc_init_array+0xc>
 8008102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008106:	4798      	blx	r3
 8008108:	3501      	adds	r5, #1
 800810a:	e7f2      	b.n	80080f2 <__libc_init_array+0x1e>
 800810c:	080093fc 	.word	0x080093fc
 8008110:	080093fc 	.word	0x080093fc
 8008114:	080093fc 	.word	0x080093fc
 8008118:	08009400 	.word	0x08009400

0800811c <malloc>:
 800811c:	4b02      	ldr	r3, [pc, #8]	; (8008128 <malloc+0xc>)
 800811e:	4601      	mov	r1, r0
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	f000 b861 	b.w	80081e8 <_malloc_r>
 8008126:	bf00      	nop
 8008128:	20000084 	.word	0x20000084

0800812c <free>:
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <free+0xc>)
 800812e:	4601      	mov	r1, r0
 8008130:	6818      	ldr	r0, [r3, #0]
 8008132:	f000 b80b 	b.w	800814c <_free_r>
 8008136:	bf00      	nop
 8008138:	20000084 	.word	0x20000084

0800813c <memset>:
 800813c:	4402      	add	r2, r0
 800813e:	4603      	mov	r3, r0
 8008140:	4293      	cmp	r3, r2
 8008142:	d100      	bne.n	8008146 <memset+0xa>
 8008144:	4770      	bx	lr
 8008146:	f803 1b01 	strb.w	r1, [r3], #1
 800814a:	e7f9      	b.n	8008140 <memset+0x4>

0800814c <_free_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4605      	mov	r5, r0
 8008150:	2900      	cmp	r1, #0
 8008152:	d045      	beq.n	80081e0 <_free_r+0x94>
 8008154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008158:	1f0c      	subs	r4, r1, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	bfb8      	it	lt
 800815e:	18e4      	addlt	r4, r4, r3
 8008160:	f000 f8b0 	bl	80082c4 <__malloc_lock>
 8008164:	4a1f      	ldr	r2, [pc, #124]	; (80081e4 <_free_r+0x98>)
 8008166:	6813      	ldr	r3, [r2, #0]
 8008168:	4610      	mov	r0, r2
 800816a:	b933      	cbnz	r3, 800817a <_free_r+0x2e>
 800816c:	6063      	str	r3, [r4, #4]
 800816e:	6014      	str	r4, [r2, #0]
 8008170:	4628      	mov	r0, r5
 8008172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008176:	f000 b8a6 	b.w	80082c6 <__malloc_unlock>
 800817a:	42a3      	cmp	r3, r4
 800817c:	d90c      	bls.n	8008198 <_free_r+0x4c>
 800817e:	6821      	ldr	r1, [r4, #0]
 8008180:	1862      	adds	r2, r4, r1
 8008182:	4293      	cmp	r3, r2
 8008184:	bf04      	itt	eq
 8008186:	681a      	ldreq	r2, [r3, #0]
 8008188:	685b      	ldreq	r3, [r3, #4]
 800818a:	6063      	str	r3, [r4, #4]
 800818c:	bf04      	itt	eq
 800818e:	1852      	addeq	r2, r2, r1
 8008190:	6022      	streq	r2, [r4, #0]
 8008192:	6004      	str	r4, [r0, #0]
 8008194:	e7ec      	b.n	8008170 <_free_r+0x24>
 8008196:	4613      	mov	r3, r2
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	b10a      	cbz	r2, 80081a0 <_free_r+0x54>
 800819c:	42a2      	cmp	r2, r4
 800819e:	d9fa      	bls.n	8008196 <_free_r+0x4a>
 80081a0:	6819      	ldr	r1, [r3, #0]
 80081a2:	1858      	adds	r0, r3, r1
 80081a4:	42a0      	cmp	r0, r4
 80081a6:	d10b      	bne.n	80081c0 <_free_r+0x74>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	4401      	add	r1, r0
 80081ac:	1858      	adds	r0, r3, r1
 80081ae:	4282      	cmp	r2, r0
 80081b0:	6019      	str	r1, [r3, #0]
 80081b2:	d1dd      	bne.n	8008170 <_free_r+0x24>
 80081b4:	6810      	ldr	r0, [r2, #0]
 80081b6:	6852      	ldr	r2, [r2, #4]
 80081b8:	605a      	str	r2, [r3, #4]
 80081ba:	4401      	add	r1, r0
 80081bc:	6019      	str	r1, [r3, #0]
 80081be:	e7d7      	b.n	8008170 <_free_r+0x24>
 80081c0:	d902      	bls.n	80081c8 <_free_r+0x7c>
 80081c2:	230c      	movs	r3, #12
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	e7d3      	b.n	8008170 <_free_r+0x24>
 80081c8:	6820      	ldr	r0, [r4, #0]
 80081ca:	1821      	adds	r1, r4, r0
 80081cc:	428a      	cmp	r2, r1
 80081ce:	bf04      	itt	eq
 80081d0:	6811      	ldreq	r1, [r2, #0]
 80081d2:	6852      	ldreq	r2, [r2, #4]
 80081d4:	6062      	str	r2, [r4, #4]
 80081d6:	bf04      	itt	eq
 80081d8:	1809      	addeq	r1, r1, r0
 80081da:	6021      	streq	r1, [r4, #0]
 80081dc:	605c      	str	r4, [r3, #4]
 80081de:	e7c7      	b.n	8008170 <_free_r+0x24>
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
 80081e2:	bf00      	nop
 80081e4:	2000061c 	.word	0x2000061c

080081e8 <_malloc_r>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	1ccd      	adds	r5, r1, #3
 80081ec:	f025 0503 	bic.w	r5, r5, #3
 80081f0:	3508      	adds	r5, #8
 80081f2:	2d0c      	cmp	r5, #12
 80081f4:	bf38      	it	cc
 80081f6:	250c      	movcc	r5, #12
 80081f8:	2d00      	cmp	r5, #0
 80081fa:	4606      	mov	r6, r0
 80081fc:	db01      	blt.n	8008202 <_malloc_r+0x1a>
 80081fe:	42a9      	cmp	r1, r5
 8008200:	d903      	bls.n	800820a <_malloc_r+0x22>
 8008202:	230c      	movs	r3, #12
 8008204:	6033      	str	r3, [r6, #0]
 8008206:	2000      	movs	r0, #0
 8008208:	bd70      	pop	{r4, r5, r6, pc}
 800820a:	f000 f85b 	bl	80082c4 <__malloc_lock>
 800820e:	4a23      	ldr	r2, [pc, #140]	; (800829c <_malloc_r+0xb4>)
 8008210:	6814      	ldr	r4, [r2, #0]
 8008212:	4621      	mov	r1, r4
 8008214:	b991      	cbnz	r1, 800823c <_malloc_r+0x54>
 8008216:	4c22      	ldr	r4, [pc, #136]	; (80082a0 <_malloc_r+0xb8>)
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	b91b      	cbnz	r3, 8008224 <_malloc_r+0x3c>
 800821c:	4630      	mov	r0, r6
 800821e:	f000 f841 	bl	80082a4 <_sbrk_r>
 8008222:	6020      	str	r0, [r4, #0]
 8008224:	4629      	mov	r1, r5
 8008226:	4630      	mov	r0, r6
 8008228:	f000 f83c 	bl	80082a4 <_sbrk_r>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d126      	bne.n	800827e <_malloc_r+0x96>
 8008230:	230c      	movs	r3, #12
 8008232:	6033      	str	r3, [r6, #0]
 8008234:	4630      	mov	r0, r6
 8008236:	f000 f846 	bl	80082c6 <__malloc_unlock>
 800823a:	e7e4      	b.n	8008206 <_malloc_r+0x1e>
 800823c:	680b      	ldr	r3, [r1, #0]
 800823e:	1b5b      	subs	r3, r3, r5
 8008240:	d41a      	bmi.n	8008278 <_malloc_r+0x90>
 8008242:	2b0b      	cmp	r3, #11
 8008244:	d90f      	bls.n	8008266 <_malloc_r+0x7e>
 8008246:	600b      	str	r3, [r1, #0]
 8008248:	50cd      	str	r5, [r1, r3]
 800824a:	18cc      	adds	r4, r1, r3
 800824c:	4630      	mov	r0, r6
 800824e:	f000 f83a 	bl	80082c6 <__malloc_unlock>
 8008252:	f104 000b 	add.w	r0, r4, #11
 8008256:	1d23      	adds	r3, r4, #4
 8008258:	f020 0007 	bic.w	r0, r0, #7
 800825c:	1ac3      	subs	r3, r0, r3
 800825e:	d01b      	beq.n	8008298 <_malloc_r+0xb0>
 8008260:	425a      	negs	r2, r3
 8008262:	50e2      	str	r2, [r4, r3]
 8008264:	bd70      	pop	{r4, r5, r6, pc}
 8008266:	428c      	cmp	r4, r1
 8008268:	bf0d      	iteet	eq
 800826a:	6863      	ldreq	r3, [r4, #4]
 800826c:	684b      	ldrne	r3, [r1, #4]
 800826e:	6063      	strne	r3, [r4, #4]
 8008270:	6013      	streq	r3, [r2, #0]
 8008272:	bf18      	it	ne
 8008274:	460c      	movne	r4, r1
 8008276:	e7e9      	b.n	800824c <_malloc_r+0x64>
 8008278:	460c      	mov	r4, r1
 800827a:	6849      	ldr	r1, [r1, #4]
 800827c:	e7ca      	b.n	8008214 <_malloc_r+0x2c>
 800827e:	1cc4      	adds	r4, r0, #3
 8008280:	f024 0403 	bic.w	r4, r4, #3
 8008284:	42a0      	cmp	r0, r4
 8008286:	d005      	beq.n	8008294 <_malloc_r+0xac>
 8008288:	1a21      	subs	r1, r4, r0
 800828a:	4630      	mov	r0, r6
 800828c:	f000 f80a 	bl	80082a4 <_sbrk_r>
 8008290:	3001      	adds	r0, #1
 8008292:	d0cd      	beq.n	8008230 <_malloc_r+0x48>
 8008294:	6025      	str	r5, [r4, #0]
 8008296:	e7d9      	b.n	800824c <_malloc_r+0x64>
 8008298:	bd70      	pop	{r4, r5, r6, pc}
 800829a:	bf00      	nop
 800829c:	2000061c 	.word	0x2000061c
 80082a0:	20000620 	.word	0x20000620

080082a4 <_sbrk_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4c06      	ldr	r4, [pc, #24]	; (80082c0 <_sbrk_r+0x1c>)
 80082a8:	2300      	movs	r3, #0
 80082aa:	4605      	mov	r5, r0
 80082ac:	4608      	mov	r0, r1
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	f000 f80a 	bl	80082c8 <_sbrk>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_sbrk_r+0x1a>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	b103      	cbz	r3, 80082be <_sbrk_r+0x1a>
 80082bc:	602b      	str	r3, [r5, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	20007068 	.word	0x20007068

080082c4 <__malloc_lock>:
 80082c4:	4770      	bx	lr

080082c6 <__malloc_unlock>:
 80082c6:	4770      	bx	lr

080082c8 <_sbrk>:
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <_sbrk+0x14>)
 80082ca:	6819      	ldr	r1, [r3, #0]
 80082cc:	4602      	mov	r2, r0
 80082ce:	b909      	cbnz	r1, 80082d4 <_sbrk+0xc>
 80082d0:	4903      	ldr	r1, [pc, #12]	; (80082e0 <_sbrk+0x18>)
 80082d2:	6019      	str	r1, [r3, #0]
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	4402      	add	r2, r0
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	4770      	bx	lr
 80082dc:	20000624 	.word	0x20000624
 80082e0:	2000706c 	.word	0x2000706c

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
